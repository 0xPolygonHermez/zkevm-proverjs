CONST %LEN1 = 100
CONSTL %LEN2 = 300
CONST %LEN3 = 40

VAR GLOBAL a1[%LEN1]
VAR GLOBAL a2[100]
VAR GLOBAL b
VAR GLOBAL c1[%LEN2]
VAR GLOBAL c2[300]
VAR GLOBAL d

VAR CTX e[%LEN3]

start_arrays:

        1   :MSTORE(a1)
        2   :MSTORE(b)
        3   :MSTORE(c1)
        4   :MSTORE(d)

        ; 1] Test for globally-defined variables
        13 => E
        2 => RR
        0                               :MLOAD(a1[23])
        0                               :MLOAD(a1[E + 10])
        0x1FE223                        :MSTORE(a1[23])
        0x1FE223                        :MLOAD(a1[23])
        0x1FE223                        :MLOAD(a1[E + 10])

        ; Check values are stored and obtained correctly
        0x1FE223 => A
        A                               :MLOAD(a1[23])
        ${mem.a1[23]}                   :ASSERT
        ${mem.a1[E+10]}                 :ASSERT
        ${mem.a1[E+RR+8]}               :ASSERT
        ${getMemValue(addr.a1+E+10)}    :ASSERT
        ${getMemValue(addr.a1+E+RR+8)}  :ASSERT

        ; Check address is stored and obtained correctly
        @a1 + 23 => A
        ${addr.a1[E+10]}                :ASSERT
        ${addr.a1[E+RR+8]}              :ASSERT
        ${getMemAddr(addr.a1+E+10)}     :ASSERT
        ${getMemAddr(addr.a1+E+RR+8)}   :ASSERT

        ; 2] Same tests, but for a CTX variable
        1 => CTX
        1   :MSTORE(e)
        13 => E
        2 => RR
        0                               :MLOAD(e[23])
        0                               :MLOAD(e[E + 10])
        0xfe05bd2180d9n                 :MSTORE(e[23])
        0xfe05bd2180d9n                 :MLOAD(e[23])
        0xfe05bd2180d9n                 :MLOAD(e[E + 10])

        ; Check values are stored and obtained correctly
        0xfe05bd2180d9n => A
        A                              :MLOAD(e[23])
        ${mem.e[23]}                   :ASSERT
        ${mem.e[E+10]}                 :ASSERT
        ${mem.e[E+RR+8]}               :ASSERT
        ${getMemValue(addr.e+E+10)}    :ASSERT
        ${getMemValue(addr.e+E+RR+8)}  :ASSERT

        ; Check address is stored and obtained correctly
        @e + 23 + 0x40000*CTX => A
        ${addr.e[E+10]}    :ASSERT
        ${addr.e[E+RR+8]}              :ASSERT
        ${getMemAddr(addr.e+E+10)}     :ASSERT
        ${getMemAddr(addr.e+E+RR+8)}   :ASSERT

        ; Change the context and repeat tests
        2 => CTX
        1   :MSTORE(e)
        13 => E
        2 => RR
        0                               :MLOAD(e[23])
        0                               :MLOAD(e[E + 10])
        0xfe05bd2180d9n                 :MSTORE(e[23])
        0xfe05bd2180d9n                 :MLOAD(e[23])
        0xfe05bd2180d9n                 :MLOAD(e[E + 10])

        ; Check values are stored and obtained correctly
        0xfe05bd2180d9n => A
        A                              :MLOAD(e[23])
        ${mem.e[23]}                   :ASSERT
        ${mem.e[E+10]}                 :ASSERT
        ${mem.e[E+RR+8]}               :ASSERT
        ${getMemValue(addr.e+E+10)}    :ASSERT
        ${getMemValue(addr.e+E+RR+8)}  :ASSERT

        ; Check address is stored and obtained correctly
        @e + 23 + 0x40000*CTX => A
        ${addr.e[E+10]}    :ASSERT
        ${addr.e[E+RR+8]}              :ASSERT
        ${getMemAddr(addr.e+E+10)}     :ASSERT
        ${getMemAddr(addr.e+E+RR+8)}   :ASSERT

        ; go back to the first context
        0 => CTX


        0 => RCX,E
loopA:
        E + 1 => E      :MSTORE(a1[E])
        E - RCX - 100   :JMPN(loopA)
setB:
        E + 1 => E :MSTORE(b)

        0 => RCX,E
loopC:
        E + 1 => E
        E + 1000 :MSTORE(c1 + E)
        E - RCX - 300 :JMPN(loopC)
setD:
        E + 1 => E :MSTORE(d)

        1 => A
        ${mem.a1} :ASSERT

        1 => A
        ${mem.a1[0]} :ASSERT

        2 => A
        ${mem.a1[1]} :ASSERT

        3 => A
        ${mem.a1[2]} :ASSERT

        1001 => A
        ${mem.c1[1]} :ASSERT

        1002 => A
        ${mem.c1[2]} :ASSERT

        301 => A
        ${mem.d} :ASSERT