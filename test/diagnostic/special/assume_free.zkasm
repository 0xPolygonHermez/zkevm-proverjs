VAR GLOBAL v0[8]
VAR GLOBAL v1[12]
VAR GLOBAL padding[7]
VAR GLOBAL g7_8[8]
VAR GLOBAL g15
VAR CTX lpadding[10]
VAR CTX l10_80[80]
VAR CTX l90
CONST %CS1 = 10
CONST %CS2 = 2
CONST %CS3 = 3
CONSTL %CL1 = 100

VAR GLOBAL assumef_var1
VAR GLOBAL assumef_var2
VAR GLOBAL assumef_var3
VAR GLOBAL assumef_var4
VAR GLOBAL assumef_var5

        :JMP(assume_free_start)
        ; This is used for calls
        assume_free_label_call:
        1 => A
        1 => A
        1 => A
        :RETURN

        assume_free_label_no_call:
        :RETURN

assume_free_start:
        ; 1] F_MLOAD
        ; small test
        10                      :MSTORE(assumef_var1)
        $ + 3 => A              :F_MLOAD(assumef_var1)
        13                      :ASSERT
        assumef_var1 + 3 => A
        13                      :ASSERT

        ; 2^32-1 (maximum allowed value for freeinput computations)
        0xfffffffen             :MSTORE(assumef_var1)
        $ + 1 => A              :F_MLOAD(assumef_var1)
        0xffffffffn             :ASSERT
        assumef_var1 + 1 => A
        0xffffffffn             :ASSERT

        ; random value
        0x9334b875              :MSTORE(assumef_var1)
        $ + 0x6ccb478a => A     :F_MLOAD(assumef_var1)
        0xffffffffn             :ASSERT
        assumef_var1 + 0x6ccb478a => A
        0xffffffffn             :ASSERT


        ; 2] Syntactic Sugar for F_MLOAD, MLOAD, MSTORE
        ; These following are equivalent
        3 - 2 * B => A,C        :MSTORE(v1)
        A                       :MLOAD(v1)
        3 - 2 * B => v1,C
        A                       :MLOAD(v1)

        1 => v1,B
        3 * $ - 2 * B => A,C    :F_MLOAD(v1)
        1                       :MLOAD(v1)
        3 * v1 - 2 * B => A,C
        1                       :MLOAD(v1)

        1                       :MSTORE(v1[6])
        3 * $ - 2 * B => A,C    :F_MLOAD(v1+6)
        1                       :MLOAD(v1[6])
        3 * v1[6] - 2 * B => A,C
        1                       :MLOAD(v1[6])

        ; Playing with F_MLOAD and the associated syntactic sugar
        0 => A,B
        2 * B + 8 => A
        2 * g15 + 8 => A
        2 * l90 + 8 => A
        2 * g7_8 + 8 => A
        2 * l10_80 + 8 => A

        2 * $ + 8 => A    :F_MLOAD(g15)
        2 * $ + 8 => A    :F_MLOAD(l90)
        2 * $ + 8 => A    :F_MLOAD(g7_8)
        2 * $ + 8 => A    :F_MLOAD(l10_80)

        ; ; ERROR Doing MLOAD when F_MLOAD is expected
        ; 2 * $ + 8 => A    :MLOAD(g15)
        ; 2 * $ + 8 => A    :MLOAD(l90)
        ; 2 * $ + 8 => A    :MLOAD(g7_8)
        ; 2 * $ + 8 => A    :MLOAD(l10_80)

        ; ; ERROR
        ; 2 * ${B} + 8 => A    :MLOAD(g15)
        ; 2 * ${B} + 8 => A    :MLOAD(l90)
        ; 2 * ${B} + 8 => A    :MLOAD(g7_8)
        ; 2 * ${B} + 8 => A    :MLOAD(l10_80)

        ; ; ERROR
        ; 2 * ${B} + 8 => A    :MLOAD(g15+100)
        ; 2 * ${B} + 8 => A    :MLOAD(l90+100)
        ; 2 * ${B} + 8 => A    :MLOAD(g7_8+100)
        ; 2 * ${B} + 8 => A    :MLOAD(l10_80+100)

        ; ; ERROR
        ; 2 * ${B} + 8 => A    :MLOAD(g15[%CL1])
        ; 2 * ${B} + 8 => A    :MLOAD(l90[100])
        ; 2 * ${B} + 8 => A    :MLOAD(g7_8[100])
        ; 2 * ${B} + 8 => A    :MLOAD(l10_80[%CL1])

        B => g15
        2 * ${B} + 8 => A    :F_MLOAD(g15)
        B => l90
        2 * ${B} + 8 => A    :F_MLOAD(l90)
        B => g7_8
        2 * ${B} + 8 => A    :F_MLOAD(g7_8)
        B => l10_80
        2 * ${B} + 8 => A    :F_MLOAD(l10_80)

        ; ; ERROR Out-of-bounds
        ; 2 * ${B} + 8 => A    :F_MLOAD(g15+100)
        ; 2 * ${B} + 8 => A    :F_MLOAD(l90+100)
        ; 2 * ${B} + 8 => A    :F_MLOAD(g7_8+100)
        ; 2 * ${B} + 8 => A    :F_MLOAD(l10_80+100)
        ; 2 * ${B} + 8 => A    :F_MLOAD(g15[%CL1])
        ; 2 * ${B} + 8 => A    :F_MLOAD(l90[100])
        ; 2 * ${B} + 8 => A    :F_MLOAD(g7_8[100])
        ; 2 * ${B} + 8 => A    :F_MLOAD(l10_80[%CL1])

        ; ; ERROR out-of-bounds
        ; 2 * g15[100] + 8 => A
        ; 2 * l90[%CL1] + 8 => A
        ; 2 * g7_8[100] + 8 => A
        ; 2 * l10_80[%CL1] + 8 => A
        ; 2 * g15[100] + 8 => A
        ; 2 * l90[100] + 8 => A
        ; 2 * g7_8[100] + 8 => A
        ; 2 * l10_80[100] + 8 => A

        0 => E
        2 * g15[E+2] + 8 => A
        2 * l90[E+2] + 8 => A
        2 * g7_8[E+2] + 8 => A
        2 * l10_80[E+2] + 8 => A
        2 * g7_8[5*E+2] + 8 => A
        2 * l10_80[5*E+2] + 8 => A

        2 * $ + 8 => A    :F_MLOAD(g7_8+E)
        2 * $ + 8 => A    :F_MLOAD(l10_80+E)
        2 * $ + 8 => A    :F_MLOAD(g7_8[5*E+2])
        2 * $ + 8 => A    :F_MLOAD(l10_80[5*E+2])

        ; ; ERROR Using MLOAD when F_MLOAD is expected
        ; 2 * $ + 8 => A    :MLOAD(g7_8[5*E+2])
        ; 2 * $ + 8 => A    :MLOAD(l10_80[5*E+2])

        2 => E,RR
        2 * g7_8[5*E+2-3*RR] + 8 => A
        2 * l10_80[5*E+2-3*RR] + 8 => A

        2 * $ + 8 => A    :F_MLOAD(g7_8[5*E+2-3*RR])
        2 * $ + 8 => A    :F_MLOAD(l10_80[5*E+2-3*RR])

        ; ; ERROR Using MLOAD when F_MLOAD is expected
        ; 2 * $ + 8 => A    :MLOAD(g7_8[5*E+2-3*RR])
        ; 2 * $ + 8 => A    :MLOAD(l10_80[5*E+2-3*RR])

        2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A
        2 * l10_80[5*E+%CS2-%CS3*RR] + 8 => A

        2 * $ + 8 => A    :F_MLOAD(g7_8[5*E+%CS2-%CS3*RR])
        2 * $ + 8 => A    :F_MLOAD(l10_80[5*E+%CS2-%CS3*RR])

        ; ; ERROR Using MLOAD when F_MLOAD is expected
        ; 2 * $ + 8 => A    :MLOAD(g7_8[5*E+%CS2-%CS3*RR])
        ; 2 * $ + 8 => A    :MLOAD(l10_80[5*E+%CS2-%CS3*RR])

        2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :JMP(assume_free_label_comb1)
        assume_free_label_comb1:
        2 * l10_80[5*E+%CS2-%CS3*RR] + 8 => A :JMP(assume_free_label_comb2)
        assume_free_label_comb2:

        assume_free_label_jmp:
        1 => E,RR ; 5*E-3*RR = 2, 6*E-3*RR = 3
        2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :JMP(@assume_free_label_jmp+5*E-3*RR)
        2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :JMP(@assume_free_label_jmp+6*E-3*RR)

        ; assume_free_label_jmpc_eq:
        ; 1 => E,RR
        ; 2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :JMPC(@assume_free_label_jmpc_eq+5*E-3*RR),EQ
        ; 2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :JMPC(@assume_free_label_jmpc_eq+6*E-3*RR),EQ

        assume_free_label_jmpn:
        1 => E,RR
        2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :JMPN(@assume_free_label_jmpn+5*E-3*RR)
        2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :JMPN(@assume_free_label_jmpn+6*E-3*RR)

        assume_free_label_jmpz:
        1 => E,RR
        2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :JMPZ(@assume_free_label_jmpz+5*E-3*RR)
        2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :JMPZ(@assume_free_label_jmpz+6*E-3*RR)

	; assume_free_label_jmpnc:
	; 1 => E,RR
	; 2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :EQ,JMPNC(@assume_free_label_jmpnc+5*E-3*RR)
        ; 2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :EQ,JMPNC(@assume_free_label_jmpnc+6*E-3*RR)

	assume_free_label_jmpnz:
	1 => E,RR
	2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :JMPNZ(@assume_free_label_jmpnz+5*E-3*RR)
        2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :JMPNZ(@assume_free_label_jmpnz+6*E-3*RR)

	1 => E,RR
	2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :JMPZ(@assume_free_label_jmpz1+5*E-3*RR,@assume_free_label_jmpz2+5*E-3*RR)
        assume_free_label_jmpz1:
        assume_free_label_jmpz2:
        1 => A
        1       :ASSERT
        2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :JMPZ(@assume_free_label_jmpz3+6*E-3*RR,@assume_free_label_jmpz4+6*E-3*RR)
        assume_free_label_jmpz3:
        assume_free_label_jmpz4:
        1 => A
        1       :ASSERT
        1       :ASSERT

	; 1 => E,RR
	; 2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :EQ,JMPC(@assume_free_label_jmpc1+5*E-3*RR,@assume_free_label_jmpc2+5*E-3*RR)
        ; 2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :EQ,JMPC(@assume_free_label_jmpc1+6*E-3*RR,@assume_free_label_jmpc2+6*E-3*RR)

	1 => E,RR
	2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :JMPN(@assume_free_label_jmpn1+5*E-3*RR,@assume_free_label_jmpn2+5*E-3*RR)
        assume_free_label_jmpn1:
        assume_free_label_jmpn2:
        1 => A
        1       :ASSERT
        2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :JMPN(@assume_free_label_jmpn3+6*E-3*RR,@assume_free_label_jmpn4+6*E-3*RR)
        assume_free_label_jmpn3:
        assume_free_label_jmpn4:
        1 => A
        1       :ASSERT
        1       :ASSERT

	1 => E,RR
	2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :JMPNZ(@assume_free_label_jmpnz1+5*E-3*RR,@assume_free_label_jmpn2+5*E-3*RR)
        assume_free_label_jmpnz1:
        assume_free_label_jmpnz2:
        1 => A
        1       :ASSERT
        2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :JMPNZ(@assume_free_label_jmpnz3+6*E-3*RR,@assume_free_label_jmpn4+6*E-3*RR)
        assume_free_label_jmpnz3:
        assume_free_label_jmpnz4:
        1 => A
        1       :ASSERT
        1       :ASSERT

	; 1 => E,RR
	; 2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :EQ,JMPNC(@assume_free_label_jmpnc1+5*E-3*RR,@assume_free_label_jmpnc2+5*E-3*RR)
        ; 2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :EQ,JMPNC(@assume_free_label_jmpnc1+6*E-3*RR,@assume_free_label_jmpnc2+6*E-3*RR)

        ; CALL
	1 => E,RR
	2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :CALL(assume_free_label_call)
        1 => E,RR
        2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :CALL(assume_free_label_call)

	1 => E,RR
	2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :CALL(@assume_free_label_call+5*E-3*RR)
        1 => E,RR
        2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :CALL(@assume_free_label_call+6*E-3*RR)

	; 1 => E,RR
	; 2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :CALL_C(@label2+5*E-3*RR),EQ
        ; 2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :CALL_C(@label2+6*E-3*RR),EQ

	1 => E,RR
	2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :CALL_N(@assume_free_label_call+5*E-3*RR)
        1 => E,RR
        2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :CALL_N(@assume_free_label_call+6*E-3*RR)

	1 => E,RR
	2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :CALL_Z(@assume_free_label_call+5*E-3*RR)
        1 => E,RR
        2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :CALL_Z(@assume_free_label_call+6*E-3*RR)

	1 => E,RR
	2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :CALL_NZ(@assume_free_label_call+5*E-3*RR,@assume_free_label_no_call+5*E-3*RR)
        1 => E,RR
        2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :CALL_NZ(@assume_free_label_call+6*E-3*RR,@assume_free_label_no_call+6*E-3*RR)

	; 1 => E,RR
	; 2 * g7_8[5*E+%CS2-%CS3*RR] + 8 => A   :EQ,CALL_NC(@assume_free_label_call+5*E-3*RR,@assume_free_label_no_call+5*E-3*RR)
        ; 1 => E,RR
        ; 2 * l10_80[6*E+%CS2-%CS3*RR] + 8 => A :EQ,CALL_NC(@assume_free_label_call+6*E-3*RR,@assume_free_label_no_call+6*E-3*RR)

        ; 3] F_HASHP
        $ => E                  :MLOAD(lastHashPId)
        E + 1 => E              :MSTORE(lastHashPId)
	0 => HASHPOS

        1 => D
	0x5cn                   :HASHP(E)
	HASHPOS => A
	1                       :ASSERT

        ; 4] F_HASHK
        ; 5] F_HASHS

        ; 6] F_HASHP1,F_HASHP16,F_HASHP32
        ; 7] F_HASHK1,F_HASHK16,F_HASHK32
        ; 8] F_HASHS1,F_HASHS16,F_HASHS32