VAR GLOBAL OpJmpAddr_V1;

    STEP => RR

    0 => A,B

    3 => A
    3       :ASSERT ; OK
            :JMP(OpJmpAddr_DirectJmpOk)
    0       :ASSERT ; FAIL
OpJmpAddr_DirectJmpOk:
    3       :ASSERT ; OK

;
; JMPN without ELSE label
;

    4 => A
    A - 5   :JMPN(OpJmpAddr_JmpNegativeWithoutElse)
    0       :ASSERT ; FAIL

OpJmpAddr_JmpNegativeWithoutElse:
    4       :ASSERT ; OK


    5 => A
    A - 2   :JMPN(OpJmpAddr_JmpElseNegativeWithoutElseFail)
    5       :ASSERT ; OK
            :JMP(OpJmpAddr_JmpElseNegativeWithoutElseEnd)
OpJmpAddr_JmpElseNegativeWithoutElseFail:
    0       :ASSERT ; FAIL
OpJmpAddr_JmpElseNegativeWithoutElseEnd:


;
; JMPN with ELSE label
;

    6 => A
    A - 7   :JMPN(OpJmpAddr_JmpNegative_Ok, OpJmpAddr_JmpNegative_Fail)
    0       :ASSERT ; FAIL
OpJmpAddr_JmpNegative_Fail:
    0       :ASSERT ; FAIL

OpJmpAddr_JmpNegative_Ok:
    6       :ASSERT ; OK


    7 => A
    A - 2    :JMPN(OpJmpAddr_JmpElseNegative_fail, OpJmpAddr_JmpElseNegative_Ok)
    0       :ASSERT ; FAIL
OpJmpAddr_JmpElseNegative_fail:
    0       :ASSERT ; FAIL

OpJmpAddr_JmpElseNegative_Ok:
    7       :ASSERT ; OK


;-----------------------------

;
; JMPZ without ELSE label
;

    8 => A
    0 => B
    B       :JMPZ(OpJmpAddr_JmpZeroWithoutElse)
    0       :ASSERT ; FAIL

OpJmpAddr_JmpZeroWithoutElse:
    8       :ASSERT ; OK


    9 => A
    A       :JMPZ(OpJmpAddr_JmpZeroFalseWithoutElseFail)
    9       :ASSERT ; OK
            :JMP(OpJmpAddr_JmpZeroFalseWithoutElseEnd)
OpJmpAddr_JmpZeroFalseWithoutElseFail:
    A + 1   :ASSERT ; FAIL
OpJmpAddr_JmpZeroFalseWithoutElseEnd:


;
; JMPZ with ELSE label
;

    10 => A
    0       :JMPZ(OpJmpAddr_JmpZero_Ok,OpJmpAddr_JmpZero_Fail)
    0       :ASSERT ; FAIL
OpJmpAddr_JmpZero_Fail:
    0       :ASSERT ; FAIL

OpJmpAddr_JmpZero_Ok:
    10      :ASSERT ; OK


    11 => A
    A       :JMPZ(OpJmpAddr_JmpZeroFalse_Fail,OpJmpAddr_JmpZeroFalse_Ok)
    0       :ASSERT ; FAIL
OpJmpAddr_JmpZeroFalse_Fail:
    0       :ASSERT ; FAIL

OpJmpAddr_JmpZeroFalse_Ok:
    11      :ASSERT

;
; JMP with other address instructions
;

    12 => A
    12      :ASSERT ; OK
    365423847278443895435n :MSTORE(OpJmpAddr_V1),JMP(OpJmpAddr_JmpWithMStoreOk)
    0       :ASSERT ; FAIL

OpJmpAddr_JmpWithMStoreOk:

    12      :ASSERT ; OK
    $ => A  :MLOAD(OpJmpAddr_V1)
    365423847278443895435n :ASSERT

    13 => A
    13      :ASSERT ; OK
    99363847278443895435n :MSTORE(OpJmpAddr_V1),JMP(OpJmpAddr_JmpWithMStore2Ok)
    0       :ASSERT ; FAIL

OpJmpAddr_JmpWithMStore2Ok:

    13      :ASSERT ; OK
    $ => A  :MLOAD(OpJmpAddr_V1)
    99363847278443895435n :ASSERT


;
; JMPZ with other address instructions
;

    0n      :MSTORE(OpJmpAddr_V1)
    14 => A
    14      :ASSERT ; OK
    $       :MLOAD(OpJmpAddr_V1),JMPZ(OpJmpAddr_JmpzWithMemOk,OpJmpAddr_JmpzWithMemFail)
    0       :ASSERT ; FAIL

OpJmpAddr_JmpzWithMemFail:
    0       :ASSERT ; FAIL

OpJmpAddr_JmpzWithMemOk:
    14      :ASSERT ; OK

    255n    :MSTORE(OpJmpAddr_V1)
    15 => A
    15      :ASSERT ; OK
    $       :MLOAD(OpJmpAddr_V1),JMPZ(OpJmpAddr_JmpzWithMem2Fail,OpJmpAddr_JmpzWithMem2Ok)
    0       :ASSERT ; FAIL

OpJmpAddr_JmpzWithMem2Fail:
    0       :ASSERT ; FAIL

OpJmpAddr_JmpzWithMem2Ok:
    15      :ASSERT ; OK

