; constants needed by executor C++
CONST %N = 2**23

VAR GLOBAL lastHashKId
VAR GLOBAL lastHashPId
VAR GLOBAL lastHashSId

VAR GLOBAL initial_A
VAR GLOBAL initial_B
VAR GLOBAL initial_C
VAR GLOBAL initial_D
VAR GLOBAL initial_E
VAR GLOBAL initial_CTX
VAR GLOBAL initial_SP
VAR GLOBAL initial_PC
VAR GLOBAL initial_GAS
VAR GLOBAL initial_SR
VAR GLOBAL initial_RR
VAR GLOBAL initial_HASHPOS
VAR GLOBAL initial_RCX

start:

        STEP => A
        0 :ASSERT


        A           :MSTORE(initial_A)
        B           :MSTORE(initial_B)
        C           :MSTORE(initial_C)
        D           :MSTORE(initial_D)
        E           :MSTORE(initial_E)
        CTX         :MSTORE(initial_CTX)
        SP          :MSTORE(initial_SP)
        PC          :MSTORE(initial_PC)
        GAS         :MSTORE(initial_GAS)
        SR          :MSTORE(initial_SR)
        RR          :MSTORE(initial_RR)
        HASHPOS     :MSTORE(initial_HASHPOS)
        RCX         :MSTORE(initial_RCX)
        0 => A,B,C,D,E,CTX, SP, PC, GAS, SR, RR, HASHPOS, RCX

        -1          :MSTORE(lastHashKId)
        -1          :MSTORE(lastHashPId)
        -1          :MSTORE(lastHashSId)

INCLUDE "constants.zkasm"
INCLUDE "lvalues.zkasm"

INCLUDE "../../../node_modules/@0xpolygonhermez/zkevm-rom/main/constants.zkasm"

VAR GLOBAL g7_8[8]
VAR GLOBAL g15
VAR CTX l10_80[80]
VAR CTX l90

VAR GLOBAL assumef_var1

        :JMP(assume_free_start)

REDUNDANT_ARITH_BN254_ADDFP2_CHECK:

        ${(A+C) % const.BN254_P} => E
        ${(B+D) % const.BN254_P}        :ARITH_BN254_ADDFP2

        ${ARITH_BN254_ADDFP2(A,C)} => E
        ${ARITH_BN254_ADDFP2(B,D)}      :ARITH_BN254_ADDFP2
                                        :RETURN

REDUNDANT_ARITH_BN254_MULFP2_CHECK:

        ${(A*C) >= (B*D) ? (((A*C)-(B*D)) % const.BN254_P) : (const.BN254_P - (((B*D)-(A*C)) % const.BN254_P))} => E
        ${((A*D)+(B*C)) % const.BN254_P} :ARITH_BN254_MULFP2

        ${ARITH_BN254_MULFP2_X(A,B,C,D)} => E
        ${ARITH_BN254_MULFP2_Y(A,B,C,D)} :ARITH_BN254_MULFP2
                                        :RETURN

REDUNDANT_ARITH_BN254_SUBFP2_CHECK:

        ${(A + const.BN254_P - C) % const.BN254_P} => E
        ${(B + const.BN254_P - D) % const.BN254_P} :ARITH_BN254_SUBFP2

        ${ARITH_BN254_SUBFP2(A,C)} => E
        ${ARITH_BN254_SUBFP2(B,D)}      :ARITH_BN254_SUBFP2
                                        :RETURN

REDUNDANT_ARITH_ECADD_DIFFERENT:

        ${xAddPointEc(A,B,C,D)} => E
        ${yAddPointEc(A,B,C,D)}         :ARITH_ECADD_DIFFERENT
                                        :RETURN

REDUNDANT_ARITH_ECADD_SAME:

        ${xDblPointEc(A,B)} => E
        ${yDblPointEc(A,B)}             :ARITH_ECADD_SAME
                                        :RETURN

REDUNDANT_ARITH_SECP256R1_ECADD_DIFFERENT_CHECK:

        ${xAddPointEc_secp256r1(A,B,C,D)} => E
        ${yAddPointEc_secp256r1(A,B,C,D)}   :ARITH_SECP256R1_ECADD_DIFFERENT
                                            :RETURN

REDUNDANT_ARITH_SECP256R1_ECADD_SAME_CHECK:

        ${xDblPointEc_secp256r1(A,B,C,D)} => E
        ${yDblPointEc_secp256r1(A,B,C,D)}   :ARITH_SECP256R1_ECADD_SAME
                                            :RETURN

assume_free_start:
        ;;
        ; F_MLOAD
        ;;

        ; small test
        10                      :MSTORE(assumef_var1)
        $ + 3 => A              :F_MLOAD(assumef_var1)
        13                      :ASSERT

        10                      :MLOAD(assumef_var1)

        ; 2^32-1 (maximum allowed value for freeinput computations)
        0xfffffffen             :MSTORE(assumef_var1)
        $ + 1 => A              :F_MLOAD(assumef_var1)
        0xffffffffn             :ASSERT

        ; random value
        0x9334b875              :MSTORE(assumef_var1)
        $ + 0x6ccb478a => A     :F_MLOAD(assumef_var1)
        0xffffffffn             :ASSERT

        ; zero value
        0x0                     :MSTORE(assumef_var1)
        $ + 0x6ccb478a => A     :F_MLOAD(assumef_var1)
        0x6ccb478a              :ASSERT

        ; large value
        1                       :MSTORE(assumef_var1)
        $ + 0xF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFn => A :F_MLOAD(assumef_var1)
        0xF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEF0n: ASSERT

        ; large values
        0xB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFA0A1A2A3A4A5A6A7A8A9AAABACADAEAFn :MSTORE(assumef_var1)
        $ + 0x4040404040404040404040404040404040404040404040404040404040404040n => A :F_MLOAD(assumef_var1)
        0xF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFn: ASSERT

        ; large2 values

        0xB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFA0A1A2A3A4A5A6A7A8A9AAABACADAEAFn :MSTORE(assumef_var1)
        $ + 0x4F4E4D4C4B4A494847464544434241405F5E5D5C5B5A59585756555453525150n => A :F_MLOAD(assumef_var1)
        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn: ASSERT


        0x1111111111111111111111111111111111111111111111111111111111111111n :MSTORE(g15)
        0x2222222222222222222222222222222222222222222222222222222222222222n :MSTORE(l90)
        0x3333333333333333333333333333333333333333333333333333333333333333n :MSTORE(g7_8)
        0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn :MSTORE(g7_8+1)
        0x5555555555555555555555555555555555555555555555555555555555555555n :MSTORE(g7_8+3)
        0x6666666666666666666666666666666666666666666666666666666666666666n :MSTORE(g7_8+5)
        0x4444444444444444444444444444444444444444444444444444444444444444n :MSTORE(l10_80)

        2 * $ + 8 => A                                                      :F_MLOAD(g15)
        0x222222222222222222222222222222222222222222222222222222222222222An :ASSERT
        2 * $ + 8 => A                                                      :F_MLOAD(l90)
        0x444444444444444444444444444444444444444444444444444444444444444Cn :ASSERT
        2 * $ + 8 => A                                                      :F_MLOAD(g7_8)
        0x666666666666666666666666666666666666666666666666666666666666666En :ASSERT
        2 * $ + 8 => A                                                      :F_MLOAD(l10_80)
        0x8888888888888888888888888888888888888888888888888888888888888890n :ASSERT

        0 => E
        $ => A               :MLOAD(g7_8[E+2])
        0                    :ASSERT

        2 * $ + 8 => A       :F_MLOAD(g7_8[E+2])
        8                    :ASSERT

        1 => E
        2 * $ + 1 => A       :F_MLOAD(g7_8[E+2])
        0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABn :ASSERT

        6 => E
        $ + 1 => A           :F_MLOAD(g7_8[E-1])
        0x6666666666666666666666666666666666666666666666666666666666666667n :ASSERT

        ; ARITH

        0n => A
        0n => B
        0n => C
        0n => D
        0n :ARITH

        2132730398305190967668080390814n => A
        54292886400143341927280054073980425823246656081n => B
        1n => C
        0n => D
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :ARITH

        0n => A
        20461646802298906980762583770860915677116535487874170572552628192653608014730n => B
        6992781226881595625739967127142000520977098989512983986793047316871483459918n => C
        0n => D
        6992781226881595625739967127142000520977098989512983986793047316871483459918n :ARITH

        8185294398670857206588387453006456912211107202444686619085770886559782939833n => A
        0n => B
        20430345858968609673351474973766446317558778020642244131730714986194551525821n => C
        0n => D
        20430345858968609673351474973766446317558778020642244131730714986194551525821n :ARITH


        ; ARITH_BN254_ADDFP2

        13711656746733268222567533172112676883000101112146768892351115648827973300480n => A
        6393502799910690217707124289990572571312170142480195367219759198051579256141n => B
        771545936994033968269212401953290148355162413878965127328485084765403652892n => C
        14359778202859430638045081279086754832692244010987672849237907527453437647710n => D
        14483202683727302190836745574065967031355263526025734019679600733593376953372n => E
        20753281002770120855752205569077327404004414153467868216457666725505016903851n   :ARITH_BN254_ADDFP2
        :CALL(REDUNDANT_ARITH_BN254_ADDFP2_CHECK)

        8950689131250675683911095685718419621318943349561831872421652304087298144165n => A
        1201117866460819778145459617748368949511220862457430989430304177713753150104n => B
        16954731464485579583787780888674604373523807040372883934851063671747148339817n => C
        19351931856693804646323751145431439633992380512831548435359093289277373166030n => D
        4017177723896980045452470829135748906146439232636892144583678081189220275399n => E
        20553049723154624424469210763179808583503601375288979424789397466991126316134n   :ARITH_BN254_ADDFP2
	    :CALL(REDUNDANT_ARITH_BN254_ADDFP2_CHECK)


        ; ARITH_BN254_MULFP2

        0n => A
        0n => B
        0n => C
        0n => D
        0n => E
        0n :ARITH_BN254_MULFP2
	    :CALL(REDUNDANT_ARITH_BN254_MULFP2_CHECK)

        0n => A
        0n => B
        1n => C
        0n => D
        0n => E
        0n :ARITH_BN254_MULFP2
	    :CALL(REDUNDANT_ARITH_BN254_MULFP2_CHECK)

        1 => A,B,C,D
        0 => E
        2           :ARITH_BN254_MULFP2
        :CALL(REDUNDANT_ARITH_BN254_MULFP2_CHECK)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n => A
        115792089237316195423570985008687907853269984665640564039457584007913129639935n => B
        0n => C
        0n => D
        0n => E
        0n :ARITH_BN254_MULFP2
	    :CALL(REDUNDANT_ARITH_BN254_MULFP2_CHECK)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n => A
        0n => B
        115792089237316195423570985008687907853269984665640564039457584007913129639935n => C
        0n => D
        12283109618583340521412061117291584720854994367414008739435419022702680857751n => E
        0n :ARITH_BN254_MULFP2
	    :CALL(REDUNDANT_ARITH_BN254_MULFP2_CHECK)

        13711656746733268222567533172112676883000101112146768892351115648827973300480n => A
        399593924994418138606695268124410785707010633905012210451234949878223703508n => B
        771545936994033968269212401953290148355162413878965127328485084765403652892n => C
        14359778202859430638045081279086754832692244010987672849237907527453437647710n => D
        11442959275179928994186022512829515819458919430637441527826162829474096963046n => E
        14810311712192582060568872108847442858577129136466113105142261840396162638808n   :ARITH_BN254_MULFP2
        :CALL(REDUNDANT_ARITH_BN254_MULFP2_CHECK)


        ; ARITH_BN254_SUBFP2

        13711656746733268222567533172112676883000101112146768892351115648827973300480n => A
        399593924994418138606695268124410785707010633905012210451234949878223703508n => B
        771545936994033968269212401953290148355162413878965127328485084765403652892n => C
        14359778202859430638045081279086754832692244010987672849237907527453437647710n => D
        12940110809739234254298320770159386734644938698267803765022630564062569647588n => E
        7928058593974262722808019734294931041711077780215163023902365317070012264381n   :ARITH_BN254_SUBFP2
	    :CALL(REDUNDANT_ARITH_BN254_SUBFP2_CHECK)

        8950689131250675683911095685718419621318943349561831872421652304087298144165n => A
        1201117866460819778145459617748368949511220862457430989430304177713753150104n => B
        16954731464485579583787780888674604373523807040372883934851063671747148339817n => C
        19351931856693804646323751145431439633992380512831548435359093289277373166030n => D
        13884200538604371322369720542301090336491447466486771600259626526985376012931n => E
        3737428881606290354068114217574204404215151506923706216760248783081606192657n   :ARITH_BN254_SUBFP2
	    :CALL(REDUNDANT_ARITH_BN254_SUBFP2_CHECK)

        2999113016370801447448637477310555551699411366746876888402482806647931650955n => A
        15111836776712714633472521107426170732646708720491125290424115686452538044788n => B
        1615640209694347989024567018706328391116430477872687075840266591062548700110n => C
        1361179629352358267333550734567663993971386151768430307761609245213368478601n => D
        1383472806676453458424070458604227160582980888874189812562216215585382950845n => E
        13750657147360356366138970372858506738675322568722694982662506441239169566187n :ARITH_BN254_SUBFP2
	    :CALL(REDUNDANT_ARITH_BN254_SUBFP2_CHECK)


        ; ARITH_ECADD_DIFFERENT

        %SECP256K1_GX => A
        %SECP256K1_GY => B
        89565891926547004231252920425935692360644145829622209833684329913297188986597n => C
        12158399299693830322967808612713398636155367887041628176798871954788371653930n => D
        112711660439710606056748659173929673102114977341539408544630613555209775888121n => E
        25583027980570883691656905877401976406448868254816295069919888960541586679410n   :ARITH_ECADD_DIFFERENT
        :CALL(REDUNDANT_ARITH_ECADD_DIFFERENT)

        112711660439710606056748659173929673102114977341539408544630613555209775888121n => A
        25583027980570883691656905877401976406448868254816295069919888960541586679410n => B
        %SECP256K1_GX => C
        %SECP256K1_GY => D
        103388573995635080359749164254216598308788835304023601477803095234286494993683n => E
        37057141145242123013015316630864329550140216928701153669873286428255828810018n   :ARITH_ECADD_DIFFERENT
        :CALL(REDUNDANT_ARITH_ECADD_DIFFERENT)

        55066263022277343669578718895168534326250603453777594175500187360389116729240n => A
        32670510020758816978083085130507043184471273380659243275938904335757337482424n => B
        89565891926547004231252920425935692360644145829622209833684329913297188986597n => C
        12158399299693830322967808612713398636155367887041628176798871954788371653930n => D
        112711660439710606056748659173929673102114977341539408544630613555209775888121n => E
        25583027980570883691656905877401976406448868254816295069919888960541586679410n :ARITH_ECADD_DIFFERENT
	    :CALL(REDUNDANT_ARITH_ECADD_DIFFERENT)

        ; ARITH_ECADD_SAME

        %SECP256K1_GX => A
        %SECP256K1_GY => B
        89565891926547004231252920425935692360644145829622209833684329913297188986597n => E
        12158399299693830322967808612713398636155367887041628176798871954788371653930n   :ARITH_ECADD_SAME
	    :CALL(REDUNDANT_ARITH_ECADD_SAME)

        89565891926547004231252920425935692360644145829622209833684329913297188986597n => A
        12158399299693830322967808612713398636155367887041628176798871954788371653930n => B
        103388573995635080359749164254216598308788835304023601477803095234286494993683n => E
        37057141145242123013015316630864329550140216928701153669873286428255828810018n   :ARITH_ECADD_SAME
	    :CALL(REDUNDANT_ARITH_ECADD_SAME)

        115780575977492633039504758427830329241728645270042306223540962614150928364886n => A
        78735063515800386211891312544505775871260717697865196436804966483607426560663n => B
        115780575977492633039504758427830329241728645270042306223540962614150928364886n => C
        78735063515800386211891312544505775871260717697865196436804966483607426560663n => D
        94111259592240215275188773285036844871058226277992966241101117022315524122714n => E
        76870767327212528811304566602812752860184934880685532702451763239157141742375n  :ARITH_ECADD_SAME
	    :CALL(REDUNDANT_ARITH_ECADD_SAME)

        ; ARITH_SECP256R1_ECADD_DIFFERENT

        0x544311262e9e2949e7601fc620d04082c46fa29d94a9b414f5dde31c7aac09f8n => A
        0xcc19d44560f5cbe1b96a22b4ea202ab68ff9083763a4a1a1cbac1ca9b6ed11d4n => B
        0xf92c7bc653fc5e5e16b2d1b5a4f8c85078dbd737e46eefd1186d5d453cb71c04n => C
        0xe78feb012c46fc1a79af6ad830ccb124de7de7b9313122420fa30bdc83f4057fn => D
        0xffffffff00000001000000000000000000000000fffffffffffffffffffffffcn => E
        0x19719bebf6aea13f25c96dfd7c71f5225d4c8fc09eb5a0ab9f39e9178e55c121n : ARITH_SECP256R1_ECADD_DIFFERENT

        :CALL(REDUNDANT_ARITH_SECP256R1_ECADD_DIFFERENT_CHECK)


        0xc80ff59db5ecd988dbaba55f9197a5844c00e515ecc62dac46bad5c5280868a6n => A
        0x0bbe8299fca62abd0932ab0c53cd66b6609cc6720106d210f7750fcc6c445988n => B
        0x9597af33e3e9acbbf303ccb4b36aeb455979fe6ca35d9f27e86fae5aacda1a08n => C
        0x1ef8ce2d14fb74686b648427dd6ba4e44bf805c5590a65bdc6ff00e55dd83d2an => D
        0x8d0177ebab9c6e9e10db6dd095dbac0d6375e8a97b70f611875d877f0069d2c7n => E
        0xffffffff00000001000000000000000000000000fffffffffffffffffffffffen : ARITH_SECP256R1_ECADD_DIFFERENT

        :CALL(REDUNDANT_ARITH_SECP256R1_ECADD_DIFFERENT_CHECK)


        0x728cad943915a8c2efee531dd868edeb750b818c442a4498fea8e578b6eb9d29n => A
        0x94548cd42b424a4a88173ef56add5b298ada92c024fd21436c19c020b6f782d2n => B
        0x7f45378a3e45b342403c9f645cfa8bcd94881f1bdbf3388d36c5c40fae0336c1n => C
        0x3b486438f3e1b4ffd9cb58225995377ffdd3d58abc6eeddc3e5ea2d5ea10082cn => D
        0x6916fac45e568b6b9e2e2ecd611b282e5fcc40a3067d601057f879ce5a8a73ccn => E
        0xffffffff00000001000000000000000000000000fffffffffffffffffffffffen : ARITH_SECP256R1_ECADD_DIFFERENT
        :CALL(REDUNDANT_ARITH_SECP256R1_ECADD_DIFFERENT_CHECK)

        :JMP(end)

ecrecover_store_args:
ecrecover_end:
checkFirstTxType:
writeBlockInfoRoot:
outOfCountersStep:
outOfCountersArith:
outOfCountersBinary:
outOfCountersKeccak:
outOfCountersSha256:
outOfCountersMemalign:
outOfCountersPoseidon:
outOfCountersPadding:
invalidIntrinsicTxSenderCode:

        A => A      ; NOP

end:

        $ => A           :MLOAD(initial_A)
        $ => B           :MLOAD(initial_B)
        $ => C           :MLOAD(initial_C)
        $ => D           :MLOAD(initial_D)
        $ => E           :MLOAD(initial_E)
        $ => CTX         :MLOAD(initial_CTX)
        $ => SP          :MLOAD(initial_SP)
        $ => PC          :MLOAD(initial_PC)
        $ => GAS         :MLOAD(initial_GAS)
        $ => SR          :MLOAD(initial_SR)
        $ => RR          :MLOAD(initial_RR)
        $ => HASHPOS     :MLOAD(initial_HASHPOS)
        $ => RCX         :MLOAD(initial_RCX)

; label finalizeExecution needed by executor C++
finalizeExecution:
                         :JMP(finalWait)
finalWait:
        ${beforeLast()}  :JMPN(finalWait)
                         :JMP(start)
opINVALID:
; label checkAndSaveFrom needed by executor C++
checkAndSaveFrom:
                         :JMP(opINVALID)
