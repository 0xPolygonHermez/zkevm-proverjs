; node test/zkasmtest.js -C -e -n Binary,PoseidonG -o tmp test/features/hashP_fe12/hashP_fe12.zkasm

; constants needed by executor C++
CONST %N = 2**19
CONST %MAX_CNT_STEPS_LIMIT = %N
CONST %MAX_CNT_ARITH_LIMIT = %N
CONST %MAX_CNT_BINARY_LIMIT = %N
CONST %MAX_CNT_MEM_ALIGN_LIMIT = %N
CONST %MAX_CNT_KECCAK_F_LIMIT = %N
CONST %MAX_CNT_PADDING_PG_LIMIT = %N
CONST %MAX_CNT_POSEIDON_G_LIMIT = %N

CONSTL %P_BN254 = 21888242871839275222246405745257275088696311157297823662689037894645226208583n

VAR GLOBAL lastHashKId
VAR GLOBAL lastHashPId

VAR GLOBAL initial_A
VAR GLOBAL initial_B
VAR GLOBAL initial_C
VAR GLOBAL initial_D
VAR GLOBAL initial_E
VAR GLOBAL initial_CTX
VAR GLOBAL initial_SP
VAR GLOBAL initial_PC
VAR GLOBAL initial_GAS
VAR GLOBAL initial_SR
VAR GLOBAL initial_RR
VAR GLOBAL initial_HASHPOS
VAR GLOBAL initial_RCX

start:

        STEP => A
        0 :ASSERT


        A           :MSTORE(initial_A)
        B           :MSTORE(initial_B)
        C           :MSTORE(initial_C)
        D           :MSTORE(initial_D)
        E           :MSTORE(initial_E)
        CTX         :MSTORE(initial_CTX)
        SP          :MSTORE(initial_SP)
        PC          :MSTORE(initial_PC)
        GAS         :MSTORE(initial_GAS)
        SR          :MSTORE(initial_SR)
        RR          :MSTORE(initial_RR)
        HASHPOS     :MSTORE(initial_HASHPOS)
        RCX         :MSTORE(initial_RCX)
        0 => A,B,C,D,E,CTX, SP, PC, GAS, SR, RR, HASHPOS, RCX

        -1          :MSTORE(lastHashKId)
        -1          :MSTORE(lastHashPId)

                    :JMP(init)

init:
        5577465515873305007n => A
        14007324077747804655n => B
        11970558779030694813n => C
        90072333880767889159723417923683074156284148368350583462231994241045501576981n :HASHP_FE12

        9837762843954570281n => A
        4153395419289976189n => B
        7779927151441415970n => C
        1864566622696075535884974743759373283480666274781806120470885814115790075071n :HASHP_FE12

        2744552759689415440n => A
        1337115138656405949n => B
        9187886871313117867n => C
        58427216338730128936385071125369281074290423059720696982432836475064975714182n :HASHP_FE12

        15461645084952528155n => A
        8733528093617444695n => B
        12153636127833478329n => C
        59532249516130636722900826206920960596027632601225853825589785617299905642023n :HASHP_FE12

        18106304998413187253n => A
        3814119453779003833n => B
        7339314176073733804n => C
        107789874718670612763264602008570773785354978942146213145883699476170595499428n :HASHP_FE12

        11840329191390687957n => A
        5205111179656091231n => B
        14426583239537851457n => C
        115636106203158107719722202917692584615306829270395947122451633528073341890981n :HASHP_FE12

        6106663260254473747n => A
        893586449247495418n => B
        15838802675128639739n => C
        97905247305010330505477545842184368700469872446594994309739033792283250093219n :HASHP_FE12

        862955712319033806n => A
        10409816459664194289n => B
        13245445728610689005n => C
        5746969901745180043101171849363019642361517616303811681580729495353733309530n :HASHP_FE12

        3129488072024166733n => A
        16481161233140243206n => B
        12237861380570794932n => C
        29003659965312285634669099149819793439390552898935047884078269839711268098839n :HASHP_FE12

        7093350386417671937n => A
        3693076140740075997n => B
        14221223565205935490n => C
        5958136778108880517599910792832959156906033536434132022579470337873654241176n :HASHP_FE12

        7011679908955398952n => A
        14624857833368269379n => B
        17017662845033661800n => C
        111636959201546415817013043592006886271685999702221407758872075417542273753456n :HASHP_FE12

        2682376436681433391n => A
        7552152972545485847n => B
        8492109890443883661n => C
        99239207494469909952722300328634654382487493573965561872066538205881081890292n :HASHP_FE12

        17457509138791638753n => A
        12783751435321420105n => B
        6612491131377892329n => C
        53929997610317142073819378547905823072911546812138529352301524998872728006844n :HASHP_FE12

        12909716422603032835n => A
        14906939617995489268n => B
        10135779021704049846n => C
        1364738892172574281218287661355569651298439666850314912625679308070134785699n :HASHP_FE12

        7811326627859943558n => A
        15812289594881097455n => B
        15347073866011479122n => C
        38045366499324985428124563706394024865346613676281247169977544629656255321354n :HASHP_FE12

end:

        $ => A           :MLOAD(initial_A)
        $ => B           :MLOAD(initial_B)
        $ => C           :MLOAD(initial_C)
        $ => D           :MLOAD(initial_D)
        $ => E           :MLOAD(initial_E)
        $ => CTX         :MLOAD(initial_CTX)
        $ => SP          :MLOAD(initial_SP)
        $ => PC          :MLOAD(initial_PC)
        $ => GAS         :MLOAD(initial_GAS)
        $ => SR          :MLOAD(initial_SR)
        $ => RR          :MLOAD(initial_RR)
        $ => HASHPOS     :MLOAD(initial_HASHPOS)
        $ => RCX         :MLOAD(initial_RCX)

; label finalizeExecution needed by executor C++
finalizeExecution:
        ${beforeLast()}  : JMPN(finalizeExecution)

                         : JMP(start)
opINVALID:
; label checkAndSaveFrom needed by executor C++
checkAndSaveFrom:
                         :JMP(opINVALID)