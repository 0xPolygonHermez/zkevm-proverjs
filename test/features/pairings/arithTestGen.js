// grep -A 2000 "CALL.redundantAddCheck" test/features/pairings/arith.zkasm | grep -E "(ARITH_BN25|=>)" | grep -v "MLOAD" | awk '/=> [ABCD]/{printf("\t\t%s: %s,\n", $3, $1);}/:ARITH_BN254_MULFP2/{printf("\t},{\n");}'

let values = [
    {
        A: 2999113016370801447448637477310555551699411366746876888402482806647931650955n,
        B: 15111836776712714633472521107426170732646708720491125290424115686452538044788n,
        C: 1615640209694347989024567018706328391116430477872687075840266591062548700110n,
        D: 1361179629352358267333550734567663993971386151768430307761609245213368478601n,
    },{
        A: 19056371982582167475593876340225319134850470258276413387066558886464698322210n,
        B: 20914269056602289532121456290808074920610800738424321255588157751277776260456n,
        C: 10634756649036098220049242607700175280465139227303175868315978071819374369450n,
        D: 10707315989258942200484412153631767731310293817155149881083576310392120779817n,
    },{
        A: 17439296149470651955399191622773763934734095199211718365410414983381309759864n,
        B: 13373501719163473472841041788504156690548383160832239692705104418225040546854n,
        C: 2866102972456271079967693190994148543367180063637893133241380333416566770443n,
        D: 17507150703593091179260006606111902033252116738425947814013976030826760340088n,
    },{
        A: 10474021739025925932785928731057203470917859260988012564714012471518727308608n,
        B: 6338187455997332132605156933512585760641763976004436657187920430294343752715n,
        C: 6475980579478677576684459816370306528085724315611555389395716648859900516600n,
        D: 6103770441505827039226012739324368008932137504351034680550554911354633643402n,
    },{
        A: 13035654309185072747007684899608188564738180212873843624120098867068659728379n,
        B: 14304510650501135230770200049037997501161624700690638244767896840233539997021n,
        C: 1254522566763643765518141339826574316876596975171694605176987103074390318626n,
        D: 21865911826269625017932701701554322194779621143559233503634932475964203801698n,
    },{
        A: 2461466524536061550339181353212015521462274663804793738545776528032343767724n,
        B: 14279857303122277929122171225581539676447880100806450816662950153862355043067n,
        C: 10677698019904304413362206508628545451239797883902566541820043776169994991238n,
        D: 6027754328827188358079420890098393565885966458283709242833777097841682926427n,
    },{
        A: 138826511351159327237431406645218469792228779423591846788088579129301438600n,
        B: 10089820941352009655622737406538873385399158068321996168314921591561303625427n,
        C: 20645371170960535603921534856721014539288435278222660642135668426679626515931n,
        D: 1576241632396731897618617265168143028312344467934592563257912942622117021847n,
    },{
        A: 19480032858599349237783739348857222898900985826623279208013807997533177831349n,
        B: 21630444695768116512365032858267470528576164245213349347830255620368276117931n,
        C: 16322101046935066186280288176517090342422396611448788940925337347235910062601n,
        D: 8405301844789429109003953345703925291788605787954685727209642739103427451357n,
    },{
        A: 8279176438218218101317736458812046719029759513136611258705774745931768461256n,
        B: 9362486483192325253707795252004845051132306326244875553694069791619655071971n,
        C: 16636602270147592436099839267995412007762493323489851213306204892790148326206n,
        D: 21456551282858136055393172051335867452225170134977771502424168466799226916474n,
    },{
        A: 21013165940349711590804640157754084232415898489763484115487409886935251766813n,
        B: 20398557100608727082768711435464713620372286029308252256259842527014206510587n,
        C: 5135291992952316672867243702373043725268231953202952303295397600268619298758n,
        D: 7711663949017021656757420710572368884621968601161543401056959791369131705451n,
    },{
        A: 7802749448203350996553316612407949749581043505762467160361662239145921287212n,
        B: 11908441232079727165976055981948582184832610178121943911277897277425131617523n,
        C: 7394421574903366328028623190912377055837054768620632411838375654799652347683n,
        D: 5753007918473130019591276545904511214340216123596976813280744367440338448829n,
    },{
        A: 3213816781616397671686965302147637570172145420338600032641393742383178340709n,
        B: 9159369281061838250513815658806397994903387555927392848527881999279829241092n,
        C: 1570614512386131497091694539141510562071466374104867472304697568390544858673n,
        D: 3028329571581865740331102887241480864607028228100264322539606376688159498061n,
    },{
        A: 0n,
        B: 20461646802298906980762583770860915677116535487874170572552628192653608014730n,
        C: 6992781226881595625739967127142000520977098989512983986793047316871483459918n,
        D: 1378664412189966417004884240232329428343584286374831951394319038115267215211n,
    },{
        A: 8185294398670857206588387453006456912211107202444686619085770886559782939833n,
        B: 0n,
        C: 20430345858968609673351474973766446317558778020642244131730714986194551525821n,
        D: 3003141308976916826947433012885630474801049592871161473113707392201592535716n,
    },{
        A: 19161049757122130269379804349801115723326823420863114519014390733160342246998n,
        B: 13615253125279716961815379356918687191433028139889485610239584740287529516760n,
        C: 0n,
        D: 9186799348640615165090642464739742804207214968625748747967213089636966092042n,
    },{
        A: 20530596605376994910007569173016238557447322979422639258302340622059080394453n,
        B: 13817132582425877466415083224775808689552025130277905327859870628768938090276n,
        C: 17997268041396051959441677056635319964274407682764321547780102319863176442806n,
        D: 0n,
    },{
        A: 21888242871839275222246405745257275088696311157297823662689037894645226208582n,
        B: 21888242871839275222246405745257275088696311157297823662689037894645226208582n,
        C: 21888242871839275222246405745257275088696311157297823662689037894645226208582n,
        D: 21888242871839275222246405745257275088696311157297823662689037894645226208582n,
    },{
        A: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn,
        B: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn,
        C: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn,
        D: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn,
    },{
        A: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn,
        B: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn,
        C: 0n,
        D: 0n,
    },{
        A: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn,
        B: 0n,
        C: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn,
        D: 0n,
    },{
        A: 0n,
        B: 0n,
        C: 0n,
        D: 0n,
    },{
        A: 0n,
        B: 0n,
        C: 1n,
        D: 0n,
    }]


const P_BN254 = 21888242871839275222246405745257275088696311157297823662689037894645226208583n;

class ArithEqs {
    ARITH_BN254_ADDFP2(A,B,C,D) {
        return [(A + C) % P_BN254, (B + D) % P_BN254];
    }

    ARITH_BN254_SUBFP2(A,B,C,D) {
        return [(A + (P_BN254 - C)) % P_BN254, (B + (P_BN254 - D)) % P_BN254];
    }

    ARITH_BN254_MULFP2(A,B,C,D) {
        return [(A*C-((B*D) %P_BN254)+P_BN254) % P_BN254, (A*D+B*C) % P_BN254];
    }
}

arithEqs = new ArithEqs();
    // return ctx.FpBN254.sub(ctx.FpBN254.mul(x1,x2), ctx.FpBN254.mul(y1, y2));
    // return ctx.FpBN254.add(ctx.FpBN254.mul(x1,y2), ctx.FpBN254.mul(x2, y1));
for (const eq of ['ARITH_BN254_MULFP2','ARITH_BN254_ADDFP2','ARITH_BN254_SUBFP2']) {
    for (const value of values) {
        const [E, op] = arithEqs[eq].apply(arithEqs, Object.values(value));
        const regs = {...value, E};
        for (const reg in regs) {
            console.log(`\t\t${regs[reg]}n => ${reg}`);
        }
        console.log(`\t\t${op}n :${eq}\n\n\t\t\t\t\t\t:CALL(REDUNDANT_${eq}_CHECK)\n`);
    }
}