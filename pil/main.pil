include "config.pil";
include "global.pil";
include "rom.pil";
include "mem_align.pil";
include "arith.pil";
include "binary.pil";
include "poseidong.pil";
include "padding_pg.pil";
include "storage.pil";
include "padding_kk.pil";
include "mem.pil";
include "padding_sha256.pil";

namespace Main(%N);

///////////
// Definitions
///////////

    /////// State Polynomials
    pol commit A7, A6, A5, A4, A3, A2, A1;
    pol commit A0;

    pol commit B7, B6, B5, B4, B3, B2, B1;
    pol commit B0;

    pol commit C7, C6, C5, C4, C3, C2, C1;
    pol commit C0;

    pol commit D7, D6, D5, D4, D3, D2, D1;
    pol commit D0;

    pol commit E7, E6, E5, E4, E3, E2, E1;
    pol commit E0;

    pol commit SR7, SR6, SR5, SR4, SR3, SR2, SR1, SR0;          // State Root
    pol commit CTX;                    // Call Cntext
    pol commit SP;                     // Stack Pointer
    pol commit PC;                     // EVM Program counter
    pol commit GAS;
    pol commit zkPC;                   // Program Counter of current micro instruction
    pol commit RR;                     // Micro code return address (subroutines)
    pol commit HASHPOS;
    pol commit RCX;

    ///////  Instruction related polynomials
    pol commit CONST7, CONST6, CONST5, CONST4, CONST3, CONST2, CONST1, CONST0;
    pol commit FREE7, FREE6, FREE5, FREE4, FREE3, FREE2, FREE1, FREE0;
    pol commit inA, inB, inC, inROTL_C, inD, inE, inSR, inFREE, inFREE0, inCTX, inSP, inPC, inGAS, inSTEP, inRR, inHASHPOS, inRCX;
    pol commit setA, setB, setC, setD, setE, setSR, setCTX, setSP, setPC, setGAS, setRR, setHASHPOS, setRCX;
    pol commit JMP, JMPN, JMPC, JMPZ, offset;
    pol commit incStack;
    pol commit isStack;
    pol commit isMem;
    pol commit ind, indRR;
    pol commit useCTX;
    pol commit carry;
    pol commit assumeFree, free0IsByte;

    // operations
    pol commit mOp, mWR;
    pol commit sWR, sRD;
    pol commit arith, arithEquation, arithSame12, arithUseCD, arithUseE;
    pol commit memAlignRD, memAlignWR;
    pol commit hashK, hashKLen, hashKDigest;
    pol commit hashP, hashPLen, hashPDigest;
    pol commit hashS, hashSLen, hashSDigest;
    pol commit hashBytesInD, hashBytes, hashOffset;
    pol commit bin;
    pol commit binOpcode;
    pol commit assert;
    pol commit repeat, call, return;

    ///////  Intermediary commit polynomials
    pol commit isNeg;

    /// Counters
    pol commit cntArith, cntBinary, cntMemAlign, cntKeccakF, cntSha256F, cntPoseidonG, cntPaddingPG;
    pol commit inCntArith, inCntBinary, inCntMemAlign, inCntKeccakF, inCntSha256F, inCntPoseidonG, inCntPaddingPG;
    pol commit incCounter;

    pol commit inRID;
    pol commit RID;
    pol commit save;
    pol commit restore;
    pol commit setRID;

    restore  { RID, RID', FREE0, FREE1, FREE2, FREE3, FREE4, FREE5, FREE6, FREE7,
                          B0', B1', B2', B3', B4', B5', B6', B7',
                          C0', C1', C2', C3', C4', C5', C6', C7',
                          D0', D1', D2', D3', D4', D5', D6', D7',
                          E0', E1', E2', E3', E4', E5', E6', E7',
                          RR', RCX'
    } is save { Global.STEP, RID, op0, op1, op2, op3, op4, op5, op6, op7,
                            B0, B1, B2, B3, B4, B5, B6, B7,
                            C0, C1, C2, C3, C4, C5, C6, C7,
                            D0, D1, D2, D3, D4, D5, D6, D7,
                            E0, E1, E2, E3, E4, E5, E6, E7,
                            RR, RCX};

    RID' * (1 - restore) = setRID * (op0 - RID) + save * (Global.STEP - RID) + RID - restore * RID;

    Global.L1 * RID = 0;

///////////
// Intermediary calculations and checks
///////////


    /////// op
    pol commit op0;
    op0 =
        A0 * inA +
        B0 * inB +
        C0 * inC +
        C7 * inROTL_C +
        D0 * inD +
        E0 * inE +
        FREE0 * (inFREE + inFREE0) +
        SR0 * inSR +
        CTX * inCTX +
        SP * inSP +
        PC * inPC +
        GAS * inGAS +
        Global.STEP * inSTEP +
        RR * inRR +
        HASHPOS * inHASHPOS +
        cntArith * inCntArith +
        cntBinary * inCntBinary +
        cntMemAlign * inCntMemAlign +
        cntKeccakF * inCntKeccakF +
        cntSha256F * inCntSha256F +
        cntPoseidonG * inCntPoseidonG +
        cntPaddingPG * inCntPaddingPG +
        RCX * inRCX +
        RID * inRID +
        CONST0;

    pol commit op1;
    op1 =
        A1 * inA +
        B1 * inB +
        C1 * inC +
        C0 * inROTL_C +
        D1 * inD +
        E1 * inE +
        SR1 * inSR +
        FREE1 * inFREE +
        CONST1;

    pol commit op2;
    op2 =
        A2 * inA +
        B2 * inB +
        C2 * inC +
        C1 * inROTL_C +
        D2 * inD +
        E2 * inE +
        SR2 * inSR +
        FREE2 * inFREE +
        CONST2;

    pol commit op3;
    op3 =
        A3 * inA +
        B3 * inB +
        C3 * inC +
        C2 * inROTL_C +
        D3 * inD +
        E3 * inE +
        SR3 * inSR +
        FREE3 * inFREE +
        CONST3;

    pol commit op4;
    op4 =
        A4 * inA +
        B4 * inB +
        C4 * inC +
        C3 * inROTL_C +
        D4 * inD +
        E4 * inE +
        SR4 * inSR +
        FREE4 * inFREE +
        CONST4;

    pol commit op5;
    op5 =
        A5 * inA +
        B5 * inB +
        C5 * inC +
        C4 * inROTL_C +
        D5 * inD +
        E5 * inE +
        SR5 * inSR +
        FREE5 * inFREE +
        CONST5;

    pol commit op6;
    op6 =
        A6 * inA +
        B6 * inB +
        C6 * inC +
        C5 * inROTL_C +
        D6 * inD +
        E6 * inE +
        SR6 * inSR +
        FREE6 * inFREE +
        CONST6;

    pol commit op7;
    op7 =
        A7 * inA +
        B7 * inB +
        C7 * inC +
        C6 * inROTL_C +
        D7 * inD +
        E7 * inE +
        SR7 * inSR +
        FREE7 * inFREE +
        CONST7;

    /////// addr

    /*

        ctxBase = CTX * 0x040000   ctxSize = 256K addresses * 32 bytes (256 bits) = 8MiB

        Memory Region                    Size   isMem  isStack   Content
        ctxBase + [0x000000 - 0x00FFFF]   2MiB      0        0   Context specific variables
        ctxBase + [0x010000 - 0x000000]   2MiB      0        1   EVM Stack
        ctxBase + [0x020000 - 0x03FFFF]   4MiB      1        0   EVM Memory

    */

    pol commit memUseAddrRel;

    pol addrRel = ind*E0 + indRR*RR;
    pol addr =  offset + useCTX*CTX*2**18 + isStack*2**16 + isStack*SP + isMem*2**17+ memUseAddrRel * addrRel;

    /////// isNeg

    pol commit condConst;
    pol commit lJmpnCondValue;
    pol jmpnCondValue = JMPN*(isNeg*2**32 + op0 + condConst);
    isNeg * (1 - isNeg) = 0;

    lJmpnCondValue in Global.STEP;

    pol commit hJmpnCondValueBit[9];

    hJmpnCondValueBit[8] * (1-hJmpnCondValueBit[8]) = 0;
    hJmpnCondValueBit[7] * (1-hJmpnCondValueBit[7]) = 0;
    hJmpnCondValueBit[6] * (1-hJmpnCondValueBit[6]) = 0;
    hJmpnCondValueBit[5] * (1-hJmpnCondValueBit[5]) = 0;
    hJmpnCondValueBit[4] * (1-hJmpnCondValueBit[4]) = 0;
    hJmpnCondValueBit[3] * (1-hJmpnCondValueBit[3]) = 0;
    hJmpnCondValueBit[2] * (1-hJmpnCondValueBit[2]) = 0;
    hJmpnCondValueBit[1] * (1-hJmpnCondValueBit[1]) = 0;
    hJmpnCondValueBit[0] * (1-hJmpnCondValueBit[0]) = 0;

    (1 - free0IsByte) * (2**31*hJmpnCondValueBit[8] + 2**30*hJmpnCondValueBit[7] + 2**29*hJmpnCondValueBit[6] + 
                         2**28*hJmpnCondValueBit[5] + 2**27*hJmpnCondValueBit[4] + 2**26*hJmpnCondValueBit[3] + 
                         2**25*hJmpnCondValueBit[2] + 2**24*hJmpnCondValueBit[1] + 2**23*hJmpnCondValueBit[0] + 
                         lJmpnCondValue - jmpnCondValue) = 0;

    // hJmpnCondValueBit[0..7] here represents the LSBs of the provided free input value
    free0IsByte * (2**7 * hJmpnCondValueBit[7] + 2**6 * hJmpnCondValueBit[6] + 2**5 * hJmpnCondValueBit[5] +
                   2**4 * hJmpnCondValueBit[4] + 2**3 * hJmpnCondValueBit[3] + 2**2 * hJmpnCondValueBit[2] +
                   2**1 * hJmpnCondValueBit[1] + 2**0 * hJmpnCondValueBit[0] - FREE0) = 0;


    /// RCX check zero
    pol commit RCXInv;
    pol RCXIsZero = 1 - RCX*RCXInv;
    RCXIsZero*RCX = 0;

    /// op0 check zero
    pol commit op0Inv;
    pol op0IsZero = 1 - (op0 + condConst) *op0Inv;
    op0IsZero*(op0 + condConst) = 0;

///////////
// Calculate New State
///////////

    A0' = setA * (op0 - A0) + A0;
    A1' = setA * (op1 - A1) + A1;
    A2' = setA * (op2 - A2) + A2;
    A3' = setA * (op3 - A3) + A3;
    A4' = setA * (op4 - A4) + A4;
    A5' = setA * (op5 - A5) + A5;
    A6' = setA * (op6 - A6) + A6;
    A7' = setA * (op7 - A7) + A7;

    B0' * (1 - restore) = setB * (op0 - B0) + B0 - restore * B0;
    B1' * (1 - restore) = setB * (op1 - B1) + B1 - restore * B1;
    B2' * (1 - restore) = setB * (op2 - B2) + B2 - restore * B2;
    B3' * (1 - restore) = setB * (op3 - B3) + B3 - restore * B3;
    B4' * (1 - restore) = setB * (op4 - B4) + B4 - restore * B4;
    B5' * (1 - restore) = setB * (op5 - B5) + B5 - restore * B5;
    B6' * (1 - restore) = setB * (op6 - B6) + B6 - restore * B6;
    B7' * (1 - restore) = setB * (op7 - B7) + B7 - restore * B7;

    C0' * (1 - restore) = setC * (op0 - C0) + C0 - restore * C0;
    C1' * (1 - restore) = setC * (op1 - C1) + C1 - restore * C1;
    C2' * (1 - restore) = setC * (op2 - C2) + C2 - restore * C2;
    C3' * (1 - restore) = setC * (op3 - C3) + C3 - restore * C3;
    C4' * (1 - restore) = setC * (op4 - C4) + C4 - restore * C4;
    C5' * (1 - restore) = setC * (op5 - C5) + C5 - restore * C5;
    C6' * (1 - restore) = setC * (op6 - C6) + C6 - restore * C6;
    C7' * (1 - restore) = setC * (op7 - C7) + C7 - restore * C7;

    D0' * (1 - restore) = setD * (op0 - D0) + D0 - restore * D0;
    D1' * (1 - restore) = setD * (op1 - D1) + D1 - restore * D1;
    D2' * (1 - restore) = setD * (op2 - D2) + D2 - restore * D2;
    D3' * (1 - restore) = setD * (op3 - D3) + D3 - restore * D3;
    D4' * (1 - restore) = setD * (op4 - D4) + D4 - restore * D4;
    D5' * (1 - restore) = setD * (op5 - D5) + D5 - restore * D5;
    D6' * (1 - restore) = setD * (op6 - D6) + D6 - restore * D6;
    D7' * (1 - restore) = setD * (op7 - D7) + D7 - restore * D7;

    E0' * (1 - restore) = setE * (op0 - E0) + E0 - restore * E0;
    E1' * (1 - restore) = setE * (op1 - E1) + E1 - restore * E1;
    E2' * (1 - restore) = setE * (op2 - E2) + E2 - restore * E2;
    E3' * (1 - restore) = setE * (op3 - E3) + E3 - restore * E3;
    E4' * (1 - restore) = setE * (op4 - E4) + E4 - restore * E4;
    E5' * (1 - restore) = setE * (op5 - E5) + E5 - restore * E5;
    E6' * (1 - restore) = setE * (op6 - E6) + E6 - restore * E6;
    E7' * (1 - restore) = setE * (op7 - E7) + E7 - restore * E7;

    SR0' = setSR * (op0 - SR0) + SR0;
    SR1' = setSR * (op1 - SR1) + SR1;
    SR2' = setSR * (op2 - SR2) + SR2;
    SR3' = setSR * (op3 - SR3) + SR3;
    SR4' = setSR * (op4 - SR4) + SR4;
    SR5' = setSR * (op5 - SR5) + SR5;
    SR6' = setSR * (op6 - SR6) + SR6;
    SR7' = setSR * (op7 - SR7) + SR7;

    CTX' = setCTX * (op0 - CTX) + CTX;
    SP' = setSP * (op0 - (SP +incStack)) + (SP +incStack);
    PC' = setPC * (op0 - PC) + PC;

    // ROM constraint: call * setRR = 0
    RR' * (1 - restore) = setRR * (op0 - RR) + call * (zkPC + 1 - RR) + RR - restore * RR;
    GAS' = setGAS * (op0 - GAS) + GAS;

    pol decRCX = repeat * (1-RCXIsZero);
    RCX' * (1 - restore)  = setRCX * (op0 - (RCX-decRCX)) + (RCX-decRCX) - restore * (RCX - decRCX);

    HASHPOS' = setHASHPOS * (op0 - HASHPOS) + HASHPOS + hashBytesInD*D0 + hashBytes;

    pol doJMP = JMPN*isNeg + JMP + JMPC*carry + JMPZ*op0IsZero + return;
    pol elseJMP = JMPN*(1-isNeg) + JMPC*(1-carry) + JMPZ*(1-op0IsZero);

    pol commit jmpAddr;
    pol commit elseAddr;
    pol commit jmpUseAddrRel;
    pol commit elseUseAddrRel;

    // ROM/Zkasm constraint: useJmpAddr * return = 0
    // compiler check return = 1 ==> jmpAddr === 0 && jmpUseAddrRel === 0 && elseAddr === 0 && elseUseAddrRel === 0;
    pol finalJmpAddr = jmpAddr + jmpUseAddrRel * addrRel + return * RR';
    pol nextNoJmpZkPC = zkPC + 1 - ((1-RCXIsZero)*repeat);

    //     pol finalElseAddr = useElseAddr * (elseAddr - nextNoJmpZkPC) + nextNoJmpZkPC;

    // repeat, compatible with ??? elseAddr = next
    pol finalElseAddr = elseAddr + elseUseAddrRel * addrRel;


    // if elseAddr wasn't specified on zkasm, compiler put current address + 1
    zkPC' = doJMP * (finalJmpAddr - nextNoJmpZkPC) + elseJMP * (finalElseAddr - nextNoJmpZkPC) + nextNoJmpZkPC;

    zkPC * Global.L1 = 0;

    (A0-op0)*assert = 0;
    (A1-op1)*assert = 0;
    (A2-op2)*assert = 0;
    (A3-op3)*assert = 0;
    (A4-op4)*assert = 0;
    (A5-op5)*assert = 0;
    (A6-op6)*assert = 0;
    (A7-op7)*assert = 0;

    public oldStateRoot0 = SR0(0);
    public oldStateRoot1 = SR1(0);
    public oldStateRoot2 = SR2(0);
    public oldStateRoot3 = SR3(0);
    public oldStateRoot4 = SR4(0);
    public oldStateRoot5 = SR5(0);
    public oldStateRoot6 = SR6(0);
    public oldStateRoot7 = SR7(0);
    Global.L1 * (SR0 - :oldStateRoot0) = 0;
    Global.L1 * (SR1 - :oldStateRoot1) = 0;
    Global.L1 * (SR2 - :oldStateRoot2) = 0;
    Global.L1 * (SR3 - :oldStateRoot3) = 0;
    Global.L1 * (SR4 - :oldStateRoot4) = 0;
    Global.L1 * (SR5 - :oldStateRoot5) = 0;
    Global.L1 * (SR6 - :oldStateRoot6) = 0;
    Global.L1 * (SR7 - :oldStateRoot7) = 0;

    public oldBatchAccInputHash0 = C0(0);
    public oldBatchAccInputHash1 = C1(0);
    public oldBatchAccInputHash2 = C2(0);
    public oldBatchAccInputHash3 = C3(0);
    public oldBatchAccInputHash4 = C4(0);
    public oldBatchAccInputHash5 = C5(0);
    public oldBatchAccInputHash6 = C6(0);
    public oldBatchAccInputHash7 = C7(0);
    Global.L1 * (C0 - :oldBatchAccInputHash0) = 0;
    Global.L1 * (C1 - :oldBatchAccInputHash1) = 0;
    Global.L1 * (C2 - :oldBatchAccInputHash2) = 0;
    Global.L1 * (C3 - :oldBatchAccInputHash3) = 0;
    Global.L1 * (C4 - :oldBatchAccInputHash4) = 0;
    Global.L1 * (C5 - :oldBatchAccInputHash5) = 0;
    Global.L1 * (C6 - :oldBatchAccInputHash6) = 0;
    Global.L1 * (C7 - :oldBatchAccInputHash7) = 0;

    public previousL1InfoTreeRoot0 = D0(0);
    public previousL1InfoTreeRoot1 = D1(0);
    public previousL1InfoTreeRoot2 = D2(0);
    public previousL1InfoTreeRoot3 = D3(0);
    public previousL1InfoTreeRoot4 = D4(0);
    public previousL1InfoTreeRoot5 = D5(0);
    public previousL1InfoTreeRoot6 = D6(0);
    public previousL1InfoTreeRoot7 = D7(0);
    Global.L1 * (D0 - :previousL1InfoTreeRoot0) = 0;
    Global.L1 * (D1 - :previousL1InfoTreeRoot1) = 0;
    Global.L1 * (D2 - :previousL1InfoTreeRoot2) = 0;
    Global.L1 * (D3 - :previousL1InfoTreeRoot3) = 0;
    Global.L1 * (D4 - :previousL1InfoTreeRoot4) = 0;
    Global.L1 * (D5 - :previousL1InfoTreeRoot5) = 0;
    Global.L1 * (D6 - :previousL1InfoTreeRoot6) = 0;
    Global.L1 * (D7 - :previousL1InfoTreeRoot7) = 0;

    public previousL1InfoTreeIndex = RCX(0);
    Global.L1 * (RCX - :previousL1InfoTreeIndex) = 0;

    public chainId = GAS(0);
    Global.L1 * (GAS - :chainId) = 0;

    public forkId = CTX(0);
    Global.L1 * (CTX - :forkId) = 0;

    public newStateRoot0 = SR0(%N-1);
    public newStateRoot1 = SR1(%N-1);
    public newStateRoot2 = SR2(%N-1);
    public newStateRoot3 = SR3(%N-1);
    public newStateRoot4 = SR4(%N-1);
    public newStateRoot5 = SR5(%N-1);
    public newStateRoot6 = SR6(%N-1);
    public newStateRoot7 = SR7(%N-1);
    Global.LLAST * (SR0 - :newStateRoot0) = 0;
    Global.LLAST * (SR1 - :newStateRoot1) = 0;
    Global.LLAST * (SR2 - :newStateRoot2) = 0;
    Global.LLAST * (SR3 - :newStateRoot3) = 0;
    Global.LLAST * (SR4 - :newStateRoot4) = 0;
    Global.LLAST * (SR5 - :newStateRoot5) = 0;
    Global.LLAST * (SR6 - :newStateRoot6) = 0;
    Global.LLAST * (SR7 - :newStateRoot7) = 0;

    public newBatchAccInputHash0 = C0(%N -1);
    public newBatchAccInputHash1 = C1(%N -1);
    public newBatchAccInputHash2 = C2(%N -1);
    public newBatchAccInputHash3 = C3(%N -1);
    public newBatchAccInputHash4 = C4(%N -1);
    public newBatchAccInputHash5 = C5(%N -1);
    public newBatchAccInputHash6 = C6(%N -1);
    public newBatchAccInputHash7 = C7(%N -1);
    Global.LLAST * (C0 - :newBatchAccInputHash0) = 0;
    Global.LLAST * (C1 - :newBatchAccInputHash1) = 0;
    Global.LLAST * (C2 - :newBatchAccInputHash2) = 0;
    Global.LLAST * (C3 - :newBatchAccInputHash3) = 0;
    Global.LLAST * (C4 - :newBatchAccInputHash4) = 0;
    Global.LLAST * (C5 - :newBatchAccInputHash5) = 0;
    Global.LLAST * (C6 - :newBatchAccInputHash6) = 0;
    Global.LLAST * (C7 - :newBatchAccInputHash7) = 0;

    public currentL1InfoTreeRoot0 = D0(%N-1);
    public currentL1InfoTreeRoot1 = D1(%N-1);
    public currentL1InfoTreeRoot2 = D2(%N-1);
    public currentL1InfoTreeRoot3 = D3(%N-1);
    public currentL1InfoTreeRoot4 = D4(%N-1);
    public currentL1InfoTreeRoot5 = D5(%N-1);
    public currentL1InfoTreeRoot6 = D6(%N-1);
    public currentL1InfoTreeRoot7 = D7(%N-1);
    Global.LLAST * (D0 - :currentL1InfoTreeRoot0) = 0;
    Global.LLAST * (D1 - :currentL1InfoTreeRoot1) = 0;
    Global.LLAST * (D2 - :currentL1InfoTreeRoot2) = 0;
    Global.LLAST * (D3 - :currentL1InfoTreeRoot3) = 0;
    Global.LLAST * (D4 - :currentL1InfoTreeRoot4) = 0;
    Global.LLAST * (D5 - :currentL1InfoTreeRoot5) = 0;
    Global.LLAST * (D6 - :currentL1InfoTreeRoot6) = 0;
    Global.LLAST * (D7 - :currentL1InfoTreeRoot7) = 0;

    public currentL1InfoTreeIndex = RCX(%N-1);
    Global.LLAST * (RCX - :currentL1InfoTreeIndex) = 0;

    public newLocalExitRoot0 = E0(%N-1);
    public newLocalExitRoot1 = E1(%N-1);
    public newLocalExitRoot2 = E2(%N-1);
    public newLocalExitRoot3 = E3(%N-1);
    public newLocalExitRoot4 = E4(%N-1);
    public newLocalExitRoot5 = E5(%N-1);
    public newLocalExitRoot6 = E6(%N-1);
    public newLocalExitRoot7 = E7(%N-1);
    Global.LLAST * (E0 - :newLocalExitRoot0) = 0;
    Global.LLAST * (E1 - :newLocalExitRoot1) = 0;
    Global.LLAST * (E2 - :newLocalExitRoot2) = 0;
    Global.LLAST * (E3 - :newLocalExitRoot3) = 0;
    Global.LLAST * (E4 - :newLocalExitRoot4) = 0;
    Global.LLAST * (E5 - :newLocalExitRoot5) = 0;
    Global.LLAST * (E6 - :newLocalExitRoot6) = 0;
    Global.LLAST * (E7 - :newLocalExitRoot7) = 0;

    public newLastTimestamp = RR(%N-1);
    Global.LLAST * (RR - :newLastTimestamp) = 0;

    // Check that the calculated hash is well formed
    sWR + hashPDigest {
        op0, op1, op2, op3, op4, op5, op6, op7,
        %GL_L, %GL_H, %GL_L, %GL_H, %GL_L, %GL_H, %GL_L, %GL_H,
        8, 1
    } is
    Binary.resultValidRange {
        Binary.a[0], Binary.a[1], Binary.a[2], Binary.a[3], Binary.a[4], Binary.a[5], Binary.a[6], Binary.a[7],
        Binary.b[0], Binary.b[1], Binary.b[2], Binary.b[3], Binary.b[4], Binary.b[5], Binary.b[6], Binary.b[7],
        Binary.lOpcode, Binary.lCout
    };

/////////
// ROM Lookups
/////////


    /*
       code generated with:
       node tools/pil_pol_table/bits_compose.js "arith,arithSame12,arithUseCD,arithUseE,assert,bin,hashK,hashKDigest,hashKLen,hashP,hashPDigest,hashPLen,isMem,isStack,JMP,JMPC,JMPN,memAlignRD,memAlignWR,mOp,mWR,repeat,setA,setB,setC,setCTX,setD,setE,setGAS,setHASHPOS,setPC,setRCX,setRR,setSP,setSR,sRD,sWR,useCTX,JMPZ,call,return,save,restore,setRID,hashBytesInD,assumeFree,memUseAddrRel,jmpUseAddrRel,elseUseAddrRel,free0IsByte,hashS,hashSDigest,hashSLen" -b
    */

    pol operations =
              2**0  * arith            + 2**1  * arithSame12      + 2**2  * arithUseCD       + 2**3  * arithUseE
            + 2**4  * assert           + 2**5  * bin              + 2**6  * hashK            + 2**7  * hashKDigest
            + 2**8  * hashKLen         + 2**9  * hashP            + 2**10 * hashPDigest      + 2**11 * hashPLen
            + 2**12 * isMem            + 2**13 * isStack          + 2**14 * JMP              + 2**15 * JMPC
            + 2**16 * JMPN             + 2**17 * memAlignRD       + 2**18 * memAlignWR       + 2**19 * mOp
            + 2**20 * mWR              + 2**21 * repeat           + 2**22 * setA             + 2**23 * setB
            + 2**24 * setC             + 2**25 * setCTX           + 2**26 * setD             + 2**27 * setE
            + 2**28 * setGAS           + 2**29 * setHASHPOS       + 2**30 * setPC            + 2**31 * setRCX
            + 2**32 * setRR            + 2**33 * setSP            + 2**34 * setSR            + 2**35 * sRD
            + 2**36 * sWR              + 2**37 * useCTX           + 2**38 * JMPZ             + 2**39 * call
            + 2**40 * return           + 2**41 * save             + 2**42 * restore          + 2**43 * setRID
            + 2**44 * hashBytesInD     + 2**45 * assumeFree       + 2**46 * memUseAddrRel    + 2**47 * jmpUseAddrRel
            + 2**48 * elseUseAddrRel   + 2**49 * free0IsByte      + 2**50 * hashS            + 2**51 * hashSDigest
            + 2**52 * hashSLen;

    (1 - arith) * arith = 0;
    (1 - arithSame12) * arithSame12 = 0;
    (1 - arithUseCD) * arithUseCD = 0;
    (1 - arithUseE) * arithUseE = 0;
    (1 - assert) * assert = 0;
    (1 - bin) * bin = 0;
    (1 - hashK) * hashK = 0;
    (1 - hashKDigest) * hashKDigest = 0;
    (1 - hashKLen) * hashKLen = 0;
    (1 - hashP) * hashP = 0;
    (1 - hashPDigest) * hashPDigest = 0;
    (1 - hashPLen) * hashPLen = 0;
    (1 - isMem) * isMem = 0;
    (1 - isStack) * isStack = 0;
    (1 - JMP) * JMP = 0;
    (1 - JMPC) * JMPC = 0;
    (1 - JMPN) * JMPN = 0;
    (1 - memAlignRD) * memAlignRD = 0;
    (1 - memAlignWR) * memAlignWR = 0;
    (1 - mOp) * mOp = 0;
    (1 - mWR) * mWR = 0;
    (1 - repeat) * repeat = 0;
    (1 - setA) * setA = 0;
    (1 - setB) * setB = 0;
    (1 - setC) * setC = 0;
    (1 - setCTX) * setCTX = 0;
    (1 - setD) * setD = 0;
    (1 - setE) * setE = 0;
    (1 - setGAS) * setGAS = 0;
    (1 - setHASHPOS) * setHASHPOS = 0;
    (1 - setPC) * setPC = 0;
    (1 - setRCX) * setRCX = 0;
    (1 - setRR) * setRR = 0;
    (1 - setSP) * setSP = 0;
    (1 - setSR) * setSR = 0;
    (1 - sRD) * sRD = 0;
    (1 - sWR) * sWR = 0;
    (1 - useCTX) * useCTX = 0;
    (1 - JMPZ) * JMPZ = 0;
    (1 - call) * call = 0;
    (1 - return) * return = 0;
    (1 - save) * save = 0;
    (1 - restore) * restore = 0;
    (1 - setRID) * setRID = 0;
    (1 - hashBytesInD) * hashBytesInD = 0;
    (1 - assumeFree) * assumeFree = 0;
    (1 - memUseAddrRel) * memUseAddrRel = 0;
    (1 - jmpUseAddrRel) * jmpUseAddrRel = 0;
    (1 - elseUseAddrRel) * elseUseAddrRel = 0;
    (1 - free0IsByte) * free0IsByte = 0;
    (1 - hashS) * hashS = 0;
    (1 - hashSDigest) * hashSDigest = 0;
    (1 - hashSLen) * hashSLen = 0;

    {
        CONST0, CONST1, CONST2, CONST3, CONST4, CONST5, CONST6, CONST7, condConst,
        inA, inB, inC, inROTL_C, inD, inE, inSR, inFREE, inFREE0, ind, indRR, arithEquation,
        inCTX, inSP, inPC, inGAS, inHASHPOS, inSTEP, inRR, inRCX, inRID, hashBytes, hashOffset,
        inCntArith, inCntBinary, inCntKeccakF, inCntSha256F, inCntMemAlign, inCntPaddingPG, inCntPoseidonG,
        operations, offset, incStack, binOpcode, jmpAddr, elseAddr, zkPC
    } in {
        Rom.CONST0, Rom.CONST1, Rom.CONST2, Rom.CONST3, Rom.CONST4, Rom.CONST5, Rom.CONST6, Rom.CONST7, Rom.condConst,
        Rom.inA, Rom.inB, Rom.inC, Rom.inROTL_C, Rom.inD, Rom.inE, Rom.inSR, Rom.inFREE, Rom.inFREE0, Rom.ind, Rom.indRR, Rom.arithEquation,
        Rom.inCTX, Rom.inSP, Rom.inPC, Rom.inGAS, Rom.inHASHPOS, Rom.inSTEP, Rom.inRR, Rom.inRCX, Rom.inRID, Rom.hashBytes, Rom.hashOffset,
        Rom.inCntArith, Rom.inCntBinary, Rom.inCntKeccakF, Rom.inCntSha256F, Rom.inCntMemAlign, Rom.inCntPaddingPG, Rom.inCntPoseidonG,
        Rom.operations, Rom.offset, Rom.incStack, Rom.binOpcode, Rom.jmpAddr, Rom.elseAddr, Rom.line
    };

    pol commit sKeyI[4];
    pol commit sKey[4];

/////////
// Arithmetic Lookups
/////////

    pol ax1_0 = Arith.x1[0]  + Arith.x1[1]  * arithBase;
    pol ax1_1 = Arith.x1[2]  + Arith.x1[3]  * arithBase;
    pol ax1_2 = Arith.x1[4]  + Arith.x1[5]  * arithBase;
    pol ax1_3 = Arith.x1[6]  + Arith.x1[7]  * arithBase;
    pol ax1_4 = Arith.x1[8]  + Arith.x1[9]  * arithBase;
    pol ax1_5 = Arith.x1[10] + Arith.x1[11] * arithBase;
    pol ax1_6 = Arith.x1[12] + Arith.x1[13] * arithBase;
    pol ax1_7 = Arith.x1[14] + Arith.x1[15] * arithBase;

    pol ay1_0 = Arith.y1[0]  + Arith.y1[1]  * arithBase;
    pol ay1_1 = Arith.y1[2]  + Arith.y1[3]  * arithBase;
    pol ay1_2 = Arith.y1[4]  + Arith.y1[5]  * arithBase;
    pol ay1_3 = Arith.y1[6]  + Arith.y1[7]  * arithBase;
    pol ay1_4 = Arith.y1[8]  + Arith.y1[9]  * arithBase;
    pol ay1_5 = Arith.y1[10] + Arith.y1[11] * arithBase;
    pol ay1_6 = Arith.y1[12] + Arith.y1[13] * arithBase;
    pol ay1_7 = Arith.y1[14] + Arith.y1[15] * arithBase;

    pol ax2_0 = Arith.x2[0]  + Arith.x2[1]  * arithBase;
    pol ax2_1 = Arith.x2[2]  + Arith.x2[3]  * arithBase;
    pol ax2_2 = Arith.x2[4]  + Arith.x2[5]  * arithBase;
    pol ax2_3 = Arith.x2[6]  + Arith.x2[7]  * arithBase;
    pol ax2_4 = Arith.x2[8]  + Arith.x2[9]  * arithBase;
    pol ax2_5 = Arith.x2[10] + Arith.x2[11] * arithBase;
    pol ax2_6 = Arith.x2[12] + Arith.x2[13] * arithBase;
    pol ax2_7 = Arith.x2[14] + Arith.x2[15] * arithBase;

    pol ay2_0 = Arith.y2[0]  + Arith.y2[1]  * arithBase;
    pol ay2_1 = Arith.y2[2]  + Arith.y2[3]  * arithBase;
    pol ay2_2 = Arith.y2[4]  + Arith.y2[5]  * arithBase;
    pol ay2_3 = Arith.y2[6]  + Arith.y2[7]  * arithBase;
    pol ay2_4 = Arith.y2[8]  + Arith.y2[9]  * arithBase;
    pol ay2_5 = Arith.y2[10] + Arith.y2[11] * arithBase;
    pol ay2_6 = Arith.y2[12] + Arith.y2[13] * arithBase;
    pol ay2_7 = Arith.y2[14] + Arith.y2[15] * arithBase;

    pol arithEq_12345 = Arith.selEq[1] + Arith.selEq[2] + Arith.selEq[3] + Arith.selEq[4] + Arith.selEq[5];
    pol arithEq_no_067 = 1 - Arith.selEq[0] - Arith.selEq[6] - Arith.selEq[7];
    pol arithEq_89A = Arith.selEq[8] + Arith.selEq[9] + Arith.selEq[10];
    pol arithEq_789A = Arith.selEq[7] + arithEq_89A;
    pol arithBase = 2**16 + arithEq_789A * (2**24 - 2**16);

    pol ax3_0 = arithEq_no_067 * Arith.x3[0]  + arithEq_12345 * Arith.x3[1]  * 2**16 + arithEq_89A * Arith.x3[1]  * 2**24;
    pol ax3_1 = arithEq_no_067 * Arith.x3[2]  + arithEq_12345 * Arith.x3[3]  * 2**16 + arithEq_89A * Arith.x3[3]  * 2**24;
    pol ax3_2 = arithEq_no_067 * Arith.x3[4]  + arithEq_12345 * Arith.x3[5]  * 2**16 + arithEq_89A * Arith.x3[5]  * 2**24;
    pol ax3_3 = arithEq_no_067 * Arith.x3[6]  + arithEq_12345 * Arith.x3[7]  * 2**16 + arithEq_89A * Arith.x3[7]  * 2**24;
    pol ax3_4 = arithEq_no_067 * Arith.x3[8]  + arithEq_12345 * Arith.x3[9]  * 2**16 + arithEq_89A * Arith.x3[9]  * 2**24;
    pol ax3_5 = arithEq_no_067 * Arith.x3[10] + arithEq_12345 * Arith.x3[11] * 2**16 + arithEq_89A * Arith.x3[11] * 2**24;
    pol ax3_6 = arithEq_no_067 * Arith.x3[12] + arithEq_12345 * Arith.x3[13] * 2**16 + arithEq_89A * Arith.x3[13] * 2**24;
    pol ax3_7 = arithEq_no_067 * Arith.x3[14] + arithEq_12345 * Arith.x3[15] * 2**16 + arithEq_89A * Arith.x3[15] * 2**24;

    pol ay3_0 = Arith.y3[0]  + Arith.y3[1]  * arithBase;
    pol ay3_1 = Arith.y3[2]  + Arith.y3[3]  * arithBase;
    pol ay3_2 = Arith.y3[4]  + Arith.y3[5]  * arithBase;
    pol ay3_3 = Arith.y3[6]  + Arith.y3[7]  * arithBase;
    pol ay3_4 = Arith.y3[8]  + Arith.y3[9]  * arithBase;
    pol ay3_5 = Arith.y3[10] + Arith.y3[11] * arithBase;
    pol ay3_6 = Arith.y3[12] + Arith.y3[13] * arithBase;
    pol ay3_7 = Arith.y3[14] + Arith.y3[15] * arithBase;

    // List of arithmetic equations:                           Conversion Table:
    //      EQ0:  x1·y1 + x2 = y2·2²⁵⁶ + y3                        A <--> x1
    //      EQ1:  s·(x2 - x1) = (y2 - y1) - q0 · p1                B <--> y1
    //      EQ2:  2s·y1 = 3x1² - q0·p1                             C <--> x2
    //      EQ3:  s² - x1 - x2 = x3 - q1·p1                        D <--> y2
    //      EQ4:  s·(x1 - x3) - y1 = y3 - q2·p1                    E <--> x3
    //      EQ5:  x1·x2 - y1·y2 = x3 - q1·p2                      op <--> y3
    //      EQ6:  y1·x2 + x1·y2 = y3 - q2·p2
    //      EQ7:  x1 + x2 = x3 - q1·p2
    //      EQ8:  y1 + y2 = y3 - q2·p2
    //      EQ9:  x1 - x2 = x3 - q1·p2
    //      EQ10: y1 - y2 = y3 - q2·p2
    //      EQ11: x1·y1 + x2 = y3 + (q1·2²⁵⁶ + q0)·y2
    
    arith {
        arithEquation,
        A0, A1, A2, A3, A4, A5, A6, A7,
        B0, B1, B2, B3, B4, B5, B6, B7,
        arithSame12 * A0 + arithUseCD * C0, // This should be A iff EQ2 (point doubling)
        arithSame12 * A1 + arithUseCD * C1,
        arithSame12 * A2 + arithUseCD * C2,
        arithSame12 * A3 + arithUseCD * C3,
        arithSame12 * A4 + arithUseCD * C4,
        arithSame12 * A5 + arithUseCD * C5,
        arithSame12 * A6 + arithUseCD * C6,
        arithSame12 * A7 + arithUseCD * C7,
        arithSame12 * B0 + arithUseCD * D0, // This should be B iff EQ2 (point doubling)
        arithSame12 * B1 + arithUseCD * D1,
        arithSame12 * B2 + arithUseCD * D2,
        arithSame12 * B3 + arithUseCD * D3,
        arithSame12 * B4 + arithUseCD * D4,
        arithSame12 * B5 + arithUseCD * D5,
        arithSame12 * B6 + arithUseCD * D6,
        arithSame12 * B7 + arithUseCD * D7,
        arithUseE * E0, // This must be deactivated in EQ0 and EQ11 (standard and modular arith)
        arithUseE * E1,
        arithUseE * E2,
        arithUseE * E3,
        arithUseE * E4,
        arithUseE * E5,
        arithUseE * E6,
        arithUseE * E7,
        op0, op1, op2, op3, op4, op5, op6, op7 } is
    Arith.resultEq {
        Arith.selEq[0] + 2 * Arith.selEq[1] + 3 * Arith.selEq[2] + 4 * Arith.selEq[3] + 5 * Arith.selEq[4] 
                       + 6 * Arith.selEq[5] + 7 * Arith.selEq[6] + 8 * Arith.selEq[7] + 9 * Arith.selEq[8] 
                       + 10 * Arith.selEq[9] + 11 * Arith.selEq[10] + 12 * Arith.selEq[11],
        ax1_0, ax1_1, ax1_2, ax1_3, ax1_4, ax1_5, ax1_6, ax1_7,
        ay1_0, ay1_1, ay1_2, ay1_3, ay1_4, ay1_5, ay1_6, ay1_7,
        ax2_0, ax2_1, ax2_2, ax2_3, ax2_4, ax2_5, ax2_6, ax2_7,
        ay2_0, ay2_1, ay2_2, ay2_3, ay2_4, ay2_5, ay2_6, ay2_7,
        ax3_0, ax3_1, ax3_2, ax3_3, ax3_4, ax3_5, ax3_6, ax3_7, 
        ay3_0, ay3_1, ay3_2, ay3_3, ay3_4, ay3_5, ay3_6, ay3_7
    };

    cntArith' = cntArith*(1-Global.L1) + arith;

/////////
// Binary Lookups
/////////

    bin {
        binOpcode,
        A0, A1, A2, A3, A4, A5, A6, A7,
        B0, B1, B2, B3, B4, B5, B6, B7,
        op0, op1, op2, op3, op4, op5, op6, op7,
        carry
    } is
    Binary.resultBinOp {
        Binary.lOpcode,
        Binary.a[0], Binary.a[1], Binary.a[2], Binary.a[3], Binary.a[4], Binary.a[5], Binary.a[6], Binary.a[7],
        Binary.b[0], Binary.b[1], Binary.b[2], Binary.b[3], Binary.b[4], Binary.b[5], Binary.b[6], Binary.b[7],
        Binary.c[0], Binary.c[1], Binary.c[2], Binary.c[3], Binary.c[4], Binary.c[5], Binary.c[6], Binary.c[7],
        Binary.lCout
    };

    cntBinary' = cntBinary*(1-Global.L1) + bin + sWR + hashPDigest;

/////////
// HASHK Lookups
/////////
    hashK {
        hashOffset + E0,
        HASHPOS,
        hashBytesInD * (D0 - hashBytes) + hashBytes,
        assumeFree * (FREE0 - op0) + op0, assumeFree * (FREE1 - op1) + op1, assumeFree * (FREE2 - op2) + op2, assumeFree * (FREE3 - op3) + op3,
        assumeFree * (FREE4 - op4) + op4, assumeFree * (FREE5 - op5) + op5, assumeFree * (FREE6 - op6) + op6, assumeFree * (FREE7 - op7) + op7
    } in
    PaddingKK.crLatch * PaddingKK.r8valid {
        PaddingKK.addr,
        PaddingKK.len - PaddingKK.rem - PaddingKK.crLen + 1,
        PaddingKK.crLen,
        PaddingKK.crV0C, PaddingKK.crV1C, PaddingKK.crV2C, PaddingKK.crV3C,
        PaddingKK.crV4C, PaddingKK.crV5C, PaddingKK.crV6C, PaddingKK.crV7C
    };

    hashKLen {
        hashOffset + E0,
        op0
    } is
    PaddingKK.lastHashLen {
        PaddingKK.addr,
        PaddingKK.len
    };

    hashKDigest {
        hashOffset + E0,
        op0, op1, op2, op3,
        op4, op5, op6, op7,
        incCounter
    } is
    PaddingKK.lastHashDigest {
        PaddingKK.addr,
        PaddingKK.hash0, PaddingKK.hash1, PaddingKK.hash2, PaddingKK.hash3,
        PaddingKK.hash4, PaddingKK.hash5, PaddingKK.hash6, PaddingKK.hash7,
        PaddingKK.incCounter
    };

    cntKeccakF' = cntKeccakF*(1-Global.L1) + incCounter*hashKDigest;

/////////
// HASHS Lookups (Sha256)
/////////

    hashS {
        hashOffset + E0,
        HASHPOS,
        hashBytesInD * (D0 - hashBytes) + hashBytes,
        assumeFree * (FREE0 - op0) + op0, assumeFree * (FREE1 - op1) + op1, assumeFree * (FREE2 - op2) + op2, assumeFree * (FREE3 - op3) + op3,
        assumeFree * (FREE4 - op4) + op4, assumeFree * (FREE5 - op5) + op5, assumeFree * (FREE6 - op6) + op6, assumeFree * (FREE7 - op7) + op7
    } in
    PaddingSha256.crLatch * PaddingSha256.r8valid {
        PaddingSha256.addr,
        PaddingSha256.len - PaddingSha256.rem - PaddingSha256.crLen + 1,
        PaddingSha256.crLen,
        PaddingSha256.crV0C, PaddingSha256.crV1C, PaddingSha256.crV2C, PaddingSha256.crV3C,
        PaddingSha256.crV4C, PaddingSha256.crV5C, PaddingSha256.crV6C, PaddingSha256.crV7C
    };

    hashSLen {
        hashOffset + E0,
        op0
    } is
    PaddingSha256.lastHashLen {
        PaddingSha256.addr,
        PaddingSha256.len
    };

    // The Sha digest's chunks are ordered from most to least significant.
    // (hash0 => op7, hash1 => op6, ..)
    hashSDigest {
        hashOffset + E0,
        op0, op1, op2, op3,
        op4, op5, op6, op7,
        incCounter
    } is
    PaddingSha256.lastHashDigest {
        PaddingSha256.addr,
        PaddingSha256.hash7, PaddingSha256.hash6, PaddingSha256.hash5, PaddingSha256.hash4,
        PaddingSha256.hash3, PaddingSha256.hash2, PaddingSha256.hash1, PaddingSha256.hash0,
        PaddingSha256.incCounter
    };

    cntSha256F' = cntSha256F*(1-Global.L1) + incCounter*hashSDigest;

/////////
// HASHP Lookups
/////////
    hashP {
        hashOffset + E0,
        HASHPOS,
        hashBytesInD * (D0 - hashBytes) + hashBytes,
        assumeFree * (FREE0 - op0) + op0, assumeFree * (FREE1 - op1) + op1, assumeFree * (FREE2 - op2) + op2, assumeFree * (FREE3 - op3) + op3,
        assumeFree * (FREE4 - op4) + op4, assumeFree * (FREE5 - op5) + op5, assumeFree * (FREE6 - op6) + op6, assumeFree * (FREE7 - op7) + op7
    } in
    PaddingPG.crLatch * PaddingPG.crValid {
        PaddingPG.addr,
        PaddingPG.len - PaddingPG.rem - PaddingPG.crLen + 1,
        PaddingPG.crLen,
        PaddingPG.crV0C, PaddingPG.crV1C, PaddingPG.crV2C, PaddingPG.crV3C,
        PaddingPG.crV4C, PaddingPG.crV5C, PaddingPG.crV6C, PaddingPG.crV7C
    };

    hashPLen {
        hashOffset + E0,
        op0
    } is
    PaddingPG.lastHashLen {
        PaddingPG.addr,
        PaddingPG.len
    };

    hashPDigest {
        hashOffset + E0,
        op0 + 2**32 * op1,
        op2 + 2**32 * op3,
        op4 + 2**32 * op5,
        op6 + 2**32 * op7,
        incCounter
    } is
    PaddingPG.lastHashDigest {
        PaddingPG.addr,
        PaddingPG.curHash0,
        PaddingPG.curHash1,
        PaddingPG.curHash2,
        PaddingPG.curHash3,
        PaddingPG.incCounter
    };

    cntPaddingPG' = cntPaddingPG*(1-Global.L1) + hashPDigest*incCounter;
    cntPoseidonG' = cntPoseidonG*(1-Global.L1) + (hashPDigest + sRD + sWR) * incCounter;

/////////
// Mem Lookups
/////////
    mOp {
        addr,
        Global.STEP,
        mWR,
        assumeFree * (FREE0 - op0) + op0, assumeFree * (FREE1 - op1) + op1, assumeFree * (FREE2 - op2) + op2, assumeFree * (FREE3 - op3) + op3,
        assumeFree * (FREE4 - op4) + op4, assumeFree * (FREE5 - op5) + op5, assumeFree * (FREE6 - op6) + op6, assumeFree * (FREE7 - op7) + op7
    } is
    Mem.mOp {
        Mem.addr,
        Mem.step,
        Mem.mWr,
        Mem.val[0], Mem.val[1], Mem.val[2], Mem.val[3],
        Mem.val[4], Mem.val[5], Mem.val[6], Mem.val[7]
    };


/////////
// Storage Lookups
/////////

    (sRD + sWR) {
        1, 0, 0, // Poseidon Result ID
        C0, C1, C2, C3, C4, C5, C6, C7,
        0, 0, 0, 0,
        sKeyI[0], sKeyI[1], sKeyI[2], sKeyI[3]
    } is
    PoseidonG.result1 {
        PoseidonG.result1, PoseidonG.result2, PoseidonG.result3,
        PoseidonG.in0,
        PoseidonG.in1,
        PoseidonG.in2,
        PoseidonG.in3,
        PoseidonG.in4,
        PoseidonG.in5,
        PoseidonG.in6,
        PoseidonG.in7,
        PoseidonG.hashType,
        PoseidonG.cap1,
        PoseidonG.cap2,
        PoseidonG.cap3,
        PoseidonG.hash0,
        PoseidonG.hash1,
        PoseidonG.hash2,
        PoseidonG.hash3
    };

    (sRD + sWR) {
        0, 1, 0,
        A0, A1, A2, A3, A4, 0, B0, B1,
        sKeyI[0], sKeyI[1], sKeyI[2], sKeyI[3],
        sKey[0], sKey[1], sKey[2], sKey[3],
        A5, A6, A7, B2, B3, B4, B5, B6, B7 } is
    PoseidonG.result2 {
        PoseidonG.result1, PoseidonG.result2, PoseidonG.result3,
        PoseidonG.in0,
        PoseidonG.in1,
        PoseidonG.in2,
        PoseidonG.in3,
        PoseidonG.in4,
        PoseidonG.in5,
        PoseidonG.in6,
        PoseidonG.in7,
        PoseidonG.hashType,
        PoseidonG.cap1,
        PoseidonG.cap2,
        PoseidonG.cap3,
        PoseidonG.hash0,
        PoseidonG.hash1,
        PoseidonG.hash2,
        PoseidonG.hash3,
        0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    sRD {
        SR0 + 2**32*SR1, SR2 + 2**32*SR3, SR4 + 2**32*SR5, SR6 + 2**32*SR7,
        sKey[0], sKey[1], sKey[2], sKey[3],
        op0, op1, op2, op3,
        op4, op5, op6, op7,
        incCounter
    } is
    Storage.latchGet {
        Storage.oldRoot0, Storage.oldRoot1, Storage.oldRoot2, Storage.oldRoot3,
        Storage.rkey0, Storage.rkey1, Storage.rkey2, Storage.rkey3,
        Storage.valueLow0, Storage.valueLow1, Storage.valueLow2, Storage.valueLow3,
        Storage.valueHigh0, Storage.valueHigh1, Storage.valueHigh2, Storage.valueHigh3,
        Storage.incCounter + 2
    };


    sWR {
        SR0 + 2**32*SR1, SR2 + 2**32*SR3, SR4 + 2**32*SR5, SR6 + 2**32*SR7,
        sKey[0], sKey[1], sKey[2], sKey[3],
        D0, D1, D2, D3,
        D4, D5, D6, D7,
        op0 + 2**32*op1, op2 + 2**32*op3, op4 + 2**32*op5, op6 + 2**32*op7,
        incCounter
    } is
    Storage.latchSet {
        Storage.oldRoot0, Storage.oldRoot1, Storage.oldRoot2, Storage.oldRoot3,
        Storage.rkey0, Storage.rkey1, Storage.rkey2, Storage.rkey3,
        Storage.valueLow0, Storage.valueLow1, Storage.valueLow2, Storage.valueLow3,
        Storage.valueHigh0, Storage.valueHigh1, Storage.valueHigh2, Storage.valueHigh3,
        Storage.newRoot0, Storage.newRoot1, Storage.newRoot2, Storage.newRoot3,
        Storage.incCounter + 2
    };


/////////
// MemAlign
/////////

    memAlignRD + memAlignWR {
        memAlignWR,
        A0, A1, A2, A3,
        A4, A5, A6, A7,
        B0, B1, B2, B3,
        B4, B5, B6, B7,
        op0, op1, op2, op3,
        op4, op5, op6, op7,
        C0,
        memAlignWR * D0, memAlignWR * D1, memAlignWR * D2, memAlignWR * D3,
        memAlignWR * D4, memAlignWR * D5, memAlignWR * D6, memAlignWR * D7,
        memAlignWR * E0, memAlignWR * E1, memAlignWR * E2, memAlignWR * E3,
        memAlignWR * E4, memAlignWR * E5, memAlignWR * E6, memAlignWR * E7
    } is
    MemAlign.result {
        MemAlign.wr,
        MemAlign.m0[0], MemAlign.m0[1], MemAlign.m0[2], MemAlign.m0[3],
        MemAlign.m0[4], MemAlign.m0[5], MemAlign.m0[6], MemAlign.m0[7],
        MemAlign.m1[0], MemAlign.m1[1], MemAlign.m1[2], MemAlign.m1[3],
        MemAlign.m1[4], MemAlign.m1[5], MemAlign.m1[6], MemAlign.m1[7],
        MemAlign.v[0], MemAlign.v[1], MemAlign.v[2], MemAlign.v[3],
        MemAlign.v[4], MemAlign.v[5], MemAlign.v[6], MemAlign.v[7],
        MemAlign.mode, 
        MemAlign.wr * MemAlign.w0[0], MemAlign.wr * MemAlign.w0[1], MemAlign.wr * MemAlign.w0[2], MemAlign.wr * MemAlign.w0[3],
        MemAlign.wr * MemAlign.w0[4], MemAlign.wr * MemAlign.w0[5], MemAlign.wr * MemAlign.w0[6], MemAlign.wr * MemAlign.w0[7],
        MemAlign.wr * MemAlign.w1[0], MemAlign.wr * MemAlign.w1[1], MemAlign.wr * MemAlign.w1[2], MemAlign.wr * MemAlign.w1[3],
        MemAlign.wr * MemAlign.w1[4], MemAlign.wr * MemAlign.w1[5], MemAlign.wr * MemAlign.w1[6], MemAlign.wr * MemAlign.w1[7]
    };

    cntMemAlign' = cntMemAlign*(1-Global.L1) + memAlignRD + memAlignWR;