include "config.pil";
include "global.pil";
include "rom.pil";
include "byte4.pil";
include "mem_align.pil";
include "arith.pil";
include "binary.pil";
include "poseidong.pil";
include "padding_pg.pil";
include "storage.pil";
include "padding_kk.pil";
include "mem.pil";

namespace Main(%N);

///////////
// Definitions
///////////

    /////// Constant Polynomials
    pol constant STEP;  // 0, 1, 2, 3, .......

    /////// State Polynomials
    pol commit A7, A6, A5, A4, A3, A2, A1;
    pol commit A0;

    pol commit B7, B6, B5, B4, B3, B2, B1;
    pol commit B0;

    pol commit C7, C6, C5, C4, C3, C2, C1;
    pol commit C0;

    pol commit D7, D6, D5, D4, D3, D2, D1;
    pol commit D0;

    pol commit E7, E6, E5, E4, E3, E2, E1;
    pol commit E0;

    pol commit SR7, SR6, SR5, SR4, SR3, SR2, SR1, SR0;          // State Root
    pol commit CTX;                    // Call Cntext
    pol commit SP;                     // Stack Pointer
    pol commit PC;                     // EVM Program counter
    pol commit GAS;
    pol commit MAXMEM;
    pol commit zkPC;                   // Program Counter of current micro instruction
    pol commit RR;                     // Micro code return address (subroutines)
    pol commit HASHPOS;

    ///////  Instruction related polynomials
    pol commit CONST7, CONST6, CONST5, CONST4, CONST3, CONST2, CONST1, CONST0;
    pol commit FREE7, FREE6, FREE5, FREE4, FREE3, FREE2, FREE1, FREE0;
    pol commit inA, inB, inC, inROTL_C, inD, inE, inSR, inFREE, inCTX, inSP, inPC, inGAS, inMAXMEM, inSTEP, inRR, inHASHPOS;
    pol commit setA, setB, setC, setD, setE, setSR, setCTX, setSP, setPC, setGAS, setMAXMEM, JMP, JMPN, JMPC, setRR, setHASHPOS;
    pol commit offset;
    pol commit incStack;
    pol commit incCode;
    pol commit isStack;
    pol commit isCode;
    pol commit isMem;
    pol commit ind, indRR;
    pol commit useCTX;
    pol commit carry;

    // operations
    pol commit mOp, mWR;
    pol commit sWR, sRD;
    pol commit arith;
    pol commit arithEq0, arithEq1, arithEq2, arithEq3;
    pol commit memAlign, memAlignWR, memAlignWR8;
    pol commit hashK, hashKLen, hashKDigest;
    pol commit hashP, hashPLen, hashPDigest;
    pol commit bin;
    pol commit binOpcode;
    pol commit assert;

    ///////  Intermediary commit polynomials
    pol commit isNeg;
    pol commit isMaxMem;


    /// Counters
    pol commit cntArith, cntBinary, cntMemAlign, cntKeccakF, cntPoseidonG, cntPaddingPG;
    pol commit inCntArith, inCntBinary, inCntMemAlign, inCntKeccakF, inCntPoseidonG, inCntPaddingPG;
    pol commit incCounter;


///////////
// Intermediary calculations and checks
///////////


    /////// op
    pol op0 =
        A0 * inA +
        B0 * inB +
        C0 * inC +
        C7 * inROTL_C +
        D0 * inD +
        E0 * inE +
        FREE0 * inFREE +
        SR0 * inSR +
        CTX * inCTX +
        SP * inSP +
        PC * inPC +
        GAS * inGAS +
        MAXMEM * inMAXMEM +
        STEP * inSTEP +
        RR * inRR +
        HASHPOS * inHASHPOS +
        cntArith * inCntArith +
        cntBinary * inCntBinary +
        cntMemAlign * inCntMemAlign +
        cntKeccakF * inCntKeccakF +
        cntPoseidonG * inCntPoseidonG +
        cntPaddingPG * inCntPaddingPG +
        CONST0;

    pol op1 =
        A1 * inA +
        B1 * inB +
        C1 * inC +
        C0 * inROTL_C +
        D1 * inD +
        E1 * inE +
        SR1 * inSR +
        FREE1 * inFREE +
        CONST1;

    pol op2 =
        A2 * inA +
        B2 * inB +
        C2 * inC +
        C1 * inROTL_C +
        D2 * inD +
        E2 * inE +
        SR2 * inSR +
        FREE2 * inFREE +
        CONST2;

    pol op3 =
        A3 * inA +
        B3 * inB +
        C3 * inC +
        C2 * inROTL_C +
        D3 * inD +
        E3 * inE +
        SR3 * inSR +
        FREE3 * inFREE +
        CONST3;

    pol op4 =
        A4 * inA +
        B4 * inB +
        C4 * inC +
        C3 * inROTL_C +
        D4 * inD +
        E4 * inE +
        SR4 * inSR +
        FREE4 * inFREE +
        CONST4;

    pol op5 =
        A5 * inA +
        B5 * inB +
        C5 * inC +
        C4 * inROTL_C +
        D5 * inD +
        E5 * inE +
        SR5 * inSR +
        FREE5 * inFREE +
        CONST5;

    pol op6 =
        A6 * inA +
        B6 * inB +
        C6 * inC +
        C5 * inROTL_C +
        D6 * inD +
        E6 * inE +
        SR6 * inSR +
        FREE6 * inFREE +
        CONST6;

    pol op7 =
        A7 * inA +
        B7 * inB +
        C7 * inC +
        C6 * inROTL_C +
        D7 * inD +
        E7 * inE +
        SR7 * inSR +
        FREE7 * inFREE +
        CONST7;

    /////// addr

    /*

           [CTX]   [1bit isStack]       [1bit isCode]    [32bits position]

        isCode  isStack isMem
        0       0       0    Context specific variables
        0       1       0    EVM Stack
        1       0       0    EVM Code
        0       0       1    EVM Memory

    */

    pol addrRel = ind*E0 + indRR*RR + offset;
    pol addr = useCTX*CTX*2**18 + isStack*2**17 + isStack*SP + isCode*2**16 + isMem*(2**17+2**16) + addrRel;
    pol maxMemRel = isMem * addrRel;

    /////// isNeg

    JMPN*(isNeg*2**32 + op0) in Byte4.out;

    /////// MAXMEM intermediary vals New State

    pol diffMem = isMaxMem* ( (maxMemRel - MAXMEM) -
                       (MAXMEM - maxMemRel) ) +
              (MAXMEM - maxMemRel);

    diffMem in Global.BYTE2;
    pol maxMemCalculated = isMaxMem*(addrRel - MAXMEM) + MAXMEM;

///////////
// Calculate New State
///////////

    A0' = setA * (op0 - A0) + A0;
    A1' = setA * (op1 - A1) + A1;
    A2' = setA * (op2 - A2) + A2;
    A3' = setA * (op3 - A3) + A3;
    A4' = setA * (op4 - A4) + A4;
    A5' = setA * (op5 - A5) + A5;
    A6' = setA * (op6 - A6) + A6;
    A7' = setA * (op7 - A7) + A7;

    B0' = setB * (op0 - B0) + B0;
    B1' = setB * (op1 - B1) + B1;
    B2' = setB * (op2 - B2) + B2;
    B3' = setB * (op3 - B3) + B3;
    B4' = setB * (op4 - B4) + B4;
    B5' = setB * (op5 - B5) + B5;
    B6' = setB * (op6 - B6) + B6;
    B7' = setB * (op7 - B7) + B7;

    C0' = setC * (op0 - C0) + C0;
    C1' = setC * (op1 - C1) + C1;
    C2' = setC * (op2 - C2) + C2;
    C3' = setC * (op3 - C3) + C3;
    C4' = setC * (op4 - C4) + C4;
    C5' = setC * (op5 - C5) + C5;
    C6' = setC * (op6 - C6) + C6;
    C7' = setC * (op7 - C7) + C7;

    D0' = setD * (op0 - D0) + D0;
    D1' = setD * (op1 - D1) + D1;
    D2' = setD * (op2 - D2) + D2;
    D3' = setD * (op3 - D3) + D3;
    D4' = setD * (op4 - D4) + D4;
    D5' = setD * (op5 - D5) + D5;
    D6' = setD * (op6 - D6) + D6;
    D7' = setD * (op7 - D7) + D7;

    E0' = setE * (op0 - E0) + E0;
    E1' = setE * (op1 - E1) + E1;
    E2' = setE * (op2 - E2) + E2;
    E3' = setE * (op3 - E3) + E3;
    E4' = setE * (op4 - E4) + E4;
    E5' = setE * (op5 - E5) + E5;
    E6' = setE * (op6 - E6) + E6;
    E7' = setE * (op7 - E7) + E7;

    SR0' = setSR * (op0 - SR0) + SR0;
    SR1' = setSR * (op1 - SR1) + SR1;
    SR2' = setSR * (op2 - SR2) + SR2;
    SR3' = setSR * (op3 - SR3) + SR3;
    SR4' = setSR * (op4 - SR4) + SR4;
    SR5' = setSR * (op5 - SR5) + SR5;
    SR6' = setSR * (op6 - SR6) + SR6;
    SR7' = setSR * (op7 - SR7) + SR7;

    CTX' = setCTX * (op0 - CTX) + CTX;
    SP' = setSP * (op0 - (SP +incStack)) + (SP +incStack);
    PC' = setPC * (op0 - (PC +incCode)) + (PC +incCode);
    RR' = setRR * (op0 - RR) + RR;
    GAS' = setGAS * (op0 - GAS) + GAS;


    MAXMEM' = setMAXMEM * (op0 - maxMemCalculated) + maxMemCalculated;

    HASHPOS' = setHASHPOS * (op0 - HASHPOS) + HASHPOS + (hashK + hashP)*D0;

    pol doJMP = JMPN*isNeg + JMP + JMPC*carry;

    zkPC' = doJMP       *   (addr - (zkPC+1)) +
                            (zkPC+1)   ;



    (A0-op0)*assert = 0;
    (A1-op1)*assert = 0;
    (A2-op2)*assert = 0;
    (A3-op3)*assert = 0;
    (A4-op4)*assert = 0;
    (A5-op5)*assert = 0;
    (A6-op6)*assert = 0;
    (A7-op7)*assert = 0;

    public globalHash0 = FREE0(0);
    public globalHash1 = FREE1(0);
    public globalHash2 = FREE2(0);
    public globalHash3 = FREE3(0);
    public globalHash4 = FREE4(0);
    public globalHash5 = FREE5(0);
    public globalHash6 = FREE6(0);
    public globalHash7 = FREE7(0);

    Global.L1 * (FREE0 - :globalHash0) = 0;
    Global.L1 * (FREE1 - :globalHash1) = 0;
    Global.L1 * (FREE2 - :globalHash2) = 0;
    Global.L1 * (FREE3 - :globalHash3) = 0;
    Global.L1 * (FREE4 - :globalHash4) = 0;
    Global.L1 * (FREE5 - :globalHash5) = 0;
    Global.L1 * (FREE6 - :globalHash6) = 0;
    Global.L1 * (FREE7 - :globalHash7) = 0;

    // Check that the calculated hash is well formed
    sWR + hashPDigest {
        op0, op1, op2, op3, op4, op5, op6, op7
    } in
    Binary.RESET {
        Binary.a0, Binary.a1, Binary.a2, Binary.a3, Binary.a4, Binary.a5, Binary.a6, Binary.a7
    };

/////////
// ROM Plookpups
/////////

    {CONST0, CONST1, CONST2, CONST3, CONST4, CONST5, CONST6, CONST7, offset ,
    inA, inB, inC, inROTL_C, inD, inE, inSR, inCTX, inSP, inPC, inGAS, inMAXMEM, inSTEP, inFREE, inRR, inHASHPOS,
    setA, setB, setC, setD, setE, setSR, setCTX, setSP, setPC, setGAS, setMAXMEM, setRR, setHASHPOS,
    JMP, JMPN, JMPC,
    isStack, isCode, isMem, incStack, incCode, useCTX, ind, indRR,
    mOp, mWR, sWR, sRD, arith, arithEq0, arithEq1, arithEq2, arithEq3, hashK, hashKLen, hashKDigest, hashP, hashPLen, hashPDigest,
    bin, binOpcode, assert, memAlign, memAlignWR, memAlignWR8,
    zkPC} in
    {Rom.CONST0, Rom.CONST1, Rom.CONST2, Rom.CONST3, Rom.CONST4, Rom.CONST5, Rom.CONST6, Rom.CONST7, Rom.offset,
    Rom.inA, Rom.inB, Rom.inC, Rom.inROTL_C, Rom.inD, Rom.inE, Rom.inSR, Rom.inCTX, Rom.inSP, Rom.inPC, Rom.inGAS, Rom.inMAXMEM, Rom.inSTEP, Rom.inFREE, Rom.inRR, Rom.inHASHPOS,
    Rom.setA, Rom.setB, Rom.setC, Rom.setD, Rom.setE, Rom.setSR, Rom.setCTX, Rom.setSP, Rom.setPC, Rom.setGAS, Rom.setMAXMEM, Rom.setRR, Rom.setHASHPOS,
    Rom.JMP, Rom.JMPN, Rom.JMPC,
    Rom.isStack, Rom.isCode, Rom.isMem, Rom.incStack, Rom.incCode, Rom.useCTX, Rom.ind, Rom.indRR,
    Rom.mOp, Rom.mWR, Rom.sWR, Rom.sRD, Rom.arith, Rom.arithEq0, Rom.arithEq1, Rom.arithEq2, Rom.arithEq3, Rom.hashK, Rom.hashKLen, Rom.hashKDigest, Rom.hashP, Rom.hashPLen, Rom.hashPDigest,
    Rom.bin, Rom.binOpcode, Rom.assert, Rom.memAlign, Rom.memAlignWR, Rom.memAlignWR8,
    Rom.line};

    pol commit sKeyI[4];
    pol commit sKey[4];

/////////
// Arithmetic Plookpups
/////////
    arith {  arithEq0, arithEq1, arithEq2, arithEq3,
        A0, A1, A2, A3, A4, A5, A6, A7,
        B0, B1, B2, B3, B4, B5, B6, B7,

        arithEq0*C0 + arithEq1*C0 + arithEq2*A0,
        arithEq0*C1 + arithEq1*C1 + arithEq2*A1,
        arithEq0*C2 + arithEq1*C2 + arithEq2*A2,
        arithEq0*C3 + arithEq1*C3 + arithEq2*A3,
        arithEq0*C4 + arithEq1*C4 + arithEq2*A4,
        arithEq0*C5 + arithEq1*C5 + arithEq2*A5,
        arithEq0*C6 + arithEq1*C6 + arithEq2*A6,
        arithEq0*C7 + arithEq1*C7 + arithEq2*A7,

        arithEq0*D0 + arithEq1*D0 + arithEq2*B0,
        arithEq0*D1 + arithEq1*D1 + arithEq2*B1,
        arithEq0*D2 + arithEq1*D2 + arithEq2*B2,
        arithEq0*D3 + arithEq1*D3 + arithEq2*B3,
        arithEq0*D4 + arithEq1*D4 + arithEq2*B4,
        arithEq0*D5 + arithEq1*D5 + arithEq2*B5,
        arithEq0*D6 + arithEq1*D6 + arithEq2*B6,
        arithEq0*D7 + arithEq1*D7 + arithEq2*B7,

        arithEq3 * E0, arithEq3 * E1, arithEq3 * E2, arithEq3 * E3, arithEq3 * E4, arithEq3 * E5, arithEq3 * E6, arithEq3 * E7,
        op0, op1, op2, op3, op4, op5, op6, op7 } in
    {
        Arith.selEq[0], Arith.selEq[1], Arith.selEq[2], Arith.selEq[3],

        Arith.x1[0] + Arith.x1[1]*2**16,
        Arith.x1[2] + Arith.x1[3]*2**16,
        Arith.x1[4] + Arith.x1[5]*2**16,
        Arith.x1[6] + Arith.x1[7]*2**16,
        Arith.x1[8] + Arith.x1[9]*2**16,
        Arith.x1[10] + Arith.x1[11]*2**16,
        Arith.x1[12] + Arith.x1[13]*2**16,
        Arith.x1[14] + Arith.x1[15]*2**16,

        Arith.y1[0] + Arith.y1[1]*2**16,
        Arith.y1[2] + Arith.y1[3]*2**16,
        Arith.y1[4] + Arith.y1[5]*2**16,
        Arith.y1[6] + Arith.y1[7]*2**16,
        Arith.y1[8] + Arith.y1[9]*2**16,
        Arith.y1[10] + Arith.y1[11]*2**16,
        Arith.y1[12] + Arith.y1[13]*2**16,
        Arith.y1[14] + Arith.y1[15]*2**16,

        Arith.x2[0] + Arith.x2[1]*2**16,
        Arith.x2[2] + Arith.x2[3]*2**16,
        Arith.x2[4] + Arith.x2[5]*2**16,
        Arith.x2[6] + Arith.x2[7]*2**16,
        Arith.x2[8] + Arith.x2[9]*2**16,
        Arith.x2[10] + Arith.x2[11]*2**16,
        Arith.x2[12] + Arith.x2[13]*2**16,
        Arith.x2[14] + Arith.x2[15]*2**16,

        Arith.y2[0] + Arith.y2[1]*2**16,
        Arith.y2[2] + Arith.y2[3]*2**16,
        Arith.y2[4] + Arith.y2[5]*2**16,
        Arith.y2[6] + Arith.y2[7]*2**16,
        Arith.y2[8] + Arith.y2[9]*2**16,
        Arith.y2[10] + Arith.y2[11]*2**16,
        Arith.y2[12] + Arith.y2[13]*2**16,
        Arith.y2[14] + Arith.y2[15]*2**16,

        Arith.x3[0] + Arith.x3[1]*2**16,
        Arith.x3[2] + Arith.x3[3]*2**16,
        Arith.x3[4] + Arith.x3[5]*2**16,
        Arith.x3[6] + Arith.x3[7]*2**16,
        Arith.x3[8] + Arith.x3[9]*2**16,
        Arith.x3[10] + Arith.x3[11]*2**16,
        Arith.x3[12] + Arith.x3[13]*2**16,
        Arith.x3[14] + Arith.x3[15]*2**16,

        Arith.y3[0] + Arith.y3[1]*2**16,
        Arith.y3[2] + Arith.y3[3]*2**16,
        Arith.y3[4] + Arith.y3[5]*2**16,
        Arith.y3[6] + Arith.y3[7]*2**16,
        Arith.y3[8] + Arith.y3[9]*2**16,
        Arith.y3[10] + Arith.y3[11]*2**16,
        Arith.y3[12] + Arith.y3[13]*2**16,
        Arith.y3[14] + Arith.y3[15]*2**16
    };

    cntArith' = cntArith*(1-Global.L1) + arith;

/////////
// Binary Plookpups
/////////

    bin {
        binOpcode,
        A0, A1, A2, A3, A4, A5, A6, A7,
        B0, B1, B2, B3, B4, B5, B6, B7,
        op0, op1, op2, op3, op4, op5, op6, op7,
        carry
    } in
    Binary.RESET {
        Binary.lOpcode,
        Binary.a0, Binary.a1, Binary.a2, Binary.a3, Binary.a4, Binary.a5, Binary.a6, Binary.a7,
        Binary.b0, Binary.b1, Binary.b2, Binary.b3, Binary.b4, Binary.b5, Binary.b6, Binary.b7,
        Binary.c0, Binary.c1, Binary.c2, Binary.c3, Binary.c4, Binary.c5, Binary.c6, Binary.c7,
        Binary.lCout
    };

    cntBinary' = cntBinary*(1-Global.L1) + bin;



/////////
// HASHK Plookpups
/////////
    hashK {
        addr,
        HASHPOS,
        D0,
        op0, op1, op2, op3,
        op4, op5, op6, op7
    } in
    PaddingKK.crLatch * PaddingKK.crValid {
        PaddingKK.addr,
        PaddingKK.len - PaddingKK.rem - PaddingKK.crLen + 1,
        PaddingKK.crLen,
        PaddingKK.crV0C, PaddingKK.crV1C, PaddingKK.crV2C, PaddingKK.crV3C,
        PaddingKK.crV4C, PaddingKK.crV5C, PaddingKK.crV6C, PaddingKK.crV7C
    };

    hashKLen {
        addr,
        op0
    } in
    PaddingKK.lastHashLatch {
        PaddingKK.addr,
        PaddingKK.len
    };

    hashKDigest {
        addr,
        op0, op1, op2, op3,
        op4, op5, op6, op7,
        incCounter
    } in
    PaddingKK.lastHashLatch {
        PaddingKK.addr,
        PaddingKK.hash0, PaddingKK.hash1, PaddingKK.hash2, PaddingKK.hash3,
        PaddingKK.hash4, PaddingKK.hash5, PaddingKK.hash6, PaddingKK.hash7,
        PaddingKK.incCounter
    };

    cntKeccakF' = cntKeccakF*(1-Global.L1) + incCounter*hashKDigest;

/////////
// HASHP Plookpups
/////////
    hashP {
        addr,
        HASHPOS,
        D0,
        op0, op1, op2, op3,
        op4, op5, op6, op7
    } in
    PaddingPG.crLatch {
        PaddingPG.addr,
        PaddingPG.len - PaddingPG.rem - PaddingPG.crLen + 1,
        PaddingPG.crLen,
        PaddingPG.crV0C, PaddingPG.crV1C, PaddingPG.crV2C, PaddingPG.crV3C,
        PaddingPG.crV4C, PaddingPG.crV5C, PaddingPG.crV6C, PaddingPG.crV7C
    };

    hashPLen {
        addr,
        op0
    } in
    PaddingPG.lastHash {
        PaddingPG.addr,
        PaddingPG.len
    };

    hashPDigest {
        addr,
        op0 + 2**32 * op1,
        op2 + 2**32 * op3,
        op4 + 2**32 * op5,
        op6 + 2**32 * op7,
        incCounter
    } in
    PaddingPG.lastHash {
        PaddingPG.addr,
        PaddingPG.curHash0,
        PaddingPG.curHash1,
        PaddingPG.curHash2,
        PaddingPG.curHash3,
        PaddingPG.incCounter
    };

    cntPaddingPG' = cntPaddingPG*(1-Global.L1) + hashPDigest*incCounter;
    cntPoseidonG' = cntPoseidonG*(1-Global.L1) + (hashPDigest + sRD + sWR) * incCounter;

/////////
// Mem Plookpups
/////////
    mOp {
        addr,
        STEP,
        mWR,
        op0, op1, op2, op3,
        op4, op5, op6, op7
    } is
    Mem.mOp {
        Mem.addr,
        Mem.step,
        Mem.mWr,
        Mem.val[0], Mem.val[1], Mem.val[2], Mem.val[3],
        Mem.val[4], Mem.val[5], Mem.val[6], Mem.val[7]
    };


/////////
// Storage Plookpups
/////////

    (sRD + sWR) {
        C0, C1, C2, C3, C4, C5, C6, C7,
        0, 0, 0, 0,
        sKeyI[0], sKeyI[1], sKeyI[2], sKeyI[3]
    } in
    PoseidonG.LATCH {
        PoseidonG.in0,
        PoseidonG.in1,
        PoseidonG.in2,
        PoseidonG.in3,
        PoseidonG.in4,
        PoseidonG.in5,
        PoseidonG.in6,
        PoseidonG.in7,
        PoseidonG.hashType,
        PoseidonG.cap1,
        PoseidonG.cap2,
        PoseidonG.cap3,
        PoseidonG.hash0,
        PoseidonG.hash1,
        PoseidonG.hash2,
        PoseidonG.hash3
    };

    sRD + sWR {
        A0, A1, A2, A3, A4, A5, B0, B1,
        sKeyI[0], sKeyI[1], sKeyI[2], sKeyI[3],
        sKey[0], sKey[1], sKey[2], sKey[3]
    } in
    PoseidonG.LATCH {
        PoseidonG.in0,
        PoseidonG.in1,
        PoseidonG.in2,
        PoseidonG.in3,
        PoseidonG.in4,
        PoseidonG.in5,
        PoseidonG.in6,
        PoseidonG.in7,
        PoseidonG.hashType,
        PoseidonG.cap1,
        PoseidonG.cap2,
        PoseidonG.cap3,
        PoseidonG.hash0,
        PoseidonG.hash1,
        PoseidonG.hash2,
        PoseidonG.hash3
    };

    sRD {
        SR0 + 2**32*SR1, SR2 + 2**32*SR3, SR4 + 2**32*SR5, SR6 + 2**32*SR7,
        sKey[0], sKey[1], sKey[2], sKey[3],
        op0, op1, op2, op3,
        op4, op5, op6, op7,
        incCounter
    } in
    Storage.iLatchGet {
        Storage.oldRoot0, Storage.oldRoot1, Storage.oldRoot2, Storage.oldRoot3,
        Storage.rkey0, Storage.rkey1, Storage.rkey2, Storage.rkey3,
        Storage.valueLow0, Storage.valueLow1, Storage.valueLow2, Storage.valueLow3,
        Storage.valueHigh0, Storage.valueHigh1, Storage.valueHigh2, Storage.valueHigh3,
        Storage.incCounter + 2
    };


    sWR {
        SR0 + 2**32*SR1, SR2 + 2**32*SR3, SR4 + 2**32*SR5, SR6 + 2**32*SR7,
        sKey[0], sKey[1], sKey[2], sKey[3],
        D0, D1, D2, D3,
        D4, D5, D6, D7,
        op0 + 2**32*op1, op2 + 2**32*op3, op4 + 2**32*op5, op6 + 2**32*op7,
        incCounter
    } in
    Storage.iLatchSet {
        Storage.oldRoot0, Storage.oldRoot1, Storage.oldRoot2, Storage.oldRoot3,
        Storage.rkey0, Storage.rkey1, Storage.rkey2, Storage.rkey3,
        Storage.valueLow0, Storage.valueLow1, Storage.valueLow2, Storage.valueLow3,
        Storage.valueHigh0, Storage.valueHigh1, Storage.valueHigh2, Storage.valueHigh3,
        Storage.newRoot0, Storage.newRoot1, Storage.newRoot2, Storage.newRoot3,
        Storage.incCounter + 2
    };


/////////
// MemAlign Plookpups
/////////

    memAlign {
        memAlignWR,
        memAlignWR8,
        A0, A1, A2, A3,
        A4, A5, A6, A7,
        (1 - memAlignWR8) * B0, (1 - memAlignWR8) * B1, (1 - memAlignWR8) * B2, (1 - memAlignWR8) * B3,
        (1 - memAlignWR8) * B4, (1 - memAlignWR8) * B5, (1 - memAlignWR8) * B6, (1 - memAlignWR8) * B7,
        op0, op1, op2, op3,
        op4, op5, op6, op7,
        C0,
        (memAlignWR + memAlignWR8) * D0, (memAlignWR + memAlignWR8)*D1, (memAlignWR + memAlignWR8)*D2, (memAlignWR + memAlignWR8)*D3,
        (memAlignWR + memAlignWR8) * D4, (memAlignWR + memAlignWR8)*D5, (memAlignWR + memAlignWR8)*D6, (memAlignWR + memAlignWR8)*D7,
        memAlignWR * E0, memAlignWR*E1, memAlignWR*E2, memAlignWR*E3,
        memAlignWR * E4, memAlignWR*E5, memAlignWR*E6, memAlignWR*E7
    } in
    MemAlign.RESET {
        MemAlign.wr256,
        MemAlign.wr8,
        MemAlign.m0[0], MemAlign.m0[1], MemAlign.m0[2], MemAlign.m0[3],
        MemAlign.m0[4], MemAlign.m0[5], MemAlign.m0[6], MemAlign.m0[7],
        MemAlign.m1[0], MemAlign.m1[1], MemAlign.m1[2], MemAlign.m1[3],
        MemAlign.m1[4], MemAlign.m1[5], MemAlign.m1[6], MemAlign.m1[7],
        MemAlign.v[0], MemAlign.v[1], MemAlign.v[2], MemAlign.v[3],
        MemAlign.v[4], MemAlign.v[5], MemAlign.v[6], MemAlign.v[7],
        MemAlign.offset,
        MemAlign.w0[0], MemAlign.w0[1], MemAlign.w0[2], MemAlign.w0[3],
        MemAlign.w0[4], MemAlign.w0[5], MemAlign.w0[6], MemAlign.w0[7],
        MemAlign.w1[0], MemAlign.w1[1], MemAlign.w1[2], MemAlign.w1[3],
        MemAlign.w1[4], MemAlign.w1[5], MemAlign.w1[6], MemAlign.w1[7]
    };

    cntMemAlign' = cntMemAlign*(1-Global.L1) + memAlign;

