
/*
    Equations:

    EQ0: a * b + c = s * 2 ** 256 + op

*/
include "global.pil";

namespace Arith(%N);

    pol commit a[4];
    pol commit b[4];
    pol commit c[4];
    pol commit d[4];
    pol commit op[4];

    pol constant GL_SIGNED_22BITS;

    /****
    *
    * LATCH POLS: a,b,c,d,op
    *
    *****/

    a[0]' * (1-Global.CLK8[7]) = a[0] * (1-Global.CLK8[7]);
	a[1]' * (1-Global.CLK8[7]) = a[1] * (1-Global.CLK8[7]);
	a[2]' * (1-Global.CLK8[7]) = a[2] * (1-Global.CLK8[7]);
	a[3]' * (1-Global.CLK8[7]) = a[3] * (1-Global.CLK8[7]);


    b[0]' * (1-Global.CLK8[7]) = b[0] * (1-Global.CLK8[7]);
	b[1]' * (1-Global.CLK8[7]) = b[1] * (1-Global.CLK8[7]);
	b[2]' * (1-Global.CLK8[7]) = b[2] * (1-Global.CLK8[7]);
	b[3]' * (1-Global.CLK8[7]) = b[3] * (1-Global.CLK8[7]);


    c[0]' * (1-Global.CLK8[7]) = c[0] * (1-Global.CLK8[7]);
	c[1]' * (1-Global.CLK8[7]) = c[1] * (1-Global.CLK8[7]);
	c[2]' * (1-Global.CLK8[7]) = c[2] * (1-Global.CLK8[7]);
	c[3]' * (1-Global.CLK8[7]) = c[3] * (1-Global.CLK8[7]);


    d[0]' * (1-Global.CLK8[7]) = d[0] * (1-Global.CLK8[7]);
	d[1]' * (1-Global.CLK8[7]) = d[1] * (1-Global.CLK8[7]);
	d[2]' * (1-Global.CLK8[7]) = d[2] * (1-Global.CLK8[7]);
	d[3]' * (1-Global.CLK8[7]) = d[3] * (1-Global.CLK8[7]);


    op[0]' * (1-Global.CLK8[7]) = op[0] * (1-Global.CLK8[7]);
	op[1]' * (1-Global.CLK8[7]) = op[1] * (1-Global.CLK8[7]);
	op[2]' * (1-Global.CLK8[7]) = op[2] * (1-Global.CLK8[7]);
	op[3]' * (1-Global.CLK8[7]) = op[3] * (1-Global.CLK8[7]);


    /****
    *
    * RANGE CHECK a, b, c, d, op
    *
    *****/

    a[0]*Global.CLK8[0] + a[1]*Global.CLK8[1] + a[2]*Global.CLK8[2] + a[3]*Global.CLK8[3] + b[0]*Global.CLK8[4] + b[1]*Global.CLK8[5] + b[2]*Global.CLK8[6] + b[3]*Global.CLK8[7] in Global.BYTE2;

    c[0]*Global.CLK8[0] + c[1]*Global.CLK8[1] + c[2]*Global.CLK8[2] + c[3]*Global.CLK8[3] + d[0]*Global.CLK8[4] + d[1]*Global.CLK8[5] + d[2]*Global.CLK8[6] + d[3]*Global.CLK8[7] in Global.BYTE2;

    op[0]*Global.CLK8[0] + op[1]*Global.CLK8[1] + op[2]*Global.CLK8[2] + op[3]*Global.CLK8[3] in Global.BYTE2;

    /*******
    *
    * EQ0: a * b + c = d * 2 ** 256 + op
    *
    *******/

    pol eq0_0 =
		(a[0] * b[0])
		 + c[0] - op[0];
	pol eq0_1 =
		(a[0] * b[1]) +
		(a[1] * b[0])
		 + c[1] - op[1];
	pol eq0_2 =
		(a[0] * b[2]) +
		(a[1] * b[1]) +
		(a[2] * b[0])
		 + c[2] - op[2];
	pol eq0_3 =
		(a[0] * b[3]) +
		(a[1] * b[2]) +
		(a[2] * b[1]) +
		(a[3] * b[0])
		 + c[3] - op[3];
	pol eq0_4 =
		(a[1] * b[3]) +
		(a[2] * b[2]) +
		(a[3] * b[1])
		    - d[0];
	pol eq0_5 =
		(a[2] * b[3]) +
		(a[3] * b[2])
		    - d[1];
	pol eq0_6 =
		(a[3] * b[3])
		    - d[2];
	pol eq0_7 =
		    - d[3];

    pol eq0 = eq0_0*Global.CLK8[0] + eq0_1*Global.CLK8[1] + eq0_2*Global.CLK8[2] + eq0_3*Global.CLK8[3] + eq0_4*Global.CLK8[4] + eq0_5*Global.CLK8[5] + eq0_6*Global.CLK8[6] + eq0_7*Global.CLK8[7];

    pol commit carry;

    carry * Global.CLK8[0] = 0;

    carry in GL_SIGNED_22BITS;

    eq0 + carry = carry' * 2**16;

    pol commit result;

    // all rows of cycle has same valid latched values
    result * (1 - result) = 0;