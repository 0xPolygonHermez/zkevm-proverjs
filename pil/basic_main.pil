constant %N = 2**16;
include "global.pil";

namespace Main(%N);

///////////
// Definitions
///////////

    /////// Constant Polynomials
    pol constant STEP;  // 0, 1, 2, 3, .......

    /////// State Polynomials
    pol commit A7, A6, A5, A4, A3, A2, A1;
    pol commit A0;

    pol commit B7, B6, B5, B4, B3, B2, B1;
    pol commit B0;

    pol commit C7, C6, C5, C4, C3, C2, C1;
    pol commit C0;

    pol commit D7, D6, D5, D4, D3, D2, D1;
    pol commit D0;

    pol commit E7, E6, E5, E4, E3, E2, E1;
    pol commit E0;

    pol commit SR7, SR6, SR5, SR4, SR3, SR2, SR1, SR0;          // State Root
    pol commit CTX;                    // Call Cntext
    pol commit SP;                     // Stack Pointer
    pol commit PC;                     // EVM Program counter
    pol commit GAS;
    pol commit MAXMEM;
    pol commit zkPC;                   // Program Counter of current micro instruction
    pol commit RR;                     // Micro code return address (subroutines)
    pol commit HASHPOS;

    ///////  Instruction related polynomials
    pol commit CONST7, CONST6, CONST5, CONST4, CONST3, CONST2, CONST1, CONST0;
    pol commit FREE7, FREE6, FREE5, FREE4, FREE3, FREE2, FREE1, FREE0;
    pol commit inA, inB, inC, inROTL_C, inD, inE, inSR, inFREE, inCTX, inSP, inPC, inGAS, inMAXMEM, inSTEP, inRR, inHASHPOS;
    pol commit setA, setB, setC, setD, setE, setSR, setCTX, setSP, setPC, setGAS, setMAXMEM, JMP, JMPN, JMPC, setRR, setHASHPOS;
    pol commit offset;
    pol commit incStack;
    pol commit incCode;
    pol commit isStack;
    pol commit isCode;
    pol commit isMem;
    pol commit ind, indRR;
    pol commit useCTX;
    pol commit carry;

    // operations
    pol commit mOp, mWR;
    pol commit sWR, sRD;
    pol commit arith;
    pol commit arithEq0, arithEq1, arithEq2, arithEq3;
    pol commit memAlign, memAlignWR, memAlignWR8;
    pol commit hashK, hashKLen, hashKDigest;
    pol commit hashP, hashPLen, hashPDigest;
    pol commit bin;
    pol commit binOpcode;
    pol commit assert;

    ///////  Intermediary commit polynomials
    pol commit isNeg;
    pol commit isMaxMem;


    /// Counters
    pol commit cntArith, cntBinary, cntMemAlign, cntKeccakF, cntPoseidonG, cntPaddingPG;
    pol commit inCntArith, inCntBinary, inCntMemAlign, inCntKeccakF, inCntPoseidonG, inCntPaddingPG;
    pol commit incCounter;


///////////
// Intermediary calculations and checks
///////////


    /////// op
    pol op0 =
        A0 * inA +
        B0 * inB +
        C0 * inC +
        C7 * inROTL_C +
        D0 * inD +
        E0 * inE +
        FREE0 * inFREE +
        SR0 * inSR +
        CTX * inCTX +
        SP * inSP +
        PC * inPC +
        GAS * inGAS +
        MAXMEM * inMAXMEM +
        STEP * inSTEP +
        RR * inRR +
        HASHPOS * inHASHPOS +
        cntArith * inCntArith +
        cntBinary * inCntBinary +
        cntMemAlign * inCntMemAlign +
        cntKeccakF * inCntKeccakF +
        cntPoseidonG * inCntPoseidonG +
        cntPaddingPG * inCntPaddingPG +
        CONST0;

    pol op1 =
        A1 * inA +
        B1 * inB +
        C1 * inC +
        C0 * inROTL_C +
        D1 * inD +
        E1 * inE +
        SR1 * inSR +
        FREE1 * inFREE +
        CONST1;

    pol op2 =
        A2 * inA +
        B2 * inB +
        C2 * inC +
        C1 * inROTL_C +
        D2 * inD +
        E2 * inE +
        SR2 * inSR +
        FREE2 * inFREE +
        CONST2;

    pol op3 =
        A3 * inA +
        B3 * inB +
        C3 * inC +
        C2 * inROTL_C +
        D3 * inD +
        E3 * inE +
        SR3 * inSR +
        FREE3 * inFREE +
        CONST3;

    pol op4 =
        A4 * inA +
        B4 * inB +
        C4 * inC +
        C3 * inROTL_C +
        D4 * inD +
        E4 * inE +
        SR4 * inSR +
        FREE4 * inFREE +
        CONST4;

    pol op5 =
        A5 * inA +
        B5 * inB +
        C5 * inC +
        C4 * inROTL_C +
        D5 * inD +
        E5 * inE +
        SR5 * inSR +
        FREE5 * inFREE +
        CONST5;

    pol op6 =
        A6 * inA +
        B6 * inB +
        C6 * inC +
        C5 * inROTL_C +
        D6 * inD +
        E6 * inE +
        SR6 * inSR +
        FREE6 * inFREE +
        CONST6;

    pol op7 =
        A7 * inA +
        B7 * inB +
        C7 * inC +
        C6 * inROTL_C +
        D7 * inD +
        E7 * inE +
        SR7 * inSR +
        FREE7 * inFREE +
        CONST7;

    /////// addr

    /*

           [CTX]   [1bit isStack]       [1bit isCode]    [32bits position]

        isCode  isStack isMem
        0       0       0    Context specific variables
        0       1       0    EVM Stack
        1       0       0    EVM Code
        0       0       1    EVM Memory

    */

    pol addrRel = ind*E0 + indRR*RR + offset;
    pol addr = useCTX*CTX*2**18 + isStack*2**17 + isStack*SP + isCode*2**16 + isMem*(2**17+2**16) + addrRel;

    pol maxMemCalculated = isMaxMem*(addrRel - MAXMEM) + MAXMEM;

///////////
// Calculate New State
///////////

    A0' = setA * (op0 - A0) + A0;
    A1' = setA * (op1 - A1) + A1;
    A2' = setA * (op2 - A2) + A2;
    A3' = setA * (op3 - A3) + A3;
    A4' = setA * (op4 - A4) + A4;
    A5' = setA * (op5 - A5) + A5;
    A6' = setA * (op6 - A6) + A6;
    A7' = setA * (op7 - A7) + A7;

    B0' = setB * (op0 - B0) + B0;
    B1' = setB * (op1 - B1) + B1;
    B2' = setB * (op2 - B2) + B2;
    B3' = setB * (op3 - B3) + B3;
    B4' = setB * (op4 - B4) + B4;
    B5' = setB * (op5 - B5) + B5;
    B6' = setB * (op6 - B6) + B6;
    B7' = setB * (op7 - B7) + B7;

    C0' = setC * (op0 - C0) + C0;
    C1' = setC * (op1 - C1) + C1;
    C2' = setC * (op2 - C2) + C2;
    C3' = setC * (op3 - C3) + C3;
    C4' = setC * (op4 - C4) + C4;
    C5' = setC * (op5 - C5) + C5;
    C6' = setC * (op6 - C6) + C6;
    C7' = setC * (op7 - C7) + C7;

    D0' = setD * (op0 - D0) + D0;
    D1' = setD * (op1 - D1) + D1;
    D2' = setD * (op2 - D2) + D2;
    D3' = setD * (op3 - D3) + D3;
    D4' = setD * (op4 - D4) + D4;
    D5' = setD * (op5 - D5) + D5;
    D6' = setD * (op6 - D6) + D6;
    D7' = setD * (op7 - D7) + D7;

    E0' = setE * (op0 - E0) + E0;
    E1' = setE * (op1 - E1) + E1;
    E2' = setE * (op2 - E2) + E2;
    E3' = setE * (op3 - E3) + E3;
    E4' = setE * (op4 - E4) + E4;
    E5' = setE * (op5 - E5) + E5;
    E6' = setE * (op6 - E6) + E6;
    E7' = setE * (op7 - E7) + E7;

    SR0' = setSR * (op0 - SR0) + SR0;
    SR1' = setSR * (op1 - SR1) + SR1;
    SR2' = setSR * (op2 - SR2) + SR2;
    SR3' = setSR * (op3 - SR3) + SR3;
    SR4' = setSR * (op4 - SR4) + SR4;
    SR5' = setSR * (op5 - SR5) + SR5;
    SR6' = setSR * (op6 - SR6) + SR6;
    SR7' = setSR * (op7 - SR7) + SR7;

    CTX' = setCTX * (op0 - CTX) + CTX;
    SP' = setSP * (op0 - (SP +incStack)) + (SP +incStack);
    PC' = setPC * (op0 - (PC +incCode)) + (PC +incCode);
    RR' = setRR * (op0 - RR) + RR;
    GAS' = setGAS * (op0 - GAS) + GAS;


    MAXMEM' = setMAXMEM * (op0 - maxMemCalculated) + maxMemCalculated;

    HASHPOS' = setHASHPOS * (op0 - HASHPOS) + HASHPOS + (hashK + hashP)*D0;

    pol doJMP = JMPN*isNeg + JMP + JMPC*carry;

    zkPC' = doJMP       *   (addr - (zkPC+1)) +
                            (zkPC+1)   ;

    (A0-op0)*assert = 0;
    (A1-op1)*assert = 0;
    (A2-op2)*assert = 0;
    (A3-op3)*assert = 0;
    (A4-op4)*assert = 0;
    (A5-op5)*assert = 0;
    (A6-op6)*assert = 0;
    (A7-op7)*assert = 0;

    public oldStateRoot0 = B0(0);
    public oldStateRoot1 = B1(0);
    public oldStateRoot2 = B2(0);
    public oldStateRoot3 = B3(0);
    public oldStateRoot4 = B4(0);
    public oldStateRoot5 = B5(0);
    public oldStateRoot6 = B6(0);
    public oldStateRoot7 = B7(0);
    Global.L1 * (B0 - :oldStateRoot0) = 0;
    Global.L1 * (B1 - :oldStateRoot1) = 0;
    Global.L1 * (B2 - :oldStateRoot2) = 0;
    Global.L1 * (B3 - :oldStateRoot3) = 0;
    Global.L1 * (B4 - :oldStateRoot4) = 0;
    Global.L1 * (B5 - :oldStateRoot5) = 0;
    Global.L1 * (B6 - :oldStateRoot6) = 0;
    Global.L1 * (B7 - :oldStateRoot7) = 0;

    public oldAccInputHash0 = C0(0);
    public oldAccInputHash1 = C1(0);
    public oldAccInputHash2 = C2(0);
    public oldAccInputHash3 = C3(0);
    public oldAccInputHash4 = C4(0);
    public oldAccInputHash5 = C5(0);
    public oldAccInputHash6 = C6(0);
    public oldAccInputHash7 = C7(0);
    Global.L1 * (C0 - :oldAccInputHash0) = 0;
    Global.L1 * (C1 - :oldAccInputHash1) = 0;
    Global.L1 * (C2 - :oldAccInputHash2) = 0;
    Global.L1 * (C3 - :oldAccInputHash3) = 0;
    Global.L1 * (C4 - :oldAccInputHash4) = 0;
    Global.L1 * (C5 - :oldAccInputHash5) = 0;
    Global.L1 * (C6 - :oldAccInputHash6) = 0;
    Global.L1 * (C7 - :oldAccInputHash7) = 0;

    public oldBatchNum = SP(0);
    Global.L1 * (SP - :oldBatchNum) = 0;

    public chainId = GAS(0);
    Global.L1 * (GAS - :chainId) = 0;

    public newStateRoot0 = SR0(%N-1);
    public newStateRoot1 = SR1(%N-1);
    public newStateRoot2 = SR2(%N-1);
    public newStateRoot3 = SR3(%N-1);
    public newStateRoot4 = SR4(%N-1);
    public newStateRoot5 = SR5(%N-1);
    public newStateRoot6 = SR6(%N-1);
    public newStateRoot7 = SR7(%N-1);
    Global.LLAST * (SR0 - :newStateRoot0) = 0;
    Global.LLAST * (SR1 - :newStateRoot1) = 0;
    Global.LLAST * (SR2 - :newStateRoot2) = 0;
    Global.LLAST * (SR3 - :newStateRoot3) = 0;
    Global.LLAST * (SR4 - :newStateRoot4) = 0;
    Global.LLAST * (SR5 - :newStateRoot5) = 0;
    Global.LLAST * (SR6 - :newStateRoot6) = 0;
    Global.LLAST * (SR7 - :newStateRoot7) = 0;

    public newAccInputHash0 = D0(%N -1);
    public newAccInputHash1 = D1(%N -1);
    public newAccInputHash2 = D2(%N -1);
    public newAccInputHash3 = D3(%N -1);
    public newAccInputHash4 = D4(%N -1);
    public newAccInputHash5 = D5(%N -1);
    public newAccInputHash6 = D6(%N -1);
    public newAccInputHash7 = D7(%N -1);
    Global.LLAST * (D0 - :newAccInputHash0) = 0;
    Global.LLAST * (D1 - :newAccInputHash1) = 0;
    Global.LLAST * (D2 - :newAccInputHash2) = 0;
    Global.LLAST * (D3 - :newAccInputHash3) = 0;
    Global.LLAST * (D4 - :newAccInputHash4) = 0;
    Global.LLAST * (D5 - :newAccInputHash5) = 0;
    Global.LLAST * (D6 - :newAccInputHash6) = 0;
    Global.LLAST * (D7 - :newAccInputHash7) = 0;

    public localExitRoot0 = E0(%N-1);
    public localExitRoot1 = E1(%N-1);
    public localExitRoot2 = E2(%N-1);
    public localExitRoot3 = E3(%N-1);
    public localExitRoot4 = E4(%N-1);
    public localExitRoot5 = E5(%N-1);
    public localExitRoot6 = E6(%N-1);
    public localExitRoot7 = E7(%N-1);
    Global.LLAST * (E0 - :localExitRoot0) = 0;
    Global.LLAST * (E1 - :localExitRoot1) = 0;
    Global.LLAST * (E2 - :localExitRoot2) = 0;
    Global.LLAST * (E3 - :localExitRoot3) = 0;
    Global.LLAST * (E4 - :localExitRoot4) = 0;
    Global.LLAST * (E5 - :localExitRoot5) = 0;
    Global.LLAST * (E6 - :localExitRoot6) = 0;
    Global.LLAST * (E7 - :localExitRoot7) = 0;

    public newBatchNum = PC(%N-1);
    Global.LLAST * (PC - :newBatchNum) = 0;

    pol commit sKeyI[4];
    pol commit sKey[4];

    cntArith' = cntArith*(1-Global.L1) + arith;
    cntBinary' = cntBinary*(1-Global.L1) + bin;
    cntKeccakF' = cntKeccakF*(1-Global.L1) + incCounter*hashKDigest;
    cntPaddingPG' = cntPaddingPG*(1-Global.L1) + hashPDigest*incCounter;
    cntPoseidonG' = cntPoseidonG*(1-Global.L1) + (hashPDigest + sRD + sWR) * incCounter;
    cntMemAlign' = cntMemAlign*(1-Global.L1) + memAlign;

