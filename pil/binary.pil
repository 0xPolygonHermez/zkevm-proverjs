/*
    PLOOKUP OPERATIONS
    ==================
    PIL State Machine that compute 256 bits operations:
        - [X] ADD   (OPCODE = 0)
        - [X] SUB   (OPCODE = 1)
        - [X] LT    (OPCODE = 2)
        - [X] SLT   (OPCODE = 3)
        - [X] EQ    (OPCODE = 4)
        - [X] AND   (OPCODE = 5)
        - [X] OR    (OPCODE = 6)
        - [X] XOR   (OPCODE = 7)
*/

include "global.pil";

namespace Binary(%N);

//  ##############################################################
    //  CONSTANT POLINOMIALS
    //  ##############################################################
    //  Plockup polinomials
    //  ==============================================================
    //  ==== IN ====
    //  P_OPCODE         (3  bits) Operation code
    //  P_CIN            (1  bits) Carry in
    //  P_LAST           (1  bits) Last byte
    //  Global.BYTE_2A   (8  bits) Input A
    //  Global.BYTE      (8  bits) Input B
    //  ==== OUT ======
    //  P_C         (8 bits) Output C
    //  P_COUT      (1  bits) Carry out
    //  P_USE_CARRY (1  bits) Carry out
    //  ==== TOTAL ====
    //  3 + 1 + 1 + 8 + 8 = 21 bits
    //  ==============================================================
    //          | 0   | 1       | 2   | 3 ...
    //  ==============================================================
    //  FACTOR0 | 0x1 | 0x10000 | 0x0 | 0x0     | 0x1 | 0x10000 | 0x0 | 0x0 | ....
    //  FACTOR1 | 0x0 | 0x0     | 0x1 | 0x10000 | 0x0 | 0x0     | 0x1 | 0x10000 | .....
    pol constant P_OPCODE, P_CIN, P_LAST, P_USE_CARRY;
    pol constant P_C, P_COUT;

    pol RESET = Global.CLK8[0] + Global.CLK8[4];
    pol constant FACTOR[2];
    pol constant P_OP32BITS;


    // ############################################################
    // COMMIT POLINOMIALS
    // ############################################################
    // opcode = (2  bits) Operation code
    // ============================================================
    // a0-a7, a0-a7, a0-a7
    // 256 bits operations -> 32 Bytes / 4 Bytes (per registry) ->
    //          8 Registries
    // ============================================================
    // freeInA, freeInB, freeInC -> 1 Byte input
    // ============================================================
    // cIn -> Carry In ; cOut -> Carry Out ; lCIn -> Latch Carry in
    // ============================================================
    pol commit freeInA[2], freeInB[2], freeInC[2];
    pol commit a[2], b[2], c[2];
    pol commit opcode;
    pol commit cIn, cMiddle, cOut;
    pol commit lCout,lOpcode;

    pol commit useCarry;
    pol commit resultBinOp;
    pol commit resultValidRange;

    (1 - RESET) * resultBinOp = 0;
    (1 - RESET) * resultValidRange = 0;

    resultBinOp * (1-resultBinOp) = 0;
    resultValidRange * (1-resultValidRange) = 0;
    resultValidRange * resultBinOp = 0;

    (opcode' - opcode) * ( 1 - RESET' ) = 0;

    cIn' = cOut * ( 1 - RESET' );

    lCout' = cOut;
    lOpcode' = opcode;

    // current operation is 32-bits
    pol commit op32bits;

    // CLK8[0] Byte 0, Byte 1
    // CLK8[1] Byte 2, Byte 3
    // CLK8[2] Byte 4, Byte 5 |
    // CLK8[3] Byte 6, Byte 7 | zero on 32 bits operations

    // Global.CLK8[2] + Global.CLK8[6]
    {op32bits * (Global.CLK8[2] + Global.CLK8[3] + Global.CLK8[6] + Global.CLK8[7]), opcode, freeInA[0], freeInB[0], cIn, 0, freeInC[0], cMiddle, op32bits} in {P_LAST, P_OPCODE, Global.BYTE_2A, Global.BYTE, P_CIN, P_USE_CARRY, P_C, P_COUT, P_OP32BITS};
    {op32bits * (Global.CLK8[2] + Global.CLK8[6]) + resultValidRange' + resultBinOp', opcode, freeInA[1], freeInB[1], cMiddle, useCarry ,freeInC[1], cOut, op32bits} in {P_LAST, P_OPCODE, Global.BYTE_2A, Global.BYTE, P_CIN, P_USE_CARRY, P_C, P_COUT, P_OP32BITS};

    a[0]' = a[0] * (1 - RESET) + freeInA[0] * FACTOR[0] + 256 * freeInA[1] * FACTOR[0];
    a[1]' = a[1] * (1 - RESET) + freeInA[0] * FACTOR[1] + 256 * freeInA[1] * FACTOR[1];


    b[0]' = b[0] * (1 - RESET) + freeInB[0] * FACTOR[0] + 256 * freeInB[1] * FACTOR[0];
    b[1]' = b[1] * (1 - RESET) + freeInB[0] * FACTOR[1] + 256 * freeInB[1] * FACTOR[1];


    pol c0Temp = c[0] * (1 - RESET) + freeInC[0] * FACTOR[0] + 256 * freeInC[1] * FACTOR[0];
    c[0]' = useCarry * (cOut - c0Temp ) + c0Temp;

    pol c1Temp = c[1] * (1 - RESET) + freeInC[0] * FACTOR[1] + 256 * freeInC[1] * FACTOR[1];
    c[1]' = (1 - useCarry) * c1Temp;
