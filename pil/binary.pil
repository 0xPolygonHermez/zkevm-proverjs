/*
    PLOOKUP OPERATIONS
    ==================
    PIL State Machine that compute 256 bits operations:
        - [X] ADD   (OPCODE = 0)
        - [X] SUB   (OPCODE = 1)
        - [X] LT    (OPCODE = 2)
        - [X] SLT   (OPCODE = 3)
        - [X] EQ    (OPCODE = 4)
        - [X] AND   (OPCODE = 5)
        - [X] OR    (OPCODE = 6)
        - [X] XOR   (OPCODE = 7)
        - [X] LT4   (OPCODE = 8)
*/

include "global.pil";

namespace Binary(%N);

//  ##############################################################
    //  CONSTANT POLINOMIALS
    //  ##############################################################
    //  Plockup polinomials
    //  ==============================================================
    //  ==== IN ====
    //  P_OPCODE         (4  bits) Operation code
    //  P_CIN            (1  bits) Carry in
    //  P_LAST           (1  bits) Last byte
    //  Global.BYTE_2A   (8  bits) Input A
    //  Global.BYTE      (8  bits) Input B
    //  ==== OUT ======
    //  P_C         (8 bits) Output C
    //  P_FLAGS     (4  bits) Carry out, use Carry, use PreviousLt4, reset4
    //  ==== TOTAL ====
    //  4 + 1 + 1 + 8 + 8 = 22 bits
    //  ==============================================================
    //  NAME    | 0 | 1 | 2 | 3 | ... | 32 |
    //  ==============================================================
    //  FACTOR0 | 0x1 | 0x10000 | 0x0 | 0x0     | ... | 0x0 | 0x0
    //  FACTOR1 | 0x0 | 0x0     | 0x1 | 0x10000 | ... | 0x0 | 0x0
    //  ...
    //  FACTOR7 | 0x0 | 0x0     | 0x0 | 0x0     | ... | 0x1 | 0x10000
    pol constant P_OPCODE, P_CIN, P_LAST;
    pol constant P_C, P_FLAGS;

    pol RESET = Global.CLK32[0] + Global.CLK32[16];
    pol constant FACTOR[8];

    // ############################################################
    // COMMIT POLINOMIALS
    // ############################################################
    // opcode = (2  bits) Operation code
    // ============================================================
    // a0-a7, a0-a7, a0-a7
    // 256 bits operations -> 32 Bytes / 4 Bytes (per registry) ->
    //          8 Registries
    // ============================================================
    // freeInA, freeInB, freeInC -> 1 Byte input
    // ============================================================
    // cIn -> Carry In ; cOut -> Carry Out ; lCIn -> Latch Carry in
    // ============================================================
    pol commit freeInA[2], freeInB[2], freeInC[2];
    pol commit a[8], b[8], c[8];
    pol commit opcode;
    pol commit cIn, cMiddle, cOut;
    pol commit lCout,lOpcode;


    //  LT4 (opcode = 8)
    //
    //  Instruction operate over 4 chunks of 64 bits, divide the 256-bit values on 4 chunks of 64 bits and verifies
    //  that ALL "a" chunks are LESS THAN "b" chunks, one to one (first chunk a vs first chunk b, second chunch a vs second chunk b,...)
    //
    //  examples:
    //      0x0FFF...FFFF 0FFF...FFFF 0FFF...FFFF 0FFF...FFFF LT4 0xFFFF...FFFF FFFF...FFFF FFFF...FFFF FFFF...FFFF = 1
    //      0x0FFF...FFFF 0FFF...FFFF FFFF...FFFF 0FFF...FFFF LT4 0xFFFF...FFFF FFFF...FFFF FFFF...FFFF FFFF...FFFF = 0
    //
    //  usePreviousAreLt4: (binary value *) to indicate use previousAreLt4 as result, only active in last byte, on LT4 operation and cOut = 1.
    //                     if cOut is 1, means last chunk is LT, for this reason result is if previous are LT too.
    //                     if cOut is 0, means last chunk isn't LT, don't matter previous LT, result is cOut, 0.
    //
    //  previousAreLt4:    (binary value **) to indicate if previous LT chunk comparations are LT or no, only use for three firsts chunks.
    //                     Before first comparation is 0, and is set with result of first comparation. After that value is propagated,
    //                     on next comparations second and third chunks, result of LT (cOut) is multiplied by this value, to force zero
    //                     if previous or current result of LT are zero, as AND operator.
    //
    //                          first chunk --> previousAreLt4 = cOut
    //                         second chunk --> previousAreLt4 = previousAreLt4 * cOut
    //                          third chunk --> previousAreLt4 = previousAreLt4 * cOut
    //                         fourth chunk --> no affects to previousAreLt4
    //
    // reset4             (binary value *) flag to indicate that carry was reset each 4 clocks
    //
    // NOTE: (*) to validate usePreviousAreLt4, reset4 uses a composition (reset4 * 4 + usePreviousAreLt4 * 2 + useCarry) over P_FLAGS,
    // MUST check that these THREE pols are binary
    //
    // NOTE: (**) binary is checked by lookup values

    pol commit usePreviousAreLt4;
    pol commit previousAreLt4;
    pol commit reset4;
    pol commit useCarry;

    usePreviousAreLt4 * (1 - usePreviousAreLt4) = 0;
    previousAreLt4 * (1 - previousAreLt4) = 0;
    reset4 * (1 - reset4) = 0;
    useCarry * (1 - useCarry) = 0;

    pol commit resultBinOp;
    pol commit resultValidRange;

    (1 - RESET) * resultBinOp = 0;
    (1 - RESET) * resultValidRange = 0;

    resultBinOp * (1-resultBinOp) = 0;
    resultValidRange * (1-resultValidRange) = 0;
    resultValidRange * resultBinOp = 0;

    (opcode' - opcode) * ( 1 - RESET' ) = 0;

    // RESET = Global.CLK32[0] + Global.CLK32[16];

    pol resetCarry = RESET' + reset4 * (Global.CLK32[3] + Global.CLK32[7] + Global.CLK32[11] +
                                       Global.CLK32[19] + Global.CLK32[23] + Global.CLK32[27]);

    cIn' = cOut * ( 1 - resetCarry );

    // LT4_PROPAGATE (pol constant binary)
    //
    // Each 4 clocks this sm was processed 8 bytes = 64 bits, last clock isn't relevant last clock cOut it's ignored because:
    //
    //   last cout == 0 => means LT4 = 0 (at least last A chunk of 64 isn't less than B, if previous chunks are less than B, it doesn't matter.
    //   last cout == 1 => means last A chuck is less than B, in this path result only deepends of ge4 value.

    pol LT4_PROPAGATE = /* NO 0-2,3 */ +  Global.CLK32[4] + Global.CLK32[5] + Global.CLK32[6] + /* NO 7 */ + Global.CLK32[8] + Global.CLK32[9]
                        + Global.CLK32[10] + /* NO 11 */ + Global.CLK32[12] + Global.CLK32[13] + Global.CLK32[14] + Global.CLK32[15]
                        /* NO 16-18,19 */ +  Global.CLK32[20] + Global.CLK32[21] + Global.CLK32[22] + /* NO 23 */ + Global.CLK32[24] + Global.CLK32[25]
                        + Global.CLK32[26] + /* NO 27 */ + Global.CLK32[28] + Global.CLK32[29] + Global.CLK32[30] + Global.CLK32[31];

    pol cOut23 = (Global.CLK32[7] + Global.CLK32[11] + Global.CLK32[23] + Global.CLK32[27]) * cOut;

    previousAreLt4' = (Global.CLK32[3] + Global.CLK32[19]) * cOut + previousAreLt4 * (LT4_PROPAGATE + cOut23);

    lCout' = cOut + usePreviousAreLt4 * (previousAreLt4 - cOut);
    lOpcode' = opcode;

    {0, opcode, freeInA[0], freeInB[0], cIn, freeInC[0], cMiddle + 8 * reset4}
    in {P_LAST, P_OPCODE, Global.BYTE_2A, Global.BYTE, P_CIN, P_C, P_FLAGS};

    {resultValidRange' + resultBinOp', opcode, freeInA[1], freeInB[1], cMiddle, freeInC[1], cOut + 2 * useCarry + 4 * usePreviousAreLt4 + 8 * reset4}
    in {P_LAST, P_OPCODE, Global.BYTE_2A, Global.BYTE, P_CIN, P_C, P_FLAGS};

    a[0]' = a[0] * (1 - RESET) + freeInA[0] * FACTOR[0] + 256 * freeInA[1] * FACTOR[0];
    a[1]' = a[1] * (1 - RESET) + freeInA[0] * FACTOR[1] + 256 * freeInA[1] * FACTOR[1];
    a[2]' = a[2] * (1 - RESET) + freeInA[0] * FACTOR[2] + 256 * freeInA[1] * FACTOR[2];
    a[3]' = a[3] * (1 - RESET) + freeInA[0] * FACTOR[3] + 256 * freeInA[1] * FACTOR[3];
    a[4]' = a[4] * (1 - RESET) + freeInA[0] * FACTOR[4] + 256 * freeInA[1] * FACTOR[4];
    a[5]' = a[5] * (1 - RESET) + freeInA[0] * FACTOR[5] + 256 * freeInA[1] * FACTOR[5];
    a[6]' = a[6] * (1 - RESET) + freeInA[0] * FACTOR[6] + 256 * freeInA[1] * FACTOR[6];
    a[7]' = a[7] * (1 - RESET) + freeInA[0] * FACTOR[7] + 256 * freeInA[1] * FACTOR[7];

    b[0]' = b[0] * (1 - RESET) + freeInB[0] * FACTOR[0] + 256 * freeInB[1] * FACTOR[0];
    b[1]' = b[1] * (1 - RESET) + freeInB[0] * FACTOR[1] + 256 * freeInB[1] * FACTOR[1];
    b[2]' = b[2] * (1 - RESET) + freeInB[0] * FACTOR[2] + 256 * freeInB[1] * FACTOR[2];
    b[3]' = b[3] * (1 - RESET) + freeInB[0] * FACTOR[3] + 256 * freeInB[1] * FACTOR[3];
    b[4]' = b[4] * (1 - RESET) + freeInB[0] * FACTOR[4] + 256 * freeInB[1] * FACTOR[4];
    b[5]' = b[5] * (1 - RESET) + freeInB[0] * FACTOR[5] + 256 * freeInB[1] * FACTOR[5];
    b[6]' = b[6] * (1 - RESET) + freeInB[0] * FACTOR[6] + 256 * freeInB[1] * FACTOR[6];
    b[7]' = b[7] * (1 - RESET) + freeInB[0] * FACTOR[7] + 256 * freeInB[1] * FACTOR[7];

    pol c0Temp = c[0] * (1 - RESET) + freeInC[0] * FACTOR[0] + 256 * freeInC[1] * FACTOR[0];
    c[0]' = useCarry * (cOut - c0Temp ) + usePreviousAreLt4 * (previousAreLt4 - c0Temp ) + c0Temp;

    c[1]' = c[1] * (1 - RESET) + freeInC[0] * FACTOR[1] + 256 * freeInC[1] * FACTOR[1];
    c[2]' = c[2] * (1 - RESET) + freeInC[0] * FACTOR[2] + 256 * freeInC[1] * FACTOR[2];
    c[3]' = c[3] * (1 - RESET) + freeInC[0] * FACTOR[3] + 256 * freeInC[1] * FACTOR[3];
    c[4]' = c[4] * (1 - RESET) + freeInC[0] * FACTOR[4] + 256 * freeInC[1] * FACTOR[4];
    c[5]' = c[5] * (1 - RESET) + freeInC[0] * FACTOR[5] + 256 * freeInC[1] * FACTOR[5];
    c[6]' = c[6] * (1 - RESET) + freeInC[0] * FACTOR[6] + 256 * freeInC[1] * FACTOR[6];

    pol c7Temp = c[7] * (1 - RESET) + freeInC[0] * FACTOR[7] + 256 * freeInC[1] * FACTOR[7];
    c[7]' = (1 - useCarry - usePreviousAreLt4) * c7Temp;
