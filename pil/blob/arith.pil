
/*
    Equations:

    EQ0:   A(x1) * B(y1) + C(x2) = D (y2) * 2 ** 256 + op (y3)   - selEq[0]

*/
include "../global.pil";

namespace Arith(%N);

    pol constant BYTE2_BIT21;
    pol constant SEL_BYTE2_BIT21;
    pol constant GL_SIGNED_22BITS;

    pol commit x1[16];
    pol commit y1[16];
    pol commit x2[16];
    pol commit y2[16];
    pol commit x3[16];
    pol commit y3[16];

    pol commit q0[16];
    pol commit q1[16];

    pol commit result;
    result * (1 - result) = 0;

    // FEATURE:
    //      · Verify that the x1,x2 are different when adding different elliptic curve points (EQ1,EQ3,EQ4).

    // PRE:
    //      · x1,x2,y1,y2 are alias free for EQ[1..10]

    // In the first 16 clocks of 32-clock cycle we have: x2[0]-x1[0], x2[1]-x1[1], ..., x2[15]-x1[15]
    // In the last  16 clocks of 32-clock cycle we set all values to 0.
    pol xDeltaChunk = x2[0]*Global.CLK32[0] + x2[1]*Global.CLK32[1] + x2[2]*Global.CLK32[2] + x2[3]*Global.CLK32[3] + x2[4]*Global.CLK32[4] + x2[5]*Global.CLK32[5] + x2[6]*Global.CLK32[6] + x2[7]*Global.CLK32[7]
	   + x2[8]*Global.CLK32[8] + x2[9]*Global.CLK32[9] + x2[10]*Global.CLK32[10] + x2[11]*Global.CLK32[11] + x2[12]*Global.CLK32[12] + x2[13]*Global.CLK32[13] + x2[14]*Global.CLK32[14] + x2[15]*Global.CLK32[15]
                    - x1[0]*Global.CLK32[0] - x1[1]*Global.CLK32[1] - x1[2]*Global.CLK32[2] - x1[3]*Global.CLK32[3] - x1[4]*Global.CLK32[4] - x1[5]*Global.CLK32[5] - x1[6]*Global.CLK32[6] - x1[7]*Global.CLK32[7]
	   - x1[8]*Global.CLK32[8] - x1[9]*Global.CLK32[9] - x1[10]*Global.CLK32[10] - x1[11]*Global.CLK32[11] - x1[12]*Global.CLK32[12] - x1[13]*Global.CLK32[13] - x1[14]*Global.CLK32[14] - x1[15]*Global.CLK32[15];

    // Inverse of current xDeltaChunk. Used to verify that xDeltaChunk is ≠ 0, i.e., when x1[i] ≠ x2[i].
    // This inverse only needs to be calculated one time by cycle.
    pol commit xDeltaChunkInverse;

    // Intermediate pol to indicate that x1 is different from x2 in the current chunk.
    // IMPORTANT: xChunkDifferent == 1 ==> x1[i] ≠ x2[i]
    //            xChunkDifferent == 0 does not imply anything, x1[i] ≠ x2[i] or x1[i] == x2[i].
    // xChunkDifferent was binary, only when xDeltaChunkInverse === inv(xDeltaChunk), its value is 1.
    pol xChunkDifferent = xDeltaChunk * xDeltaChunkInverse;

    // Important, binary constraint
    xChunkDifferent * (1 - xChunkDifferent) = 0;

    // xDeltaChunk  xDeltaChunkInverse  xChunkDifferent
    // -----------  ------------------  -----------------------
    //       0             any          0 * any = 0            OK (A)
    //   x (≠ 0)           0            x * 0 = 0              OK (B)
    //   x (≠ 0)         inv(x)         x * inv(x) = 1         OK (C)
    //   x (≠ 0)      y ≠ {inv(x),0}    x * y = k (≠ 0,1)      FAILS (D)
    //
    // (A) and (C) are the standard cases, but (B) was introduced to avoid calculate the inverse when
    // it is not necessary. xChunkDifferent is well calculed because it's 1 only when x ≠ 0 and inverse
    // it's calculated.

    // xAreDifferent is used to indicate that in current clock we knows that x1 and x2 are different
    pol commit xAreDifferent;

    // Binary constraint
    xAreDifferent * (1 - xAreDifferent) = 0;

    // In first clock of 16-clock cycle, xAreDifferent should not be considered
    // Constraint to force next value of xAreDifferent

    xAreDifferent' = xAreDifferent * (1 - Global.CLK32[0] - Global.CLK32[16]) + xChunkDifferent;

    // xAreDifferent  CLK0+CLK16  xChunkDifferent  xAreDifferent'
    // -------------  ----------  ---------------  --------------
    //        0           0              0            0 OK
    //        0           0              1            1 OK
    //        0           1              0            1 OK
    //        0           1              1            1 OK
    //        1           0              0            1 OK
    //        1           0              1            2 FAILS (A)
    //        1           1              0            1 OK
    //        1           1              1            1 OK
    //
    // xChunkDifferent = 0 ==> (x2[i] - x1[i]) = 0
    // xChunkDifferent = 1 ==> (x2[i] - x1[i]) ≠ 0  ==> x1 and x2 are different
    // (A) forbidden, executor must control this situation, because expending an
    // unnecessary inverse.

    (xAreDifferent - selEq[1]) * Global.CLK32[16] = 0;

    // COST:   2 commit, 2 im, 0 constant, 4 constraints


    // FEATURE:
    //
    // Verify that the result of Secp256k1 addition (EQ1/EQ2,EQ3,EQ4) is free of aliases, i.e. that x3,y3 ∊ [0, p-1]
    // Verify that the result of 𝔽p² = 𝔽p[u]/(u² + 1) multiplication, addition and subtraction (EQ5,EQ6 || EQ7,EQ8 || EQ9,EQ10)
    // is free of aliases, i.e. that x3,y3 ∊ [0, p-1]
    //
    // Here, p refers, respectively, to the base field order of any of the following elliptic curves:
    //
    // Secp256k1:  0xFFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFE FFFF FC2F
    // BN254:      0x3064 4E72 E131 A029 B850 45B6 8181 585D 9781 6A91 6871 CA8D 3C20 8C16 D87C FD47
    //
    // Strategy: Compare from the most significant chunk to the least significant chunk of x3 and y3 (A). On each chunk,
    // chunkLtPrime indicates whether the chunk is smaller than the FPEC chunk. valueLtPrime indicates if any
    // previous chunk was smaller than the FPEC chunk, which implies that x3 and y3 are smaller than prime.
    //
    // (A) In the first 16 clocks of 32-clock cycle, it is verified that x3 ∊ [0, p-1]
    //     In the last  16 clocks of 32-clock cycle, it is verified that y3 ∊ [0, p-1]
    //
    //    k x chunks equals (B) ==> 1 x chunk lower ==> (15 - k) x any 16 bits value
    //
    // (B) I must verify that the chunks are equal or smaller, never greater at this point. If a malicious prover (MP)
    // claims they are equal when they are actually smaller, that's its issue. At the end, there must be at least one
    // smaller chunk to ensure a smaller value.
    //
    //    k x chunks = chunkPrime ==> 1 x chunk ∊ [0, chunkPrime-1] ==> (15 - k) x chunk ∊ [0, 0xFFFF]
    //
    //                             CLK0    CLK1    CLK2    CLK3    CLK4    CLK5    CLK6    CLK7    CLK8    CLK9   CLK10   CLK11   CLK12   CLK13   CLK14   CLK15
    //   chunkPrime(0..15)     = [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF, 0xFC2F]
    //   chunkPrime(0..15) - 1 = [0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFD, 0xFFFE, 0xFC2E]
    //   chunkPrime(0..15)     = [0x3064, 0x4e72, 0xe131, 0xa029, 0xb850, 0x45b6, 0x8181, 0x585d, 0x9781, 0x6a91, 0x6871, 0xca8d, 0x3c20, 0x8c16, 0xd87c, 0xfd47]
    //   chunkPrime(0..15) - 1 = [0x3063, 0x4e71, 0xe130, 0xa028, 0xb84f, 0x45b5, 0x8180, 0x585c, 0x9780, 0x6a90, 0x6870, 0xca8c, 0x3c1f, 0x8c15, 0xd87b, 0xfd46]
    //
    //   different Secp256k1 prime chunks [0xFFFF, 0xFFFE, 0xFFFD, 0xFC2F, 0xFC2E]
    //   different BN254 prime chunks [0x3064, 0x4e72, 0xe131, 0xa029, 0xb850, 0x45b6, 0x8181, 0x585d, 0x9781, 0x6a91, 0x6871, 0xca8d, 0x3c20, 0x8c16, 0xd87c, 0xfd47,
    //                                 0x3063, 0x4e71, 0xe130, 0xa028, 0xb84f, 0x45b5, 0x8180, 0x585c, 0x9780, 0x6a90, 0x6870, 0xca8c, 0x3c1f, 0x8c15, 0xd87b, 0xfd46]

    //              CLK0   CLK1  CLK2  CLK3  CLK4  CLK5  CLK6  CLK7  CLK8  CLK9  CLK10 CLK11 CLK12 CLK13 CLK14 CLK15
    // Secp256k1:  0xFFFF  FFFF  FFFF  FFFF  FFFF  FFFF  FFFF  FFFF  FFFF  FFFF  FFFF  FFFF  FFFF  fffe  FFFF  fc2f
    // BN254:      0x3064  4e72  e131  a029  b850  45b6  8181  585d  9781  6a91  6871  ca8d  3c20  8c16  d87c  fd47
    //
    //                 RANGE_SEL  P_RANGE     BASE
    //              /      0      [0,0xFFFF]  CLK0, ..., CLK12, CLK14
    //              |      1      [0,0xFFFE]  CLK13
    //   Secp256k1  |      2      [0,0xFFFD]
    //              |      3      [0,0xFC2F]  CLK15
    //              \      4      [0,0xFC2E]
    //              /      5      [0,0x3064]  CLK0
    //              |      6      [0,0x3063]
    //              |      7      [0,0x4e72]  CLK1
    //              |      8      [0,0x4e71]
    //              |      9      [0,0xe131]  CLK2
    //              |     10      [0,0xe130]
    //              |     11      [0,0xa029]  CLK3
    //              |     12      [0,0xa028]
    //              |     13      [0,0xb850]  CLK4
    //              |     14      [0,0xb84f]
    //              |     15      [0,0x45b6]  CLK5
    //              |     16      [0,0x45b5]
    //              |     17      [0,0x8181]  CLK6
    //              |     18      [0,0x8180]
    //              |     19      [0,0x585d]  CLK7
    //    BN254     |     20      [0,0x585c]
    //              |     21      [0,0x9781]  CLK8
    //              |     22      [0,0x9780]
    //              |     23      [0,0x6a91]  CLK9
    //              |     24      [0,0x6a90]
    //              |     25      [0,0x6871]  CLK10
    //              |     26      [0,0x6870]
    //              |     27      [0,0xca8d]  CLK11
    //              |     28      [0,0xca8c]
    //              |     29      [0,0x3c20]  CLK12
    //              |     30      [0,0x3c1f]
    //              |     31      [0,0x8c16]  CLK13
    //              |     32      [0,0x8c15]
    //              |     33      [0,0xd87c]  CLK14
    //              |     34      [0,0xd87b]
    //              |     35      [0,0xfd47]  CLK15
    //              \     36      [0,0xfd46]
    //
    //   pRangeSecp256k1 = (CLK13 + 3 * CLK15 + chunkLtPrime) * selEq[3]
    //   pRangeBN254 = (5 * CLK0 + 7 * CLK1 + 9 * CLK2 + 11 * CLK3 + 13 * CLK4 + 15 * CLK5 + 17 * CLK6 + 19 * CLK7 + 21 * CLK8 + 23 * CLK9 + 25 * CLK10 + 27 * CLK11 + 29 * CLK12 + 31 * CLK13 + 33 * CLK14 + 35 * CLK15) * (selEq[4] + selEq[5] + selEq[6])
    //   pRange =  (pRangeSecp256k1 + pRangeBN254) * (1 - valueLtPrime)
    //
    //   CLK                pRange                            pRange
    //           [selEq[3] = 1, chunkLtPrime = 0]   [selEq[3] = 1, chunkLtPrime = 1]
    //
    //
    //   0              0 + 3 * 0 + 0 = 0               0 + 3 * 0 + 1 = 1
    //   :                      :                               :
    //   12             0 + 3 * 0 + 0 = 0               0 + 3 * 0 + 1 = 1
    //   13             1 + 3 * 0 + 0 = 1               1 + 3 * 0 + 1 = 2
    //   14             0 + 3 * 0 + 0 = 0               0 + 3 * 0 + 1 = 1
    //   15             0 + 3 * 1 + 0 = 3               0 + 3 * 1 + 1 = 4
    //
    //   valueLtPrime' = valueLtPrime * (1 - CLK0 - CLK16) + chunkLtPrime
    //
    //   valueLtPrime  chunkLtPrime  CLK0+CLK16  valueLtPrime'
    //
    //         0             0           0            0            OK
    //         0             1           0            1            OK
    //         1             0           0            1            OK
    //         1             1           0            2            FAILS, valueLtPrime not binary (D)
    //
    //         0             0           1            0            OK
    //         0             1           1            1            OK
    //         1             0           1            0            OK
    //         1             1           1            1            OK (E)
    //
    //   (D) when valueLtPrime = 0 ==> chunkLtPrime must be zero, if not it FAILS
    //   (E) on clocks 0 and 16, current value of valueLtPrime isn't considered
    //
    //
    //    Examples (Secp256k1 prime):
    //                                ┌──────── pRange
    //              ┌── max_value     │  ┌───── chunkLtPrime
    //              │     ┌─ example  │  │  ┌── valueLtPrime
    //              │     │           │  │  │
    //    CLK0    0xFFFF  0xFFFF      0  0  0
    //    CLK1    0xFFFF  0xFF00      1  1  0  // RANGE [0, 0xFFFE]
    //    CLK2    0xFFFF  0x0000      0  0  1
    //    CLK3    0xFFFF  0x0000      0  0  1
    //    CLK4    0xFFFF  0xFFFF      0  0  1
    //    :
    //    CLK15   0xFC2F  0xFFFF      0  0  1
    //    CLK16   0xFFFF  0xFFFF      0  0  1
    //
    //
    //                                ┌──────── pRange
    //              ┌── max_value     │  ┌───── chunkLtPrime
    //              │     ┌─ example  │  │  ┌── valueLtPrime
    //              │     │           │  │  │
    //    CLK0    0xFFFF  0xFFFF      0  0  0
    //    CLK1    0xFFFF  0xFFFF      0  0  0
    //    CLK2    0xFFFF  0xFFFF      0  0  0
    //    :
    //    CLK12   0xFFFF  0xFFFF      0  0  0
    //    CLK13   0xFFFE  0xFFFF      1  0  0    // CLK13 == 1 RANGE [0, 0xFFFE]
    //    CLK14   0xFFFF  0xFFFF      0  0  0
    //    CLK15   0xFC2F  0xFC00      4  1  0    // CLK15 == 1 RANGE [0, 0xFC2F]
    //    CLK16   0xFFFF  0xFFFF      0  0  1

    // valueLtPrime indicates whether, at this point, we know that the value is smaller than the prime.
    // If selEq[3],selEq[4],selEq[5],selEq[6] = 0, it must be 0.
    pol commit valueLtPrime;

    // chunkLtPrime indicates whether the current value chunk is smaller than the prime chunk.
    // If selEq[3],selEq[4],selEq[5],selEq[6] = 0 or valueLtPrime = 1, it must be 0.
    pol commit chunkLtPrime;

    // binary constraints
    chunkLtPrime * (1 - chunkLtPrime) = 0;
    valueLtPrime * (1 - valueLtPrime) = 0;

    // This constraint applies to the next value of valueLtPrime. At the beginning of each 16-clock cycle,
    // valueLtPrime is ignored because it refers to the previous value.
    valueLtPrime' = valueLtPrime * (1 - Global.CLK32[0] - Global.CLK32[16]) + chunkLtPrime;

    // This constraint is used to verify (and to enforce) that at the end of a 16-clock cycle, valueLtPrime is equal to 1.
    // This constraint is applied when one of selEq[3],selEq[4],selEq[5],selEq[6] equals 1.
    (valueLtPrime' - selEq[3] - selEq[4] - selEq[5] - selEq[6]) * (Global.CLK32[15] + Global.CLK32[31]) = 0;

    pol constant RANGE_SEL; // 0:2**16,
                            // 1:2**16-1,0
                            // 2:2**16-2,0:2
                            // 3:2**16-976,0:976
                            // 4:2**16-977,0:977
                            // -----------------------------------------------------------------------
                            // 5:2**16-53147,0:53147    16:2**16-47688,0:47688  27:2**16-13682,0:13682
                            // 6:2**16-53146,0:53146    17:2**16-32382,0:32382  28:2**16-13681,0:13681
                            // 7:2**16-45453,0:45453    18:2**16-32381,0:32381  29:2**16-50143,0:50143
                            // 8:2**16-45452,0:45452    19:2**16-42914,0:42914  30:2**16-50142,0:50142
                            // 9:2**16-7886,0:7886      20:2**16-42913,0:42913  31:2**16-29673,0:29673
                            // 10:2**16-7885,0:7885     21:2**16-26750,0:26750  32:2**16-29672,0:29672
                            // 11:2**16-24534,0:24534   22:2**16-26749,0:26749  33:2**16-10115,0:10115
                            // 12:2**16-24533,0:24533   23:2**16-38254,0:38254  34:2**16-10114,0:10114
                            // 13:2**16-18351,0:18351   24:2**16-38253,0:38253  35:2**16-696,0:696
                            // 14:2**16-18350,0:18350   25:2**16-38798,0:38798  36:2**16-695,0:695
                            // 15:2**16-47689,0:47689   26:2**16-38797,0:38797

    // range to be looked up for each chunk and for each prime
    pol pRangeSecp256k1 = (Global.CLK32[13] + Global.CLK32[29] + 3 * (Global.CLK32[15] + Global.CLK32[31]) + chunkLtPrime) * selEq[3];
    pol pRangeBN254 =     (5 * (Global.CLK32[0] + Global.CLK32[16]) + 7 * (Global.CLK32[1] + Global.CLK32[17]) + 9 * (Global.CLK32[2] + Global.CLK32[18])
                        + 11 * (Global.CLK32[3] + Global.CLK32[19]) + 13 * (Global.CLK32[4] + Global.CLK32[20]) + 15 * (Global.CLK32[5] + Global.CLK32[21])
                        + 17 * (Global.CLK32[6] + Global.CLK32[22]) + 19 * (Global.CLK32[7] + Global.CLK32[23]) + 21 * (Global.CLK32[8] + Global.CLK32[24])
                        + 23 * (Global.CLK32[9] + Global.CLK32[25]) + 25 * (Global.CLK32[10] + Global.CLK32[26]) + 27 * (Global.CLK32[11] + Global.CLK32[27])
                        + 29 * (Global.CLK32[12] + Global.CLK32[28]) + 31 * (Global.CLK32[13] + Global.CLK32[29]) + 33 * (Global.CLK32[14] + Global.CLK32[30])
                        + 35 * (Global.CLK32[15] + Global.CLK32[31]) + chunkLtPrime) * (selEq[4] + selEq[5] + selEq[6]);

    // lookup with RANGE_SEL as first column and BYTE2 as second column
    {(pRangeSecp256k1 + pRangeBN254) * (1 - valueLtPrime), x3[15]*Global.CLK32[0] + x3[14]*Global.CLK32[1] + x3[13]*Global.CLK32[2] + x3[12]*Global.CLK32[3] + x3[11]*Global.CLK32[4] + x3[10]*Global.CLK32[5] + x3[9]*Global.CLK32[6] + x3[8]*Global.CLK32[7]
	   + x3[7]*Global.CLK32[8] + x3[6]*Global.CLK32[9] + x3[5]*Global.CLK32[10] + x3[4]*Global.CLK32[11] + x3[3]*Global.CLK32[12] + x3[2]*Global.CLK32[13] + x3[1]*Global.CLK32[14] + x3[0]*Global.CLK32[15]
	   + y3[15]*Global.CLK32[16] + y3[14]*Global.CLK32[17] + y3[13]*Global.CLK32[18] + y3[12]*Global.CLK32[19] + y3[11]*Global.CLK32[20] + y3[10]*Global.CLK32[21] + y3[9]*Global.CLK32[22] + y3[8]*Global.CLK32[23]
	   + y3[7]*Global.CLK32[24] + y3[6]*Global.CLK32[25] + y3[5]*Global.CLK32[26] + y3[4]*Global.CLK32[27] + y3[3]*Global.CLK32[28] + y3[2]*Global.CLK32[29] + y3[1]*Global.CLK32[30] + y3[0]*Global.CLK32[31]} in {RANGE_SEL, Global.BYTE2};

    /****
    *
    * LATCH POLS: x1,y1,x2,y2,x3,y3,s,q0,q1,q2
    *
    *****/

    x1[0]' * (1-Global.CLK32[31]) = x1[0] * (1-Global.CLK32[31]);
	x1[1]' * (1-Global.CLK32[31]) = x1[1] * (1-Global.CLK32[31]);
	x1[2]' * (1-Global.CLK32[31]) = x1[2] * (1-Global.CLK32[31]);
	x1[3]' * (1-Global.CLK32[31]) = x1[3] * (1-Global.CLK32[31]);
	x1[4]' * (1-Global.CLK32[31]) = x1[4] * (1-Global.CLK32[31]);
	x1[5]' * (1-Global.CLK32[31]) = x1[5] * (1-Global.CLK32[31]);
	x1[6]' * (1-Global.CLK32[31]) = x1[6] * (1-Global.CLK32[31]);
	x1[7]' * (1-Global.CLK32[31]) = x1[7] * (1-Global.CLK32[31]);
	x1[8]' * (1-Global.CLK32[31]) = x1[8] * (1-Global.CLK32[31]);
	x1[9]' * (1-Global.CLK32[31]) = x1[9] * (1-Global.CLK32[31]);
	x1[10]' * (1-Global.CLK32[31]) = x1[10] * (1-Global.CLK32[31]);
	x1[11]' * (1-Global.CLK32[31]) = x1[11] * (1-Global.CLK32[31]);
	x1[12]' * (1-Global.CLK32[31]) = x1[12] * (1-Global.CLK32[31]);
	x1[13]' * (1-Global.CLK32[31]) = x1[13] * (1-Global.CLK32[31]);
	x1[14]' * (1-Global.CLK32[31]) = x1[14] * (1-Global.CLK32[31]);
	x1[15]' * (1-Global.CLK32[31]) = x1[15] * (1-Global.CLK32[31]);


    y1[0]' * (1-Global.CLK32[31]) = y1[0] * (1-Global.CLK32[31]);
	y1[1]' * (1-Global.CLK32[31]) = y1[1] * (1-Global.CLK32[31]);
	y1[2]' * (1-Global.CLK32[31]) = y1[2] * (1-Global.CLK32[31]);
	y1[3]' * (1-Global.CLK32[31]) = y1[3] * (1-Global.CLK32[31]);
	y1[4]' * (1-Global.CLK32[31]) = y1[4] * (1-Global.CLK32[31]);
	y1[5]' * (1-Global.CLK32[31]) = y1[5] * (1-Global.CLK32[31]);
	y1[6]' * (1-Global.CLK32[31]) = y1[6] * (1-Global.CLK32[31]);
	y1[7]' * (1-Global.CLK32[31]) = y1[7] * (1-Global.CLK32[31]);
	y1[8]' * (1-Global.CLK32[31]) = y1[8] * (1-Global.CLK32[31]);
	y1[9]' * (1-Global.CLK32[31]) = y1[9] * (1-Global.CLK32[31]);
	y1[10]' * (1-Global.CLK32[31]) = y1[10] * (1-Global.CLK32[31]);
	y1[11]' * (1-Global.CLK32[31]) = y1[11] * (1-Global.CLK32[31]);
	y1[12]' * (1-Global.CLK32[31]) = y1[12] * (1-Global.CLK32[31]);
	y1[13]' * (1-Global.CLK32[31]) = y1[13] * (1-Global.CLK32[31]);
	y1[14]' * (1-Global.CLK32[31]) = y1[14] * (1-Global.CLK32[31]);
	y1[15]' * (1-Global.CLK32[31]) = y1[15] * (1-Global.CLK32[31]);


    x2[0]' * (1-Global.CLK32[31]) = x2[0] * (1-Global.CLK32[31]);
	x2[1]' * (1-Global.CLK32[31]) = x2[1] * (1-Global.CLK32[31]);
	x2[2]' * (1-Global.CLK32[31]) = x2[2] * (1-Global.CLK32[31]);
	x2[3]' * (1-Global.CLK32[31]) = x2[3] * (1-Global.CLK32[31]);
	x2[4]' * (1-Global.CLK32[31]) = x2[4] * (1-Global.CLK32[31]);
	x2[5]' * (1-Global.CLK32[31]) = x2[5] * (1-Global.CLK32[31]);
	x2[6]' * (1-Global.CLK32[31]) = x2[6] * (1-Global.CLK32[31]);
	x2[7]' * (1-Global.CLK32[31]) = x2[7] * (1-Global.CLK32[31]);
	x2[8]' * (1-Global.CLK32[31]) = x2[8] * (1-Global.CLK32[31]);
	x2[9]' * (1-Global.CLK32[31]) = x2[9] * (1-Global.CLK32[31]);
	x2[10]' * (1-Global.CLK32[31]) = x2[10] * (1-Global.CLK32[31]);
	x2[11]' * (1-Global.CLK32[31]) = x2[11] * (1-Global.CLK32[31]);
	x2[12]' * (1-Global.CLK32[31]) = x2[12] * (1-Global.CLK32[31]);
	x2[13]' * (1-Global.CLK32[31]) = x2[13] * (1-Global.CLK32[31]);
	x2[14]' * (1-Global.CLK32[31]) = x2[14] * (1-Global.CLK32[31]);
	x2[15]' * (1-Global.CLK32[31]) = x2[15] * (1-Global.CLK32[31]);


    y2[0]' * (1-Global.CLK32[31]) = y2[0] * (1-Global.CLK32[31]);
	y2[1]' * (1-Global.CLK32[31]) = y2[1] * (1-Global.CLK32[31]);
	y2[2]' * (1-Global.CLK32[31]) = y2[2] * (1-Global.CLK32[31]);
	y2[3]' * (1-Global.CLK32[31]) = y2[3] * (1-Global.CLK32[31]);
	y2[4]' * (1-Global.CLK32[31]) = y2[4] * (1-Global.CLK32[31]);
	y2[5]' * (1-Global.CLK32[31]) = y2[5] * (1-Global.CLK32[31]);
	y2[6]' * (1-Global.CLK32[31]) = y2[6] * (1-Global.CLK32[31]);
	y2[7]' * (1-Global.CLK32[31]) = y2[7] * (1-Global.CLK32[31]);
	y2[8]' * (1-Global.CLK32[31]) = y2[8] * (1-Global.CLK32[31]);
	y2[9]' * (1-Global.CLK32[31]) = y2[9] * (1-Global.CLK32[31]);
	y2[10]' * (1-Global.CLK32[31]) = y2[10] * (1-Global.CLK32[31]);
	y2[11]' * (1-Global.CLK32[31]) = y2[11] * (1-Global.CLK32[31]);
	y2[12]' * (1-Global.CLK32[31]) = y2[12] * (1-Global.CLK32[31]);
	y2[13]' * (1-Global.CLK32[31]) = y2[13] * (1-Global.CLK32[31]);
	y2[14]' * (1-Global.CLK32[31]) = y2[14] * (1-Global.CLK32[31]);
	y2[15]' * (1-Global.CLK32[31]) = y2[15] * (1-Global.CLK32[31]);


    x3[0]' * (1-Global.CLK32[31]) = x3[0] * (1-Global.CLK32[31]);
	x3[1]' * (1-Global.CLK32[31]) = x3[1] * (1-Global.CLK32[31]);
	x3[2]' * (1-Global.CLK32[31]) = x3[2] * (1-Global.CLK32[31]);
	x3[3]' * (1-Global.CLK32[31]) = x3[3] * (1-Global.CLK32[31]);
	x3[4]' * (1-Global.CLK32[31]) = x3[4] * (1-Global.CLK32[31]);
	x3[5]' * (1-Global.CLK32[31]) = x3[5] * (1-Global.CLK32[31]);
	x3[6]' * (1-Global.CLK32[31]) = x3[6] * (1-Global.CLK32[31]);
	x3[7]' * (1-Global.CLK32[31]) = x3[7] * (1-Global.CLK32[31]);
	x3[8]' * (1-Global.CLK32[31]) = x3[8] * (1-Global.CLK32[31]);
	x3[9]' * (1-Global.CLK32[31]) = x3[9] * (1-Global.CLK32[31]);
	x3[10]' * (1-Global.CLK32[31]) = x3[10] * (1-Global.CLK32[31]);
	x3[11]' * (1-Global.CLK32[31]) = x3[11] * (1-Global.CLK32[31]);
	x3[12]' * (1-Global.CLK32[31]) = x3[12] * (1-Global.CLK32[31]);
	x3[13]' * (1-Global.CLK32[31]) = x3[13] * (1-Global.CLK32[31]);
	x3[14]' * (1-Global.CLK32[31]) = x3[14] * (1-Global.CLK32[31]);
	x3[15]' * (1-Global.CLK32[31]) = x3[15] * (1-Global.CLK32[31]);


    y3[0]' * (1-Global.CLK32[31]) = y3[0] * (1-Global.CLK32[31]);
	y3[1]' * (1-Global.CLK32[31]) = y3[1] * (1-Global.CLK32[31]);
	y3[2]' * (1-Global.CLK32[31]) = y3[2] * (1-Global.CLK32[31]);
	y3[3]' * (1-Global.CLK32[31]) = y3[3] * (1-Global.CLK32[31]);
	y3[4]' * (1-Global.CLK32[31]) = y3[4] * (1-Global.CLK32[31]);
	y3[5]' * (1-Global.CLK32[31]) = y3[5] * (1-Global.CLK32[31]);
	y3[6]' * (1-Global.CLK32[31]) = y3[6] * (1-Global.CLK32[31]);
	y3[7]' * (1-Global.CLK32[31]) = y3[7] * (1-Global.CLK32[31]);
	y3[8]' * (1-Global.CLK32[31]) = y3[8] * (1-Global.CLK32[31]);
	y3[9]' * (1-Global.CLK32[31]) = y3[9] * (1-Global.CLK32[31]);
	y3[10]' * (1-Global.CLK32[31]) = y3[10] * (1-Global.CLK32[31]);
	y3[11]' * (1-Global.CLK32[31]) = y3[11] * (1-Global.CLK32[31]);
	y3[12]' * (1-Global.CLK32[31]) = y3[12] * (1-Global.CLK32[31]);
	y3[13]' * (1-Global.CLK32[31]) = y3[13] * (1-Global.CLK32[31]);
	y3[14]' * (1-Global.CLK32[31]) = y3[14] * (1-Global.CLK32[31]);
	y3[15]' * (1-Global.CLK32[31]) = y3[15] * (1-Global.CLK32[31]);
    
    q0[0]' * (1-Global.CLK32[31]) = q0[0] * (1-Global.CLK32[31]);
	q0[1]' * (1-Global.CLK32[31]) = q0[1] * (1-Global.CLK32[31]);
	q0[2]' * (1-Global.CLK32[31]) = q0[2] * (1-Global.CLK32[31]);
	q0[3]' * (1-Global.CLK32[31]) = q0[3] * (1-Global.CLK32[31]);
	q0[4]' * (1-Global.CLK32[31]) = q0[4] * (1-Global.CLK32[31]);
	q0[5]' * (1-Global.CLK32[31]) = q0[5] * (1-Global.CLK32[31]);
	q0[6]' * (1-Global.CLK32[31]) = q0[6] * (1-Global.CLK32[31]);
	q0[7]' * (1-Global.CLK32[31]) = q0[7] * (1-Global.CLK32[31]);
	q0[8]' * (1-Global.CLK32[31]) = q0[8] * (1-Global.CLK32[31]);
	q0[9]' * (1-Global.CLK32[31]) = q0[9] * (1-Global.CLK32[31]);
	q0[10]' * (1-Global.CLK32[31]) = q0[10] * (1-Global.CLK32[31]);
	q0[11]' * (1-Global.CLK32[31]) = q0[11] * (1-Global.CLK32[31]);
	q0[12]' * (1-Global.CLK32[31]) = q0[12] * (1-Global.CLK32[31]);
	q0[13]' * (1-Global.CLK32[31]) = q0[13] * (1-Global.CLK32[31]);
	q0[14]' * (1-Global.CLK32[31]) = q0[14] * (1-Global.CLK32[31]);
	q0[15]' * (1-Global.CLK32[31]) = q0[15] * (1-Global.CLK32[31]);

    /****
    *
    * RANGE CHECK x1,y1,x2,y2,s,q0,q1,q2
    *
    *****/

    x1[0]*Global.CLK32[0] + x1[1]*Global.CLK32[1] + x1[2]*Global.CLK32[2] + x1[3]*Global.CLK32[3] + x1[4]*Global.CLK32[4] + x1[5]*Global.CLK32[5] + x1[6]*Global.CLK32[6] + x1[7]*Global.CLK32[7]
	   + x1[8]*Global.CLK32[8] + x1[9]*Global.CLK32[9] + x1[10]*Global.CLK32[10] + x1[11]*Global.CLK32[11] + x1[12]*Global.CLK32[12] + x1[13]*Global.CLK32[13] + x1[14]*Global.CLK32[14] + x1[15]*Global.CLK32[15]
	   + y1[0]*Global.CLK32[16] + y1[1]*Global.CLK32[17] + y1[2]*Global.CLK32[18] + y1[3]*Global.CLK32[19] + y1[4]*Global.CLK32[20] + y1[5]*Global.CLK32[21] + y1[6]*Global.CLK32[22] + y1[7]*Global.CLK32[23]
	   + y1[8]*Global.CLK32[24] + y1[9]*Global.CLK32[25] + y1[10]*Global.CLK32[26] + y1[11]*Global.CLK32[27] + y1[12]*Global.CLK32[28] + y1[13]*Global.CLK32[29] + y1[14]*Global.CLK32[30] + y1[15]*Global.CLK32[31] in Global.BYTE2;

    x2[0]*Global.CLK32[0] + x2[1]*Global.CLK32[1] + x2[2]*Global.CLK32[2] + x2[3]*Global.CLK32[3] + x2[4]*Global.CLK32[4] + x2[5]*Global.CLK32[5] + x2[6]*Global.CLK32[6] + x2[7]*Global.CLK32[7]
	   + x2[8]*Global.CLK32[8] + x2[9]*Global.CLK32[9] + x2[10]*Global.CLK32[10] + x2[11]*Global.CLK32[11] + x2[12]*Global.CLK32[12] + x2[13]*Global.CLK32[13] + x2[14]*Global.CLK32[14] + x2[15]*Global.CLK32[15]
	   + y2[0]*Global.CLK32[16] + y2[1]*Global.CLK32[17] + y2[2]*Global.CLK32[18] + y2[3]*Global.CLK32[19] + y2[4]*Global.CLK32[20] + y2[5]*Global.CLK32[21] + y2[6]*Global.CLK32[22] + y2[7]*Global.CLK32[23]
	   + y2[8]*Global.CLK32[24] + y2[9]*Global.CLK32[25] + y2[10]*Global.CLK32[26] + y2[11]*Global.CLK32[27] + y2[12]*Global.CLK32[28] + y2[13]*Global.CLK32[29] + y2[14]*Global.CLK32[30] + y2[15]*Global.CLK32[31] in Global.BYTE2;

	   + q0[0]*Global.CLK32[16] + q0[1]*Global.CLK32[17] + q0[2]*Global.CLK32[18] + q0[3]*Global.CLK32[19] + q0[4]*Global.CLK32[20] + q0[5]*Global.CLK32[21] + q0[6]*Global.CLK32[22] + q0[7]*Global.CLK32[23]
	   + q0[8]*Global.CLK32[24] + q0[9]*Global.CLK32[25] + q0[10]*Global.CLK32[26] + q0[11]*Global.CLK32[27] + q0[12]*Global.CLK32[28] + q0[13]*Global.CLK32[29] + q0[14]*Global.CLK32[30] in Global.BYTE2;


    /*******
    *
    * EQ0: A(x1) * B(y1) + C(x2) = D (y2) * 2 ** 256 + op (y3)
    *
    *******/

    pol eq0_0 =
		(x1[0] * y1[0])
		 + x2[0] - y3[0];

	pol eq0_1 =
		(x1[0] * y1[1]) +
		(x1[1] * y1[0])
		 + x2[1] - y3[1];

	pol eq0_2 =
		(x1[0] * y1[2]) +
		(x1[1] * y1[1]) +
		(x1[2] * y1[0])
		 + x2[2] - y3[2];

	pol eq0_3 =
		(x1[0] * y1[3]) +
		(x1[1] * y1[2]) +
		(x1[2] * y1[1]) +
		(x1[3] * y1[0])
		 + x2[3] - y3[3];

	pol eq0_4 =
		(x1[0] * y1[4]) +
		(x1[1] * y1[3]) +
		(x1[2] * y1[2]) +
		(x1[3] * y1[1]) +
		(x1[4] * y1[0])
		 + x2[4] - y3[4];

	pol eq0_5 =
		(x1[0] * y1[5]) +
		(x1[1] * y1[4]) +
		(x1[2] * y1[3]) +
		(x1[3] * y1[2]) +
		(x1[4] * y1[1]) +
		(x1[5] * y1[0])
		 + x2[5] - y3[5];

	pol eq0_6 =
		(x1[0] * y1[6]) +
		(x1[1] * y1[5]) +
		(x1[2] * y1[4]) +
		(x1[3] * y1[3]) +
		(x1[4] * y1[2]) +
		(x1[5] * y1[1]) +
		(x1[6] * y1[0])
		 + x2[6] - y3[6];

	pol eq0_7 =
		(x1[0] * y1[7]) +
		(x1[1] * y1[6]) +
		(x1[2] * y1[5]) +
		(x1[3] * y1[4]) +
		(x1[4] * y1[3]) +
		(x1[5] * y1[2]) +
		(x1[6] * y1[1]) +
		(x1[7] * y1[0])
		 + x2[7] - y3[7];

	pol eq0_8 =
		(x1[0] * y1[8]) +
		(x1[1] * y1[7]) +
		(x1[2] * y1[6]) +
		(x1[3] * y1[5]) +
		(x1[4] * y1[4]) +
		(x1[5] * y1[3]) +
		(x1[6] * y1[2]) +
		(x1[7] * y1[1]) +
		(x1[8] * y1[0])
		 + x2[8] - y3[8];

	pol eq0_9 =
		(x1[0] * y1[9]) +
		(x1[1] * y1[8]) +
		(x1[2] * y1[7]) +
		(x1[3] * y1[6]) +
		(x1[4] * y1[5]) +
		(x1[5] * y1[4]) +
		(x1[6] * y1[3]) +
		(x1[7] * y1[2]) +
		(x1[8] * y1[1]) +
		(x1[9] * y1[0])
		 + x2[9] - y3[9];

	pol eq0_10 =
		(x1[0] * y1[10]) +
		(x1[1] * y1[9]) +
		(x1[2] * y1[8]) +
		(x1[3] * y1[7]) +
		(x1[4] * y1[6]) +
		(x1[5] * y1[5]) +
		(x1[6] * y1[4]) +
		(x1[7] * y1[3]) +
		(x1[8] * y1[2]) +
		(x1[9] * y1[1]) +
		(x1[10] * y1[0])
		 + x2[10] - y3[10];

	pol eq0_11 =
		(x1[0] * y1[11]) +
		(x1[1] * y1[10]) +
		(x1[2] * y1[9]) +
		(x1[3] * y1[8]) +
		(x1[4] * y1[7]) +
		(x1[5] * y1[6]) +
		(x1[6] * y1[5]) +
		(x1[7] * y1[4]) +
		(x1[8] * y1[3]) +
		(x1[9] * y1[2]) +
		(x1[10] * y1[1]) +
		(x1[11] * y1[0])
		 + x2[11] - y3[11];

	pol eq0_12 =
		(x1[0] * y1[12]) +
		(x1[1] * y1[11]) +
		(x1[2] * y1[10]) +
		(x1[3] * y1[9]) +
		(x1[4] * y1[8]) +
		(x1[5] * y1[7]) +
		(x1[6] * y1[6]) +
		(x1[7] * y1[5]) +
		(x1[8] * y1[4]) +
		(x1[9] * y1[3]) +
		(x1[10] * y1[2]) +
		(x1[11] * y1[1]) +
		(x1[12] * y1[0])
		 + x2[12] - y3[12];

	pol eq0_13 =
		(x1[0] * y1[13]) +
		(x1[1] * y1[12]) +
		(x1[2] * y1[11]) +
		(x1[3] * y1[10]) +
		(x1[4] * y1[9]) +
		(x1[5] * y1[8]) +
		(x1[6] * y1[7]) +
		(x1[7] * y1[6]) +
		(x1[8] * y1[5]) +
		(x1[9] * y1[4]) +
		(x1[10] * y1[3]) +
		(x1[11] * y1[2]) +
		(x1[12] * y1[1]) +
		(x1[13] * y1[0])
		 + x2[13] - y3[13];

	pol eq0_14 =
		(x1[0] * y1[14]) +
		(x1[1] * y1[13]) +
		(x1[2] * y1[12]) +
		(x1[3] * y1[11]) +
		(x1[4] * y1[10]) +
		(x1[5] * y1[9]) +
		(x1[6] * y1[8]) +
		(x1[7] * y1[7]) +
		(x1[8] * y1[6]) +
		(x1[9] * y1[5]) +
		(x1[10] * y1[4]) +
		(x1[11] * y1[3]) +
		(x1[12] * y1[2]) +
		(x1[13] * y1[1]) +
		(x1[14] * y1[0])
		 + x2[14] - y3[14];

	pol eq0_15 =
		(x1[0] * y1[15]) +
		(x1[1] * y1[14]) +
		(x1[2] * y1[13]) +
		(x1[3] * y1[12]) +
		(x1[4] * y1[11]) +
		(x1[5] * y1[10]) +
		(x1[6] * y1[9]) +
		(x1[7] * y1[8]) +
		(x1[8] * y1[7]) +
		(x1[9] * y1[6]) +
		(x1[10] * y1[5]) +
		(x1[11] * y1[4]) +
		(x1[12] * y1[3]) +
		(x1[13] * y1[2]) +
		(x1[14] * y1[1]) +
		(x1[15] * y1[0])
		 + x2[15] - y3[15];

	pol eq0_16 =
		(x1[1] * y1[15]) +
		(x1[2] * y1[14]) +
		(x1[3] * y1[13]) +
		(x1[4] * y1[12]) +
		(x1[5] * y1[11]) +
		(x1[6] * y1[10]) +
		(x1[7] * y1[9]) +
		(x1[8] * y1[8]) +
		(x1[9] * y1[7]) +
		(x1[10] * y1[6]) +
		(x1[11] * y1[5]) +
		(x1[12] * y1[4]) +
		(x1[13] * y1[3]) +
		(x1[14] * y1[2]) +
		(x1[15] * y1[1])
		    - y2[0];

	pol eq0_17 =
		(x1[2] * y1[15]) +
		(x1[3] * y1[14]) +
		(x1[4] * y1[13]) +
		(x1[5] * y1[12]) +
		(x1[6] * y1[11]) +
		(x1[7] * y1[10]) +
		(x1[8] * y1[9]) +
		(x1[9] * y1[8]) +
		(x1[10] * y1[7]) +
		(x1[11] * y1[6]) +
		(x1[12] * y1[5]) +
		(x1[13] * y1[4]) +
		(x1[14] * y1[3]) +
		(x1[15] * y1[2])
		    - y2[1];

	pol eq0_18 =
		(x1[3] * y1[15]) +
		(x1[4] * y1[14]) +
		(x1[5] * y1[13]) +
		(x1[6] * y1[12]) +
		(x1[7] * y1[11]) +
		(x1[8] * y1[10]) +
		(x1[9] * y1[9]) +
		(x1[10] * y1[8]) +
		(x1[11] * y1[7]) +
		(x1[12] * y1[6]) +
		(x1[13] * y1[5]) +
		(x1[14] * y1[4]) +
		(x1[15] * y1[3])
		    - y2[2];

	pol eq0_19 =
		(x1[4] * y1[15]) +
		(x1[5] * y1[14]) +
		(x1[6] * y1[13]) +
		(x1[7] * y1[12]) +
		(x1[8] * y1[11]) +
		(x1[9] * y1[10]) +
		(x1[10] * y1[9]) +
		(x1[11] * y1[8]) +
		(x1[12] * y1[7]) +
		(x1[13] * y1[6]) +
		(x1[14] * y1[5]) +
		(x1[15] * y1[4])
		    - y2[3];

	pol eq0_20 =
		(x1[5] * y1[15]) +
		(x1[6] * y1[14]) +
		(x1[7] * y1[13]) +
		(x1[8] * y1[12]) +
		(x1[9] * y1[11]) +
		(x1[10] * y1[10]) +
		(x1[11] * y1[9]) +
		(x1[12] * y1[8]) +
		(x1[13] * y1[7]) +
		(x1[14] * y1[6]) +
		(x1[15] * y1[5])
		    - y2[4];

	pol eq0_21 =
		(x1[6] * y1[15]) +
		(x1[7] * y1[14]) +
		(x1[8] * y1[13]) +
		(x1[9] * y1[12]) +
		(x1[10] * y1[11]) +
		(x1[11] * y1[10]) +
		(x1[12] * y1[9]) +
		(x1[13] * y1[8]) +
		(x1[14] * y1[7]) +
		(x1[15] * y1[6])
		    - y2[5];

	pol eq0_22 =
		(x1[7] * y1[15]) +
		(x1[8] * y1[14]) +
		(x1[9] * y1[13]) +
		(x1[10] * y1[12]) +
		(x1[11] * y1[11]) +
		(x1[12] * y1[10]) +
		(x1[13] * y1[9]) +
		(x1[14] * y1[8]) +
		(x1[15] * y1[7])
		    - y2[6];

	pol eq0_23 =
		(x1[8] * y1[15]) +
		(x1[9] * y1[14]) +
		(x1[10] * y1[13]) +
		(x1[11] * y1[12]) +
		(x1[12] * y1[11]) +
		(x1[13] * y1[10]) +
		(x1[14] * y1[9]) +
		(x1[15] * y1[8])
		    - y2[7];

	pol eq0_24 =
		(x1[9] * y1[15]) +
		(x1[10] * y1[14]) +
		(x1[11] * y1[13]) +
		(x1[12] * y1[12]) +
		(x1[13] * y1[11]) +
		(x1[14] * y1[10]) +
		(x1[15] * y1[9])
		    - y2[8];

	pol eq0_25 =
		(x1[10] * y1[15]) +
		(x1[11] * y1[14]) +
		(x1[12] * y1[13]) +
		(x1[13] * y1[12]) +
		(x1[14] * y1[11]) +
		(x1[15] * y1[10])
		    - y2[9];

	pol eq0_26 =
		(x1[11] * y1[15]) +
		(x1[12] * y1[14]) +
		(x1[13] * y1[13]) +
		(x1[14] * y1[12]) +
		(x1[15] * y1[11])
		    - y2[10];

	pol eq0_27 =
		(x1[12] * y1[15]) +
		(x1[13] * y1[14]) +
		(x1[14] * y1[13]) +
		(x1[15] * y1[12])
		    - y2[11];

	pol eq0_28 =
		(x1[13] * y1[15]) +
		(x1[14] * y1[14]) +
		(x1[15] * y1[13])
		    - y2[12];

	pol eq0_29 =
		(x1[14] * y1[15]) +
		(x1[15] * y1[14])
		    - y2[13];

	pol eq0_30 =
		(x1[15] * y1[15])
		    - y2[14];

	pol eq0_31 = - y2[15];


    /*******
    *
    * EQ1: arith modular ???? sample
    *
    *******/

    pol eq1_0 =
		(x3[0] * x2[0] - x3[0] * x1[0] - 64559 * q0[0])
		 - y2[0] + y1[0];

	pol eq1_1 =
		(x3[0] * x2[1] - x3[0] * x1[1] - 64559 * q0[1]) +
		(x3[1] * x2[0] - x3[1] * x1[0] - 65535 * q0[0])
		 - y2[1] + y1[1];

	pol eq1_2 =
		(x3[0] * x2[2] - x3[0] * x1[2] - 64559 * q0[2]) +
		(x3[1] * x2[1] - x3[1] * x1[1] - 65535 * q0[1]) +
		(x3[2] * x2[0] - x3[2] * x1[0] - 65534 * q0[0])
		 - y2[2] + y1[2];

	pol eq1_3 =
		(x3[0] * x2[3] - x3[0] * x1[3] - 64559 * q0[3]) +
		(x3[1] * x2[2] - x3[1] * x1[2] - 65535 * q0[2]) +
		(x3[2] * x2[1] - x3[2] * x1[1] - 65534 * q0[1]) +
		(x3[3] * x2[0] - x3[3] * x1[0] - 65535 * q0[0])
		 - y2[3] + y1[3];

	pol eq1_4 =
		(x3[0] * x2[4] - x3[0] * x1[4] - 64559 * q0[4]) +
		(x3[1] * x2[3] - x3[1] * x1[3] - 65535 * q0[3]) +
		(x3[2] * x2[2] - x3[2] * x1[2] - 65534 * q0[2]) +
		(x3[3] * x2[1] - x3[3] * x1[1] - 65535 * q0[1]) +
		(x3[4] * x2[0] - x3[4] * x1[0] - 65535 * q0[0])
		 - y2[4] + y1[4];

	pol eq1_5 =
		(x3[0] * x2[5] - x3[0] * x1[5] - 64559 * q0[5]) +
		(x3[1] * x2[4] - x3[1] * x1[4] - 65535 * q0[4]) +
		(x3[2] * x2[3] - x3[2] * x1[3] - 65534 * q0[3]) +
		(x3[3] * x2[2] - x3[3] * x1[2] - 65535 * q0[2]) +
		(x3[4] * x2[1] - x3[4] * x1[1] - 65535 * q0[1]) +
		(x3[5] * x2[0] - x3[5] * x1[0] - 65535 * q0[0])
		 - y2[5] + y1[5];

	pol eq1_6 =
		(x3[0] * x2[6] - x3[0] * x1[6] - 64559 * q0[6]) +
		(x3[1] * x2[5] - x3[1] * x1[5] - 65535 * q0[5]) +
		(x3[2] * x2[4] - x3[2] * x1[4] - 65534 * q0[4]) +
		(x3[3] * x2[3] - x3[3] * x1[3] - 65535 * q0[3]) +
		(x3[4] * x2[2] - x3[4] * x1[2] - 65535 * q0[2]) +
		(x3[5] * x2[1] - x3[5] * x1[1] - 65535 * q0[1]) +
		(x3[6] * x2[0] - x3[6] * x1[0] - 65535 * q0[0])
		 - y2[6] + y1[6];

	pol eq1_7 =
		(x3[0] * x2[7] - x3[0] * x1[7] - 64559 * q0[7]) +
		(x3[1] * x2[6] - x3[1] * x1[6] - 65535 * q0[6]) +
		(x3[2] * x2[5] - x3[2] * x1[5] - 65534 * q0[5]) +
		(x3[3] * x2[4] - x3[3] * x1[4] - 65535 * q0[4]) +
		(x3[4] * x2[3] - x3[4] * x1[3] - 65535 * q0[3]) +
		(x3[5] * x2[2] - x3[5] * x1[2] - 65535 * q0[2]) +
		(x3[6] * x2[1] - x3[6] * x1[1] - 65535 * q0[1]) +
		(x3[7] * x2[0] - x3[7] * x1[0] - 65535 * q0[0])
		 - y2[7] + y1[7];

	pol eq1_8 =
		(x3[0] * x2[8] - x3[0] * x1[8] - 64559 * q0[8]) +
		(x3[1] * x2[7] - x3[1] * x1[7] - 65535 * q0[7]) +
		(x3[2] * x2[6] - x3[2] * x1[6] - 65534 * q0[6]) +
		(x3[3] * x2[5] - x3[3] * x1[5] - 65535 * q0[5]) +
		(x3[4] * x2[4] - x3[4] * x1[4] - 65535 * q0[4]) +
		(x3[5] * x2[3] - x3[5] * x1[3] - 65535 * q0[3]) +
		(x3[6] * x2[2] - x3[6] * x1[2] - 65535 * q0[2]) +
		(x3[7] * x2[1] - x3[7] * x1[1] - 65535 * q0[1]) +
		(x3[8] * x2[0] - x3[8] * x1[0] - 65535 * q0[0])
		 - y2[8] + y1[8];

	pol eq1_9 =
		(x3[0] * x2[9] - x3[0] * x1[9] - 64559 * q0[9]) +
		(x3[1] * x2[8] - x3[1] * x1[8] - 65535 * q0[8]) +
		(x3[2] * x2[7] - x3[2] * x1[7] - 65534 * q0[7]) +
		(x3[3] * x2[6] - x3[3] * x1[6] - 65535 * q0[6]) +
		(x3[4] * x2[5] - x3[4] * x1[5] - 65535 * q0[5]) +
		(x3[5] * x2[4] - x3[5] * x1[4] - 65535 * q0[4]) +
		(x3[6] * x2[3] - x3[6] * x1[3] - 65535 * q0[3]) +
		(x3[7] * x2[2] - x3[7] * x1[2] - 65535 * q0[2]) +
		(x3[8] * x2[1] - x3[8] * x1[1] - 65535 * q0[1]) +
		(x3[9] * x2[0] - x3[9] * x1[0] - 65535 * q0[0])
		 - y2[9] + y1[9];

	pol eq1_10 =
		(x3[0] * x2[10] - x3[0] * x1[10] - 64559 * q0[10]) +
		(x3[1] * x2[9] - x3[1] * x1[9] - 65535 * q0[9]) +
		(x3[2] * x2[8] - x3[2] * x1[8] - 65534 * q0[8]) +
		(x3[3] * x2[7] - x3[3] * x1[7] - 65535 * q0[7]) +
		(x3[4] * x2[6] - x3[4] * x1[6] - 65535 * q0[6]) +
		(x3[5] * x2[5] - x3[5] * x1[5] - 65535 * q0[5]) +
		(x3[6] * x2[4] - x3[6] * x1[4] - 65535 * q0[4]) +
		(x3[7] * x2[3] - x3[7] * x1[3] - 65535 * q0[3]) +
		(x3[8] * x2[2] - x3[8] * x1[2] - 65535 * q0[2]) +
		(x3[9] * x2[1] - x3[9] * x1[1] - 65535 * q0[1]) +
		(x3[10] * x2[0] - x3[10] * x1[0] - 65535 * q0[0])
		 - y2[10] + y1[10];

	pol eq1_11 =
		(x3[0] * x2[11] - x3[0] * x1[11] - 64559 * q0[11]) +
		(x3[1] * x2[10] - x3[1] * x1[10] - 65535 * q0[10]) +
		(x3[2] * x2[9] - x3[2] * x1[9] - 65534 * q0[9]) +
		(x3[3] * x2[8] - x3[3] * x1[8] - 65535 * q0[8]) +
		(x3[4] * x2[7] - x3[4] * x1[7] - 65535 * q0[7]) +
		(x3[5] * x2[6] - x3[5] * x1[6] - 65535 * q0[6]) +
		(x3[6] * x2[5] - x3[6] * x1[5] - 65535 * q0[5]) +
		(x3[7] * x2[4] - x3[7] * x1[4] - 65535 * q0[4]) +
		(x3[8] * x2[3] - x3[8] * x1[3] - 65535 * q0[3]) +
		(x3[9] * x2[2] - x3[9] * x1[2] - 65535 * q0[2]) +
		(x3[10] * x2[1] - x3[10] * x1[1] - 65535 * q0[1]) +
		(x3[11] * x2[0] - x3[11] * x1[0] - 65535 * q0[0])
		 - y2[11] + y1[11];

	pol eq1_12 =
		(x3[0] * x2[12] - x3[0] * x1[12] - 64559 * q0[12]) +
		(x3[1] * x2[11] - x3[1] * x1[11] - 65535 * q0[11]) +
		(x3[2] * x2[10] - x3[2] * x1[10] - 65534 * q0[10]) +
		(x3[3] * x2[9] - x3[3] * x1[9] - 65535 * q0[9]) +
		(x3[4] * x2[8] - x3[4] * x1[8] - 65535 * q0[8]) +
		(x3[5] * x2[7] - x3[5] * x1[7] - 65535 * q0[7]) +
		(x3[6] * x2[6] - x3[6] * x1[6] - 65535 * q0[6]) +
		(x3[7] * x2[5] - x3[7] * x1[5] - 65535 * q0[5]) +
		(x3[8] * x2[4] - x3[8] * x1[4] - 65535 * q0[4]) +
		(x3[9] * x2[3] - x3[9] * x1[3] - 65535 * q0[3]) +
		(x3[10] * x2[2] - x3[10] * x1[2] - 65535 * q0[2]) +
		(x3[11] * x2[1] - x3[11] * x1[1] - 65535 * q0[1]) +
		(x3[12] * x2[0] - x3[12] * x1[0] - 65535 * q0[0])
		 - y2[12] + y1[12];

	pol eq1_13 =
		(x3[0] * x2[13] - x3[0] * x1[13] - 64559 * q0[13]) +
		(x3[1] * x2[12] - x3[1] * x1[12] - 65535 * q0[12]) +
		(x3[2] * x2[11] - x3[2] * x1[11] - 65534 * q0[11]) +
		(x3[3] * x2[10] - x3[3] * x1[10] - 65535 * q0[10]) +
		(x3[4] * x2[9] - x3[4] * x1[9] - 65535 * q0[9]) +
		(x3[5] * x2[8] - x3[5] * x1[8] - 65535 * q0[8]) +
		(x3[6] * x2[7] - x3[6] * x1[7] - 65535 * q0[7]) +
		(x3[7] * x2[6] - x3[7] * x1[6] - 65535 * q0[6]) +
		(x3[8] * x2[5] - x3[8] * x1[5] - 65535 * q0[5]) +
		(x3[9] * x2[4] - x3[9] * x1[4] - 65535 * q0[4]) +
		(x3[10] * x2[3] - x3[10] * x1[3] - 65535 * q0[3]) +
		(x3[11] * x2[2] - x3[11] * x1[2] - 65535 * q0[2]) +
		(x3[12] * x2[1] - x3[12] * x1[1] - 65535 * q0[1]) +
		(x3[13] * x2[0] - x3[13] * x1[0] - 65535 * q0[0])
		 - y2[13] + y1[13];

	pol eq1_14 =
		(x3[0] * x2[14] - x3[0] * x1[14] - 64559 * q0[14]) +
		(x3[1] * x2[13] - x3[1] * x1[13] - 65535 * q0[13]) +
		(x3[2] * x2[12] - x3[2] * x1[12] - 65534 * q0[12]) +
		(x3[3] * x2[11] - x3[3] * x1[11] - 65535 * q0[11]) +
		(x3[4] * x2[10] - x3[4] * x1[10] - 65535 * q0[10]) +
		(x3[5] * x2[9] - x3[5] * x1[9] - 65535 * q0[9]) +
		(x3[6] * x2[8] - x3[6] * x1[8] - 65535 * q0[8]) +
		(x3[7] * x2[7] - x3[7] * x1[7] - 65535 * q0[7]) +
		(x3[8] * x2[6] - x3[8] * x1[6] - 65535 * q0[6]) +
		(x3[9] * x2[5] - x3[9] * x1[5] - 65535 * q0[5]) +
		(x3[10] * x2[4] - x3[10] * x1[4] - 65535 * q0[4]) +
		(x3[11] * x2[3] - x3[11] * x1[3] - 65535 * q0[3]) +
		(x3[12] * x2[2] - x3[12] * x1[2] - 65535 * q0[2]) +
		(x3[13] * x2[1] - x3[13] * x1[1] - 65535 * q0[1]) +
		(x3[14] * x2[0] - x3[14] * x1[0] - 65535 * q0[0])
		 - y2[14] + y1[14];

	pol eq1_15 =
		(x3[0] * x2[15] - x3[0] * x1[15] - 64559 * q0[15]) +
		(x3[1] * x2[14] - x3[1] * x1[14] - 65535 * q0[14]) +
		(x3[2] * x2[13] - x3[2] * x1[13] - 65534 * q0[13]) +
		(x3[3] * x2[12] - x3[3] * x1[12] - 65535 * q0[12]) +
		(x3[4] * x2[11] - x3[4] * x1[11] - 65535 * q0[11]) +
		(x3[5] * x2[10] - x3[5] * x1[10] - 65535 * q0[10]) +
		(x3[6] * x2[9] - x3[6] * x1[9] - 65535 * q0[9]) +
		(x3[7] * x2[8] - x3[7] * x1[8] - 65535 * q0[8]) +
		(x3[8] * x2[7] - x3[8] * x1[7] - 65535 * q0[7]) +
		(x3[9] * x2[6] - x3[9] * x1[6] - 65535 * q0[6]) +
		(x3[10] * x2[5] - x3[10] * x1[5] - 65535 * q0[5]) +
		(x3[11] * x2[4] - x3[11] * x1[4] - 65535 * q0[4]) +
		(x3[12] * x2[3] - x3[12] * x1[3] - 65535 * q0[3]) +
		(x3[13] * x2[2] - x3[13] * x1[2] - 65535 * q0[2]) +
		(x3[14] * x2[1] - x3[14] * x1[1] - 65535 * q0[1]) +
		(x3[15] * x2[0] - x3[15] * x1[0] - 65535 * q0[0])
		 - y2[15] + y1[15];

	pol eq1_16 =
		(x3[1] * x2[15] - x3[1] * x1[15] - 65535 * q0[15]) +
		(x3[2] * x2[14] - x3[2] * x1[14] - 65534 * q0[14]) +
		(x3[3] * x2[13] - x3[3] * x1[13] - 65535 * q0[13]) +
		(x3[4] * x2[12] - x3[4] * x1[12] - 65535 * q0[12]) +
		(x3[5] * x2[11] - x3[5] * x1[11] - 65535 * q0[11]) +
		(x3[6] * x2[10] - x3[6] * x1[10] - 65535 * q0[10]) +
		(x3[7] * x2[9] - x3[7] * x1[9] - 65535 * q0[9]) +
		(x3[8] * x2[8] - x3[8] * x1[8] - 65535 * q0[8]) +
		(x3[9] * x2[7] - x3[9] * x1[7] - 65535 * q0[7]) +
		(x3[10] * x2[6] - x3[10] * x1[6] - 65535 * q0[6]) +
		(x3[11] * x2[5] - x3[11] * x1[5] - 65535 * q0[5]) +
		(x3[12] * x2[4] - x3[12] * x1[4] - 65535 * q0[4]) +
		(x3[13] * x2[3] - x3[13] * x1[3] - 65535 * q0[3]) +
		(x3[14] * x2[2] - x3[14] * x1[2] - 65535 * q0[2]) +
		(x3[15] * x2[1] - x3[15] * x1[1] - 65535 * q0[1])
		    + 129118;

	pol eq1_17 =
		(x3[2] * x2[15] - x3[2] * x1[15] - 65534 * q0[15]) +
		(x3[3] * x2[14] - x3[3] * x1[14] - 65535 * q0[14]) +
		(x3[4] * x2[13] - x3[4] * x1[13] - 65535 * q0[13]) +
		(x3[5] * x2[12] - x3[5] * x1[12] - 65535 * q0[12]) +
		(x3[6] * x2[11] - x3[6] * x1[11] - 65535 * q0[11]) +
		(x3[7] * x2[10] - x3[7] * x1[10] - 65535 * q0[10]) +
		(x3[8] * x2[9] - x3[8] * x1[9] - 65535 * q0[9]) +
		(x3[9] * x2[8] - x3[9] * x1[8] - 65535 * q0[8]) +
		(x3[10] * x2[7] - x3[10] * x1[7] - 65535 * q0[7]) +
		(x3[11] * x2[6] - x3[11] * x1[6] - 65535 * q0[6]) +
		(x3[12] * x2[5] - x3[12] * x1[5] - 65535 * q0[5]) +
		(x3[13] * x2[4] - x3[13] * x1[4] - 65535 * q0[4]) +
		(x3[14] * x2[3] - x3[14] * x1[3] - 65535 * q0[3]) +
		(x3[15] * x2[2] - x3[15] * x1[2] - 65535 * q0[2])
		    + 131070;

	pol eq1_18 =
		(x3[3] * x2[15] - x3[3] * x1[15] - 65535 * q0[15]) +
		(x3[4] * x2[14] - x3[4] * x1[14] - 65535 * q0[14]) +
		(x3[5] * x2[13] - x3[5] * x1[13] - 65535 * q0[13]) +
		(x3[6] * x2[12] - x3[6] * x1[12] - 65535 * q0[12]) +
		(x3[7] * x2[11] - x3[7] * x1[11] - 65535 * q0[11]) +
		(x3[8] * x2[10] - x3[8] * x1[10] - 65535 * q0[10]) +
		(x3[9] * x2[9] - x3[9] * x1[9] - 65535 * q0[9]) +
		(x3[10] * x2[8] - x3[10] * x1[8] - 65535 * q0[8]) +
		(x3[11] * x2[7] - x3[11] * x1[7] - 65535 * q0[7]) +
		(x3[12] * x2[6] - x3[12] * x1[6] - 65535 * q0[6]) +
		(x3[13] * x2[5] - x3[13] * x1[5] - 65535 * q0[5]) +
		(x3[14] * x2[4] - x3[14] * x1[4] - 65535 * q0[4]) +
		(x3[15] * x2[3] - x3[15] * x1[3] - 65535 * q0[3])
		    + 131068;

	pol eq1_19 =
		(x3[4] * x2[15] - x3[4] * x1[15] - 65535 * q0[15]) +
		(x3[5] * x2[14] - x3[5] * x1[14] - 65535 * q0[14]) +
		(x3[6] * x2[13] - x3[6] * x1[13] - 65535 * q0[13]) +
		(x3[7] * x2[12] - x3[7] * x1[12] - 65535 * q0[12]) +
		(x3[8] * x2[11] - x3[8] * x1[11] - 65535 * q0[11]) +
		(x3[9] * x2[10] - x3[9] * x1[10] - 65535 * q0[10]) +
		(x3[10] * x2[9] - x3[10] * x1[9] - 65535 * q0[9]) +
		(x3[11] * x2[8] - x3[11] * x1[8] - 65535 * q0[8]) +
		(x3[12] * x2[7] - x3[12] * x1[7] - 65535 * q0[7]) +
		(x3[13] * x2[6] - x3[13] * x1[6] - 65535 * q0[6]) +
		(x3[14] * x2[5] - x3[14] * x1[5] - 65535 * q0[5]) +
		(x3[15] * x2[4] - x3[15] * x1[4] - 65535 * q0[4])
		    + 131070;

	pol eq1_20 =
		(x3[5] * x2[15] - x3[5] * x1[15] - 65535 * q0[15]) +
		(x3[6] * x2[14] - x3[6] * x1[14] - 65535 * q0[14]) +
		(x3[7] * x2[13] - x3[7] * x1[13] - 65535 * q0[13]) +
		(x3[8] * x2[12] - x3[8] * x1[12] - 65535 * q0[12]) +
		(x3[9] * x2[11] - x3[9] * x1[11] - 65535 * q0[11]) +
		(x3[10] * x2[10] - x3[10] * x1[10] - 65535 * q0[10]) +
		(x3[11] * x2[9] - x3[11] * x1[9] - 65535 * q0[9]) +
		(x3[12] * x2[8] - x3[12] * x1[8] - 65535 * q0[8]) +
		(x3[13] * x2[7] - x3[13] * x1[7] - 65535 * q0[7]) +
		(x3[14] * x2[6] - x3[14] * x1[6] - 65535 * q0[6]) +
		(x3[15] * x2[5] - x3[15] * x1[5] - 65535 * q0[5])
		    + 131070;

	pol eq1_21 =
		(x3[6] * x2[15] - x3[6] * x1[15] - 65535 * q0[15]) +
		(x3[7] * x2[14] - x3[7] * x1[14] - 65535 * q0[14]) +
		(x3[8] * x2[13] - x3[8] * x1[13] - 65535 * q0[13]) +
		(x3[9] * x2[12] - x3[9] * x1[12] - 65535 * q0[12]) +
		(x3[10] * x2[11] - x3[10] * x1[11] - 65535 * q0[11]) +
		(x3[11] * x2[10] - x3[11] * x1[10] - 65535 * q0[10]) +
		(x3[12] * x2[9] - x3[12] * x1[9] - 65535 * q0[9]) +
		(x3[13] * x2[8] - x3[13] * x1[8] - 65535 * q0[8]) +
		(x3[14] * x2[7] - x3[14] * x1[7] - 65535 * q0[7]) +
		(x3[15] * x2[6] - x3[15] * x1[6] - 65535 * q0[6])
		    + 131070;

	pol eq1_22 =
		(x3[7] * x2[15] - x3[7] * x1[15] - 65535 * q0[15]) +
		(x3[8] * x2[14] - x3[8] * x1[14] - 65535 * q0[14]) +
		(x3[9] * x2[13] - x3[9] * x1[13] - 65535 * q0[13]) +
		(x3[10] * x2[12] - x3[10] * x1[12] - 65535 * q0[12]) +
		(x3[11] * x2[11] - x3[11] * x1[11] - 65535 * q0[11]) +
		(x3[12] * x2[10] - x3[12] * x1[10] - 65535 * q0[10]) +
		(x3[13] * x2[9] - x3[13] * x1[9] - 65535 * q0[9]) +
		(x3[14] * x2[8] - x3[14] * x1[8] - 65535 * q0[8]) +
		(x3[15] * x2[7] - x3[15] * x1[7] - 65535 * q0[7])
		    + 131070;

	pol eq1_23 =
		(x3[8] * x2[15] - x3[8] * x1[15] - 65535 * q0[15]) +
		(x3[9] * x2[14] - x3[9] * x1[14] - 65535 * q0[14]) +
		(x3[10] * x2[13] - x3[10] * x1[13] - 65535 * q0[13]) +
		(x3[11] * x2[12] - x3[11] * x1[12] - 65535 * q0[12]) +
		(x3[12] * x2[11] - x3[12] * x1[11] - 65535 * q0[11]) +
		(x3[13] * x2[10] - x3[13] * x1[10] - 65535 * q0[10]) +
		(x3[14] * x2[9] - x3[14] * x1[9] - 65535 * q0[9]) +
		(x3[15] * x2[8] - x3[15] * x1[8] - 65535 * q0[8])
		    + 131070;

	pol eq1_24 =
		(x3[9] * x2[15] - x3[9] * x1[15] - 65535 * q0[15]) +
		(x3[10] * x2[14] - x3[10] * x1[14] - 65535 * q0[14]) +
		(x3[11] * x2[13] - x3[11] * x1[13] - 65535 * q0[13]) +
		(x3[12] * x2[12] - x3[12] * x1[12] - 65535 * q0[12]) +
		(x3[13] * x2[11] - x3[13] * x1[11] - 65535 * q0[11]) +
		(x3[14] * x2[10] - x3[14] * x1[10] - 65535 * q0[10]) +
		(x3[15] * x2[9] - x3[15] * x1[9] - 65535 * q0[9])
		    + 131070;

	pol eq1_25 =
		(x3[10] * x2[15] - x3[10] * x1[15] - 65535 * q0[15]) +
		(x3[11] * x2[14] - x3[11] * x1[14] - 65535 * q0[14]) +
		(x3[12] * x2[13] - x3[12] * x1[13] - 65535 * q0[13]) +
		(x3[13] * x2[12] - x3[13] * x1[12] - 65535 * q0[12]) +
		(x3[14] * x2[11] - x3[14] * x1[11] - 65535 * q0[11]) +
		(x3[15] * x2[10] - x3[15] * x1[10] - 65535 * q0[10])
		    + 131070;

	pol eq1_26 =
		(x3[11] * x2[15] - x3[11] * x1[15] - 65535 * q0[15]) +
		(x3[12] * x2[14] - x3[12] * x1[14] - 65535 * q0[14]) +
		(x3[13] * x2[13] - x3[13] * x1[13] - 65535 * q0[13]) +
		(x3[14] * x2[12] - x3[14] * x1[12] - 65535 * q0[12]) +
		(x3[15] * x2[11] - x3[15] * x1[11] - 65535 * q0[11])
		    + 131070;

	pol eq1_27 =
		(x3[12] * x2[15] - x3[12] * x1[15] - 65535 * q0[15]) +
		(x3[13] * x2[14] - x3[13] * x1[14] - 65535 * q0[14]) +
		(x3[14] * x2[13] - x3[14] * x1[13] - 65535 * q0[13]) +
		(x3[15] * x2[12] - x3[15] * x1[12] - 65535 * q0[12])
		    + 131070;

	pol eq1_28 =
		(x3[13] * x2[15] - x3[13] * x1[15] - 65535 * q0[15]) +
		(x3[14] * x2[14] - x3[14] * x1[14] - 65535 * q0[14]) +
		(x3[15] * x2[13] - x3[15] * x1[13] - 65535 * q0[13])
		    + 131070;

	pol eq1_29 =
		(x3[14] * x2[15] - x3[14] * x1[15] - 65535 * q0[15]) +
		(x3[15] * x2[14] - x3[15] * x1[14] - 65535 * q0[14])
		    + 131070;

	pol eq1_30 =
		(x3[15] * x2[15] - x3[15] * x1[15] - 65535 * q0[15])
		    + 131070;

	pol eq1_31 = 131070;

    pol eq0 = eq0_0*Global.CLK32[0] + eq0_1*Global.CLK32[1] + eq0_2*Global.CLK32[2] + eq0_3*Global.CLK32[3] + eq0_4*Global.CLK32[4] + eq0_5*Global.CLK32[5] + eq0_6*Global.CLK32[6] + eq0_7*Global.CLK32[7]
	   + eq0_8*Global.CLK32[8] + eq0_9*Global.CLK32[9] + eq0_10*Global.CLK32[10] + eq0_11*Global.CLK32[11] + eq0_12*Global.CLK32[12] + eq0_13*Global.CLK32[13] + eq0_14*Global.CLK32[14] + eq0_15*Global.CLK32[15]
	   + eq0_16*Global.CLK32[16] + eq0_17*Global.CLK32[17] + eq0_18*Global.CLK32[18] + eq0_19*Global.CLK32[19] + eq0_20*Global.CLK32[20] + eq0_21*Global.CLK32[21] + eq0_22*Global.CLK32[22] + eq0_23*Global.CLK32[23]
	   + eq0_24*Global.CLK32[24] + eq0_25*Global.CLK32[25] + eq0_26*Global.CLK32[26] + eq0_27*Global.CLK32[27] + eq0_28*Global.CLK32[28] + eq0_29*Global.CLK32[29] + eq0_30*Global.CLK32[30] + eq0_31*Global.CLK32[31];
    pol eq1 = eq1_0*Global.CLK32[0] + eq1_1*Global.CLK32[1] + eq1_2*Global.CLK32[2] + eq1_3*Global.CLK32[3] + eq1_4*Global.CLK32[4] + eq1_5*Global.CLK32[5] + eq1_6*Global.CLK32[6] + eq1_7*Global.CLK32[7]
	   + eq1_8*Global.CLK32[8] + eq1_9*Global.CLK32[9] + eq1_10*Global.CLK32[10] + eq1_11*Global.CLK32[11] + eq1_12*Global.CLK32[12] + eq1_13*Global.CLK32[13] + eq1_14*Global.CLK32[14] + eq1_15*Global.CLK32[15]
	   + eq1_16*Global.CLK32[16] + eq1_17*Global.CLK32[17] + eq1_18*Global.CLK32[18] + eq1_19*Global.CLK32[19] + eq1_20*Global.CLK32[20] + eq1_21*Global.CLK32[21] + eq1_22*Global.CLK32[22] + eq1_23*Global.CLK32[23]
	   + eq1_24*Global.CLK32[24] + eq1_25*Global.CLK32[25] + eq1_26*Global.CLK32[26] + eq1_27*Global.CLK32[27] + eq1_28*Global.CLK32[28] + eq1_29*Global.CLK32[29] + eq1_30*Global.CLK32[30] + eq1_31*Global.CLK32[31];

    pol commit selEq[2];

    selEq[0]' * (1-Global.CLK32[31]) = selEq[0] * (1-Global.CLK32[31]);
	selEq[1]' * (1-Global.CLK32[31]) = selEq[1] * (1-Global.CLK32[31]);

    selEq[0] * (1-selEq[0]) = 0;
	selEq[1] * (1-selEq[1]) = 0;


    pol commit carry[1];

    carry[0] * Global.CLK32[0] = 0;

    carry[0] in GL_SIGNED_22BITS;

    selEq[0] * (eq0 + carry[0]) = selEq[0] * carry[0]' * 2**16;
    selEq[1] * (eq1 + carry[0]) = selEq[1] * carry[0]' * 2**16;
