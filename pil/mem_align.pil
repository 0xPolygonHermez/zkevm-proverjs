include "global.pil";
namespace MemAlign(%N);

    /*
    * OPERATIONS
    *
    *  (m0,m1,D) => v
    *  (m0,m1,D,v) => (w0, w1)
    *
    *  @m0 = addr   @m1 = addr + 32 (ethereum)
    *
    *  Ethereum => BigEndian
    *  m0[7],m0[6],...,m0[1],m0[0],m1[7],m1[6],...,m1[1],m1[0]
    *
    *  inM (8 bits, 32 steps)
    */

    // 32 bytes of M0, M1 ordered from HSB to LSB (32, 31, 30, ... == M[7].3, M[7].2, M[7].1, M[7].0, M[6].3, ..)
    pol commit inM[2];

    // 32 bytes of V non-ordered
    // In a particular order depending on how to apply to M0, M1 that have a predetermined order
    // One particular byte only was on M0, M1 or nowhere.
    pol commit inV;

    // Little Big Enddian Selector  lbes = 0 big enddian, lebs = 1 little enddian
    pol commit lbes;

    // write
    pol commit wr;

    pol commit m0[8];
    pol commit m1[8];
    pol commit w0[8];
    pol commit w1[8];
    pol commit v[8];

    // when m0 is "active", means aligned with inV an must be read/write from/to M0
    // when m1 is "active", means aligned with inV an must be read/write from/to M1
    pol commit selM0;
    pol commit selM1;

    // factors to build V[] in correct way, because order of V bytes
    // changes according the offset and wr8
    pol commit factorV[8];

    pol commit offset;
    pol commit len;

    // BYTE_C8192 = 0 (x8192), 1 (x8192), ... , 31 (x8192), 32 (x8192), 0 (x8192), 1 (x8192), ...
    pol constant BYTE_C8192; // [0:8192..255:8192]

    // FACTOR was same for all combinations of offset, wr8, wr256 is a f(step)
    // FACTOR[7] = 2**24, 2**16, 2**8, 1, 0 (x28)
    // FACTOR[6] = 0, 0, 0, 0, 2**24, 2**16, 2**8, 1, 0 (x24)
    // FACTOR[5] = 0, 0, 0, 0, 0, 0, 0, 0, 2**24, 2**16, 2**8, 1, 0 (x20)
    // :
    // FACTOR[0] = 0 (x28), 2**24, 2**16, 2**8, 1
    pol constant FACTOR[8];

    // FACTOR change according the combinations of offset, be, len and step.
    pol constant FACTORV[8];

    // STEP32
    //    0 - 1023  WR256 = 0 WR8 = 0
    // 1024 - 2047  WR256 = 0 WR8 = 0
    // 2048 - 3071  WR256 = 1 WR8 = 0
    // 3072 - 4096  WR256 = 0 WR8 = 1
    pol constant WR; // [0:2048,1:1024:0:1024]
    pol constant LEN;   // [0:3072,1:1024]
    pol constant LBES;

    // OFFSET = 0 (x32), 1 (x32), ... , 31 (x32), 32 (x32), 0 (x32), 1 (x32), ...
    pol constant OFFSET; // [0:32..31:32]

    pol constant SELM0;
    pol constant SELM1;

    pol RESET = Global.CLK32[0];

    //              RangeCheck                  Latch   Clock
    // factorV      Plookup (FACTORV)           no      yes
    // wr           Binary constraint           yes     no
    // len          Plookup (LEN)               yes     no
    // lbes         Plookup (LBES)              yes     no
    // offset       Plookup (OFFSET)            yes     no
    // inV          RangeCheck (BYTE_C8192)     no      yes
    // inM[0..1]    RangeCheck (BYTE2A,BYTE2)   no      yes
    // m0[0..7]     Built                       no      yes
    // m1[0..7]     Built                       no      yes
    // w0[0..7]     Built                       no      yes
    // w1[0..7]     Built                       no      yes
    // v[0..7]      Built                       no      yes
    // selM0        Plookup (SELM0)             no      yes
    // selM1        Plookup (SELM1)             no      yes

    // Latchs
    (1 - RESET) * wr' = (1 - RESET) * wr;
    (1 - RESET) * offset' = (1 - RESET) * offset;
    (1 - RESET) * len' = (1 - RESET) * len;
    (1 - RESET) * lbes' = (1 - RESET) * lbes;

    pol commit resultRd;
    pol commit resultWr;
    (1 - RESET) * resultRd = 0;
    (1 - RESET) * resultWr = 0;
    resultRd * (1 - resultRd) = 0;
    resultWr * (1 - resultWr) = 0;

    wr  * ( 1 - wr ) = 0;
    (1 - wr) * resultWr = 0;

    // RangeCheck
    {inM[1], inM[0]} in {Global.BYTE_2A, Global.BYTE};

    // Plookup
    {
        offset', lbes', len', Global.STEP32, inV,           // selectors 5 + 1 + 5 + 4 + 8 = 23 bits
        selM0, selM1,
        factorV[0], factorV[1], factorV[2], factorV[3], factorV[4], factorV[5], factorV[6], factorV[7]
    } in {
        OFFSET, LBES, LEN, Global.STEP32, BYTE_C8192,
        SELM0, SELM1,
        FACTORV[0], FACTORV[1], FACTORV[2], FACTORV[3], FACTORV[4], FACTORV[5], FACTORV[6], FACTORV[7]
    };

    m0[0]' = (1-RESET) * m0[0] + FACTOR[0] * inM[0];
    m0[1]' = (1-RESET) * m0[1] + FACTOR[1] * inM[0];
    m0[2]' = (1-RESET) * m0[2] + FACTOR[2] * inM[0];
    m0[3]' = (1-RESET) * m0[3] + FACTOR[3] * inM[0];
    m0[4]' = (1-RESET) * m0[4] + FACTOR[4] * inM[0];
    m0[5]' = (1-RESET) * m0[5] + FACTOR[5] * inM[0];
    m0[6]' = (1-RESET) * m0[6] + FACTOR[6] * inM[0];
    m0[7]' = (1-RESET) * m0[7] + FACTOR[7] * inM[0];

    m1[0]' = (1-RESET) * m1[0] + FACTOR[0] * inM[1];
    m1[1]' = (1-RESET) * m1[1] + FACTOR[1] * inM[1];
    m1[2]' = (1-RESET) * m1[2] + FACTOR[2] * inM[1];
    m1[3]' = (1-RESET) * m1[3] + FACTOR[3] * inM[1];
    m1[4]' = (1-RESET) * m1[4] + FACTOR[4] * inM[1];
    m1[5]' = (1-RESET) * m1[5] + FACTOR[5] * inM[1];
    m1[6]' = (1-RESET) * m1[6] + FACTOR[6] * inM[1];
    m1[7]' = (1-RESET) * m1[7] + FACTOR[7] * inM[1];

    // data to "write" on w, if current byte must be override by V contains inV
    // if not contains inM "in reading mode" value don't matter
    // because there are two permutation checks, one for read and other for write.
    pol dataW0 = inM[0] + selM0 * (inV - inM[0]);
    pol dataW1 = inM[1] + selM1 * (inV - inM[1]);

    w0[0]' = (1-RESET) * w0[0] + FACTOR[0] * dataW0;
    w0[1]' = (1-RESET) * w0[1] + FACTOR[1] * dataW0;
    w0[2]' = (1-RESET) * w0[2] + FACTOR[2] * dataW0;
    w0[3]' = (1-RESET) * w0[3] + FACTOR[3] * dataW0;
    w0[4]' = (1-RESET) * w0[4] + FACTOR[4] * dataW0;
    w0[5]' = (1-RESET) * w0[5] + FACTOR[5] * dataW0;
    w0[6]' = (1-RESET) * w0[6] + FACTOR[6] * dataW0;
    w0[7]' = (1-RESET) * w0[7] + FACTOR[7] * dataW0;

    w1[0]' = (1-RESET) * w1[0] + FACTOR[0] * dataW1;
    w1[1]' = (1-RESET) * w1[1] + FACTOR[1] * dataW1;
    w1[2]' = (1-RESET) * w1[2] + FACTOR[2] * dataW1;
    w1[3]' = (1-RESET) * w1[3] + FACTOR[3] * dataW1;
    w1[4]' = (1-RESET) * w1[4] + FACTOR[4] * dataW1;
    w1[5]' = (1-RESET) * w1[5] + FACTOR[5] * dataW1;
    w1[6]' = (1-RESET) * w1[6] + FACTOR[6] * dataW1;
    w1[7]' = (1-RESET) * w1[7] + FACTOR[7] * dataW1;

    pol dataV = inV + selM0 * (inM[0] - inV) + selM1 * (inM[1] - inV);

    // factorV = f(STEP, offset, wr8)
    v[0]' = (1-RESET) * v[0] + factorV[0] * dataV;
    v[1]' = (1-RESET) * v[1] + factorV[1] * dataV;
    v[2]' = (1-RESET) * v[2] + factorV[2] * dataV;
    v[3]' = (1-RESET) * v[3] + factorV[3] * dataV;
    v[4]' = (1-RESET) * v[4] + factorV[4] * dataV;
    v[5]' = (1-RESET) * v[5] + factorV[5] * dataV;
    v[6]' = (1-RESET) * v[6] + factorV[6] * dataV;
    v[7]' = (1-RESET) * v[7] + factorV[7] * dataV;
