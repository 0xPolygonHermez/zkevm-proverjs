
/*
    Equations:
                                                                 selEq   arithEq
    EQ0:   A(x1) * B(y1) + C(x2) = D (y2) * 2 ** 256 + op (y3)       0         1    ARITH

    EQ1:   s * x2 - s * x1 - y2 + y1 + (q0 * p1)    lambda - ADD     1         2    ARITH_ECADD_DIFFERENT
    EQ2:   2 * s * y1 - 3 * x1 * x1 + (q0 * p1)     lambda - DBL     2         3    ARITH_ECADD_SAME
    EQ3:   s * s - x1 - x2 - x3 + (q1 * p1)         x3               3       2,3    ARITH_ECADD_DIFFERENT, ARITH_ECADD_SAME
    EQ4:   s * x1 - s * x3 - y1 - y3 + (q2 * p1)    y3               3       2,3    ARITH_ECADD_DIFFERENT, ARITH_ECADD_SAME

    EQ5:   x1 * x2 - y1 * y2 - x3 + (q1 * p2)                        4         4    ARITH_BN254_MULFP2
    EQ6:   y1 * x2 + x1 * y2 - y3 + (q2 * p2)                        4         4    ARITH_BN254_MULFP2

	EQ7:   x1 + x2 - x3 + (q1 * p2)                                  5         5    ARITH_BN254_ADDFP2
	EQ8:   y1 + y2 - y3 + (q2 * p2)                                  5         5    ARITH_BN254_ADDFP2

	EQ9:   x1 - x2 - x3 + (q1 * p2)                                  6         6    ARITH_BN254_SUBFP2
	EQ10:  y1 - y2 - y3 + (q2 * p2)                                  6         6    ARITH_BN254_SUBFP2

    EQ11:  s * x2 - s * x1 - y2 + y1 + (q0 * p3)    lambda - ADD     7         7    ARITH_SECP256R1_ECADD_DIFFERENT
    EQ12:  2 * s * y1 - 3 * x1 * x1 - a + (q0 * p3) lambda - DBL     8         8    ARITH_SECP256R1_ECADD_SAME
    EQ13:  s * s - x1 - x2 - x3 + (q1 * p3)         x3               9       7,8    ARITH_SECP256R1_ECADD_DIFFERENT, ARITH_SECP256R1_ECADD_SAME
    EQ14:  s * x1 - s * x3 - y1 - y3 + (q2 * p3)    y3               9       7,8    ARITH_SECP256R1_ECADD_DIFFERENT, ARITH_SECP256R1_ECADD_SAME

    where p1 refers to the base field order of:
        · Secp256k1:  0xFFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFE FFFF FC2F
    and p2 refers to the base field order of:
        · BN254:      0x3064 4E72 E131 A029 B850 45B6 8181 585D 9781 6A91 6871 CA8D 3C20 8C16 D87C FD47
    and p3 refers to the base field order of:
        · Secp256r1:  0xFFFF FFFF 0000 0001 0000 0000 0000 0000 0000 0000 FFFF FFFF FFFF FFFF FFFF FFFF

*/
include "global.pil";

namespace Arith(%N);

    pol constant BYTE2_BIT21;
    pol constant SEL_BYTE2_BIT21;
    pol constant GL_SIGNED_22BITS;

    pol commit x1[16];
    pol commit y1[16];
    pol commit x2[16];
    pol commit y2[16];
    pol commit x3[16];
    pol commit y3[16];

    pol commit s[16];
    pol commit q0[16];
    pol commit q1[16];
    pol commit q2[16];

    pol commit resultEq;

    resultEq * (1 - resultEq) = 0;

    // FEATURE:
    //      · Verify that the x1,x2 are different when adding different elliptic curve points (EQ1,EQ3,EQ4).

    // PRE:
    //      · x1,x2,y1,y2 are alias free for EQ[1..10]

    // In the first 16 clocks of 32-clock cycle we have: x2[0]-x1[0], x2[1]-x1[1], ..., x2[15]-x1[15]
    // In the last  16 clocks of 32-clock cycle we set all values to 0.
    pol xDeltaChunk = <%- clksel(['x2[0..15]',], 'Global.CLK32') %>
                    - <%- clksel(['x1[0..15]'], 'Global.CLK32', ' - ') %>;

    // Inverse of current xDeltaChunk. Used to verify that xDeltaChunk is ≠ 0, i.e., when x1[i] ≠ x2[i].
    // This inverse only needs to be calculated one time by cycle.
    pol commit xDeltaChunkInverse;

    // Intermediate pol to indicate that x1 is different from x2 in the current chunk.
    // IMPORTANT: xChunkDifferent == 1 ==> x1[i] ≠ x2[i]
    //            xChunkDifferent == 0 does not imply anything, x1[i] ≠ x2[i] or x1[i] == x2[i].
    // xChunkDifferent was binary, only when xDeltaChunkInverse === inv(xDeltaChunk), its value is 1.
    pol xChunkDifferent = xDeltaChunk * xDeltaChunkInverse;

    // Important, binary constraint
    xChunkDifferent * (1 - xChunkDifferent) = 0;

    // xDeltaChunk  xDeltaChunkInverse  xChunkDifferent
    // -----------  ------------------  -----------------------
    //       0             any          0 * any = 0            OK (A)
    //   x (≠ 0)           0            x * 0 = 0              OK (B)
    //   x (≠ 0)         inv(x)         x * inv(x) = 1         OK (C)
    //   x (≠ 0)      y ≠ {inv(x),0}    x * y = k (≠ 0,1)      FAILS (D)
    //
    // (A) and (C) are the standard cases, but (B) was introduced to avoid calculate the inverse when
    // it is not necessary. xChunkDifferent is well calculed because it's 1 only when x ≠ 0 and inverse
    // it's calculated.

    // xAreDifferent is used to indicate that in current clock we knows that x1 and x2 are different
    pol commit xAreDifferent;

    // Binary constraint
    xAreDifferent * (1 - xAreDifferent) = 0;

    // In first clock of 16-clock cycle, xAreDifferent should not be considered
    // Constraint to force next value of xAreDifferent

    xAreDifferent' = xAreDifferent * (1 - Global.CLK32[0] - Global.CLK32[16]) + xChunkDifferent;

    // xAreDifferent  CLK0+CLK16  xChunkDifferent  xAreDifferent'
    // -------------  ----------  ---------------  --------------
    //        0           0              0            0 OK
    //        0           0              1            1 OK
    //        0           1              0            1 OK
    //        0           1              1            1 OK
    //        1           0              0            1 OK
    //        1           0              1            2 FAILS (A)
    //        1           1              0            1 OK
    //        1           1              1            1 OK
    //
    // xChunkDifferent = 0 ==> (x2[i] - x1[i]) = 0
    // xChunkDifferent = 1 ==> (x2[i] - x1[i]) ≠ 0  ==> x1 and x2 are different
    // (A) forbidden, executor must control this situation, because expending an
    // unnecessary inverse.

    (xAreDifferent - selEq[1] - selEq[7]) * Global.CLK32[16] = 0;

    // COST:   2 commit, 2 im, 0 constant, 4 constraints

    // FEATURE:
    //
    // Verify that the result of Secp256k1, Secp256r1 and BN254 operations are free of aliases, i.e. that x3,y3 ∊ [0, p-1]
    // Here, p refers, respectively, to the base field order of any of the following elliptic curves:
    //
    // Secp256k1:  0xFFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFE FFFF FC2F
    // BN254:      0x3064 4E72 E131 A029 B850 45B6 8181 585D 9781 6A91 6871 CA8D 3C20 8C16 D87C FD47
    // Secp256r1:  0xFFFF FFFF 0000 0001 0000 0000 0000 0000 0000 0000 FFFF FFFF FFFF FFFF FFFF FFFF
    //
    // Strategy: Compare from the most significant chunk to the least significant chunk of x3 and y3 (A). On each chunk,
    // chunkLtPrime indicates whether the chunk is smaller than the FPEC chunk. valueLtPrime indicates if any
    // previous chunk was smaller than the FPEC chunk, which implies that x3 and y3 are smaller than prime.
    //
    // (A) In the first 16 clocks of 32-clock cycle, it is verified that x3 ∊ [0, p-1]
    //     In the last  16 clocks of 32-clock cycle, it is verified that y3 ∊ [0, p-1]
    //
    //    k x chunks equals (B) ==> 1 x chunk lower ==> (15 - k) x any 16 bits value
    //
    // (B) I must verify that the chunks are equal or smaller, never greater at this point. If a malicious prover (MP)
    // claims they are equal when they are actually smaller, that's its issue. At the end, there must be at least one
    // smaller chunk to ensure a smaller value.
    //
    //    k x chunks = chunkPrime ==> 1 x chunk ∊ [0, chunkPrime-1] ==> (15 - k) x chunk ∊ [0, 0xFFFF]
    //
    //                             CLK0    CLK1    CLK2    CLK3    CLK4    CLK5    CLK6    CLK7    CLK8    CLK9   CLK10   CLK11   CLK12   CLK13   CLK14   CLK15
    //   chunkPrime(0..15)     = [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF, 0xFC2F]
    //   chunkPrime(0..15) - 1 = [0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFD, 0xFFFE, 0xFC2E]
    //   chunkPrime(0..15)     = [0x3064, 0x4e72, 0xe131, 0xa029, 0xb850, 0x45b6, 0x8181, 0x585d, 0x9781, 0x6a91, 0x6871, 0xca8d, 0x3c20, 0x8c16, 0xd87c, 0xfd47]
    //   chunkPrime(0..15) - 1 = [0x3063, 0x4e71, 0xe130, 0xa028, 0xb84f, 0x45b5, 0x8180, 0x585c, 0x9780, 0x6a90, 0x6870, 0xca8c, 0x3c1f, 0x8c15, 0xd87b, 0xfd46]
    //   chunkPrime(0..15)     = [0xFFFF, 0xFFFF, 0x0000, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF]
    //   chunkPrime(0..15) - 1 = [0xFFFE, 0xFFFE,    N/A, 0x0000,    N/A,    N/A,    N/A,    N/A,    N/A,    N/A, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFE]
    //
    //   N/A: means there aren't valid values, if prover said that this chunk is smaller it's false.
    //   NOTE: first block of 2^16 values are all valid, This is convenient because the range selector 0 then indicates any valid 16-bit value
    //
    //   RANGE_SEL   BYTE2
    //          0    0..2**16-1
    //   ----------------------------
    //          1    0..2**16-2
    //          0    2**16-1       (*)
    //   -----------------------------
    //          2    0..TO             <--- this block check a value from 0..TO
    //          0    TO+1..2**16-1 (*)      (even range_sel was used to check a value not is greater than prime chunk)
    //   -----------------------------
    //          3    0..TO-1           <--- this block check a value less than TO
    //          0    TO..2**16-1   (*)      (odd range_sel was used to check a value is less than prime chunk)
    //   -----------------------------
    //
    //   (*) it's possible compact table if invalid values are eleminated, but after it's necessary a constant pol to
    //       indicate values. If this values remains with range_sel = 0, it's possible reuse BYTE2 for values.
    //
    //   -----------------------------
    //        2*K    0                 <--- this block check a value is 0.
    //          0    1..2**16-1
    //   -----------------------------
    //          0    1..2**16-1        <--- no values less than 0.
    //   -----------------------------
    //
    //   BLOCKS (2**16) x 16 clocks/chunks = 2**20 values * 7 blocks = (2**22 - 2**20) < 2**23
    //   -------------------------------------------------------------------------------------
    //                               (clp)
    //   0:     FULL            ( 0 +  0 + 0,1,2,3,4,5,6,7,8,...,14,15)
    //   1:     pSecp256k1      (16 +  0 + 0,1,2,3,4,5,6,7,8,...,14,15)
    //   2:     LT(pSecp256k1)  (16 + 16 + 0,1,2,3,4,5,6,7,8,...,14,15)
    //   3:     BN254           (48 +  0 + 0,1,2,3,4,5,6,7,8,...,14,15)
    //   4:     LT(BN254)       (48 + 16 + 0,1,2,3,4,5,6,7,8,...,14,15)
    //   5:     pSecp256r1      (80 +  0 + 0,1,2,3,4,5,6,7,8,...,14,15)
    //   6:     LT(pSecp256r1)  (80 + 16 + 0,1,2,3,4,5,6,7,8,...,14,15)
    //
    //                              clp = chunkLtPrime * 16
    //
    //   valueLtPrime' = valueLtPrime * (1 - CLK0 - CLK16) + chunkLtPrime
    //
    //   valueLtPrime  chunkLtPrime  CLK0+CLK16  valueLtPrime'
    //
    //         0             0           0            0            OK
    //         0             1           0            1            OK
    //         1             0           0            1            OK
    //         1             1           0            2            FAILS, valueLtPrime not binary (D)
    //
    //         0             0           1            0            OK
    //         0             1           1            1            OK
    //         1             0           1            0            OK
    //         1             1           1            1            OK (E)
    //
    //   (D) when valueLtPrime = 0 ==> chunkLtPrime must be zero, if not it FAILS
    //   (E) on clocks 0 and 16, current value of valueLtPrime isn't considered
    //
    //    //    Examples (Secp256k1 prime):
    //                                ┌──────── pRange
    //              ┌── max_value     │  ┌───── chunkLtPrime
    //              │     ┌─ example  │  │  ┌── valueLtPrime
    //              │     │           │  │  │
    //    CLK0    0xFFFF  0xFFFF     16  0  0
    //    CLK1    0xFFFF  0xFF00     19  1  0  // RANGE [0, 0xFFFE]
    //    CLK2    0xFFFF  0x0000      0  0  1
    //    CLK3    0xFFFF  0x0000      0  0  1
    //    CLK4    0xFFFF  0xFFFF      0  0  1
    //    :
    //    CLK15   0xFC2F  0xFFFF      0  0  1
    //    CLK16   0xFFFF  0xFFFF      0  0  1
    //
    //
    //                                ┌──────── pRange
    //              ┌── max_value     │  ┌───── chunkLtPrime
    //              │     ┌─ example  │  │  ┌── valueLtPrime
    //              │     │           │  │  │
    //    CLK0    0xFFFF  0xFFFF     16  0  0
    //    CLK1    0xFFFF  0xFFFF     18  0  0
    //    CLK2    0xFFFF  0xFFFF     20  0  0
    //    :
    //    CLK12   0xFFFF  0xFFFF     40  0  0
    //    CLK13   0xFFFE  0xFFFF     42  0  0    // CLK13 == 1 RANGE [0, 0xFFFE]
    //    CLK14   0xFFFF  0xFFFF     44  0  0
    //    CLK15   0xFC2F  0xFC00     47  1  0    // CLK15 == 1 RANGE [0, 0xFC2F] 47 = 46+1
    //    CLK16   0xFFFF  0xFFFF      0  0  1

    // valueLtPrime indicates whether, at this point, we know that the value is smaller than the prime.
    // If selEq[3],selEq[4],selEq[5],selEq[6],selEq[9] == 0, it must be 0.
    pol commit valueLtPrime;

    // chunkLtPrime indicates whether the current value chunk is smaller than the prime chunk.
    // If selEq[3],selEq[4],selEq[5],selEq[6],selEq[9] == 0 or valueLtPrime = 1, it must be 0.
    pol commit chunkLtPrime;

    // binary constraints
    chunkLtPrime * (1 - chunkLtPrime) = 0;
    valueLtPrime * (1 - valueLtPrime) = 0;

    // This constraint applies to the next value of valueLtPrime. At the beginning of each 16-clock cycle,
    // valueLtPrime is ignored because it refers to the previous value.
    valueLtPrime' = valueLtPrime * (1 - Global.CLK32[0] - Global.CLK32[16]) + chunkLtPrime;

    // This constraint is used to verify (and to enforce) that at the end of a 16-clock cycle, valueLtPrime is equal to 1.
    // This constraint is applied when one of selEq[3],selEq[4],selEq[5],selEq[6],selEq[9] equals 1.
    (valueLtPrime' - selEq[3] - selEq[4] - selEq[5] - selEq[6] - selEq[9]) * (Global.CLK32[15] + Global.CLK32[31]) = 0;

    pol constant RANGE_SEL;

    // lookup with RANGE_SEL as first column and BYTE2 as second column
    {(<%- clksel(['[0..15]','[0..15]'], 'Global.CLK32') %>
        + 16 * selEq[3] + 48 * selEq[4] + 48 * selEq[5] + 48 *selEq[6] + 80 * selEq[9] + 16 * chunkLtPrime) * (1 - valueLtPrime), <%- clksel(['x3[15..0]','y3[15..0]'], 'Global.CLK32') %>} in {RANGE_SEL, Global.BYTE2};

    /****
    *
    * LATCH POLS: x1,y1,x2,y2,x3,y3,s,q0,q1,q2
    *
    *****/

    <%- latch('x1[0..15]','Global.CLK32[31]') %>

    <%- latch('y1[0..15]','Global.CLK32[31]') %>

    <%- latch('x2[0..15]','Global.CLK32[31]') %>

    <%- latch('y2[0..15]','Global.CLK32[31]') %>

    <%- latch('x3[0..15]','Global.CLK32[31]') %>

    <%- latch('y3[0..15]','Global.CLK32[31]') %>

    <%- latch('s[0..15]','Global.CLK32[31]') %>

    <%- latch('q0[0..15]','Global.CLK32[31]') %>

    <%- latch('q1[0..15]','Global.CLK32[31]') %>

    <%- latch('q2[0..15]','Global.CLK32[31]') %>

    /****
    *
    * RANGE CHECK x1,y1,x2,y2,s,q0,q1,q2
    *
    *****/

    <%- clksel(['x1[0..15]','y1[0..15]'], 'Global.CLK32') %> in Global.BYTE2;

    <%- clksel(['x2[0..15]','y2[0..15]'], 'Global.CLK32') %> in Global.BYTE2;

    <%- clksel(['s[0..15]','q0[0..14]','q1[0]'], 'Global.CLK32') %> in Global.BYTE2;

    {Global.CLK32[29] + Global.CLK32[30] + Global.CLK32[31], <%- clksel(['q1[1..14]','q2[0..14]','q0[15]','q1[15]','q2[15]'], 'Global.CLK32') %>} in {SEL_BYTE2_BIT21, BYTE2_BIT21};

    /*******
    *
    * EQ0: A(x1) * B(y1) + C(x2) = D (y2) * 2 ** 256 + op (y3)
    *
    *******/

    <%- equation('pol eq0_## =', 'x1*y1-p2_256*y2+x2-y3', {p2_256: 0x10000000000000000000000000000000000000000000000000000000000000000n}) %>

    /*******
    *
    * EQ1: s * x2 - s * x1 - y2 + y1 - p * (q0 - offset) = 0
    *
    *******/

    <%- equation('pol eq1_## =', 's*x2-s*x1-y2+y1-p*q0+p*offset', {p: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2fn,
                                                                   offset:0x20000000000000000000000000000000000000000000000000000000000000000n}) %>

    /*******
    *
    * EQ2:  2 * s * y1 - 3 * x1 * x1 + p * (q0 - offset) = 0
    *
    *******/

    <%- equation('pol eq2_## =', 's*y1+s*y1-x1*x1-x1*x1-x1*x1+p*q0-p*offset', {p: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2fn,
                                                                               offset:0x40000000000000000000000000000000000000000000000000000000000000000n}) %>

    /*******
    *
    * EQ3:  s * s - x1 - x2 - x3 - p * (q1 - offset) = 0
    *
    *******/

    <%- equation('pol eq3_## =', 's*s-x1-x2-x3-p*q1+p*offset', {p: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2fn,
                                                                offset:0x4n}) %>

    /*******
    *
    * EQ4:  s * x1 - s * x3 - y1 - y3 + p * (q2 - offset) = 0
    *
    *******/

    <%- equation('pol eq4_## =', 's*x1-s*x3-y1-y3+p*q2-p*offset', {p: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2fn,
                                                                   offset:0x20000000000000000000000000000000000000000000000000000000000000000n}) %>

    /*******
    *
    * EQ5:  x1 * x2 - y1 * y2 - x3 + p * (q1 - offset) = 0
    *
    *******/

    <%- equation('pol eq5_## =', 'x1*x2-y1*y2-x3+p*q1-p*offset', {p: 21888242871839275222246405745257275088696311157297823662689037894645226208583n,
                                                                  offset:0x80000000000000000000000000000000000000000000000000000000000000000n}) %>

    /*******
    *
    * EQ6:  y1 * x2 + x1 * y2 - y3 - p * (q2 - offset) = 0
    *
    *******/

    <%- equation('pol eq6_## =', 'y1*x2+x1*y2-y3-p*q2+p*offset', {p: 21888242871839275222246405745257275088696311157297823662689037894645226208583n,
                                                                  offset: 0x8n}) %>

    /*******
    *
    * EQ7:  x1 + x2 - x3 - p * (q1 - offset) = 0
    *
    *******/

    <%- equation('pol eq7_## =', 'x1+x2-x3-p*q1+p*offset', {p: 21888242871839275222246405745257275088696311157297823662689037894645226208583n,
                                                            offset: 0x8n}) %>

    /*******
    *
    * EQ8:  y1 + y2 - y3 - p * (q2 - offset) = 0
    *
    *******/

    <%- equation('pol eq8_## =', 'y1+y2-y3-p*q2+p*offset', {p: 21888242871839275222246405745257275088696311157297823662689037894645226208583n,
                                                            offset: 0x8n}) %>


    /*******
    *
    * EQ9:  x1 - x2 - x3 + p * (q1 - offset) = 0
    *
    *******/

    <%- equation('pol eq9_## =', 'x1-x2-x3+p*q1-p*offset', {p: 21888242871839275222246405745257275088696311157297823662689037894645226208583n,
                                                            offset: 0x8n}) %>

    /*******
    *
    * EQ10:  y1 - y2 - y3 + p * (q2 - offset) = 0
    *
    *******/

    <%- equation('pol eq10_## =', 'y1-y2-y3+p*q2-p*offset', {p: 21888242871839275222246405745257275088696311157297823662689037894645226208583n,
                                                             offset: 0x8n}) %>

    /*******
    *
    * EQ11: s * x2 - s * x1 - y2 + y1 - p * (q0 - offset) = 0
    *
    *******/

    <%- equation('pol eq11_## =', 's*x2-s*x1-y2+y1-p*q0+p*offset', {p: 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffffn,
                                                                   offset:0x20000000000000000000000000000000000000000000000000000000000000000n}) %>

    /*******
    *
    * EQ12:  2 * s * y1 - 3 * x1 * x1 - a + (q0 * offset) = 0
    *
    *******/

    <%- equation('pol eq12_## =', 's*y1+s*y1-x1*x1-x1*x1-x1*x1-a+p*q0-p*offset', {a: 0xffffffff00000001000000000000000000000000fffffffffffffffffffffffcn,
                                                                                  p: 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffffn,
                                                                                 offset:0x40000000000000000000000000000000000000000000000000000000000000000n}) %>

    /*******
    *
    * EQ13:  s * s - x1 - x2 - x3 - p * (q1 - offset) = 0
    *
    *******/

    <%- equation('pol eq13_## =', 's*s-x1-x2-x3-p*q1+p*offset', {p: 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffffn,
                                                                offset:0x4n}) %>

    /*******
    *
    * EQ14:  s * x1 - s * x3 - y1 - y3 + p * (q2 - offset) = 0
    *
    *******/

    <%- equation('pol eq14_## =', 's*x1-s*x3-y1-y3+p*q2-p*offset', {p: 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffffn,
                                                                   offset:0x20000000000000000000000000000000000000000000000000000000000000000n}) %>



    pol eq0 = <%- clksel(['eq0_[0..31]'], 'Global.CLK32') %>;
    pol eq1 = <%- clksel(['eq1_[0..31]'], 'Global.CLK32') %>;
    pol eq2 = <%- clksel(['eq2_[0..31]'], 'Global.CLK32') %>;
    pol eq3 = <%- clksel(['eq3_[0..31]'], 'Global.CLK32') %>;
    pol eq4 = <%- clksel(['eq4_[0..31]'], 'Global.CLK32') %>;
    pol eq5 = <%- clksel(['eq5_[0..31]'], 'Global.CLK32') %>;
    pol eq6 = <%- clksel(['eq6_[0..31]'], 'Global.CLK32') %>;
    pol eq7 = <%- clksel(['eq7_[0..31]'], 'Global.CLK32') %>;
    pol eq8 = <%- clksel(['eq8_[0..31]'], 'Global.CLK32') %>;
    pol eq9 = <%- clksel(['eq9_[0..31]'], 'Global.CLK32') %>;
    pol eq10 = <%- clksel(['eq10_[0..31]'], 'Global.CLK32') %>;
    pol eq11 = <%- clksel(['eq11_[0..31]'], 'Global.CLK32') %>;
    pol eq12 = <%- clksel(['eq12_[0..31]'], 'Global.CLK32') %>;
    pol eq13 = <%- clksel(['eq13_[0..31]'], 'Global.CLK32') %>;
    pol eq14 = <%- clksel(['eq14_[0..31]'], 'Global.CLK32') %>;

    pol commit selEq[10];

    <%- latch(['selEq[0..6]'],'Global.CLK32[31]') %>
    <%- binary(['selEq[0..6]']) %>

    pol commit carry[3];

    carry[0] * Global.CLK32[0] = 0;
    carry[1] * Global.CLK32[0] = 0;
    carry[2] * Global.CLK32[0] = 0;

    carry[0] in GL_SIGNED_22BITS;
    carry[1] in GL_SIGNED_22BITS;
    carry[2] in GL_SIGNED_22BITS;

    selEq[0] * (eq0 + carry[0]) = selEq[0] * carry[0]' * 2**16;
    selEq[1] * (eq1 + carry[0]) = selEq[1] * carry[0]' * 2**16;
    selEq[2] * (eq2 + carry[0]) = selEq[2] * carry[0]' * 2**16;
    selEq[3] * (eq3 + carry[1]) = selEq[3] * carry[1]' * 2**16;
    selEq[3] * (eq4 + carry[2]) = selEq[3] * carry[2]' * 2**16;
    selEq[4] * (eq5 + carry[1]) = selEq[4] * carry[1]' * 2**16;
    selEq[4] * (eq6 + carry[2]) = selEq[4] * carry[2]' * 2**16;
    selEq[5] * (eq7 + carry[1]) = selEq[5] * carry[1]' * 2**16;
    selEq[5] * (eq8 + carry[2]) = selEq[5] * carry[2]' * 2**16;
    selEq[6] * (eq9 + carry[1]) = selEq[6] * carry[1]' * 2**16;
    selEq[6] * (eq10 + carry[2]) = selEq[6] * carry[2]' * 2**16;
    selEq[7] * (eq11 + carry[0]) = selEq[7] * carry[0]' * 2**16;
    selEq[8] * (eq12 + carry[0]) = selEq[8] * carry[0]' * 2**16;
    selEq[9] * (eq13 + carry[1]) = selEq[9] * carry[1]' * 2**16;
    selEq[9] * (eq14 + carry[2]) = selEq[9] * carry[2]' * 2**16;
