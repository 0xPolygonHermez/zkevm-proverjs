pragma circom 2.1.0;
pragma custom_templates;

include "recursive1.verifier.circom";
include "mux1.circom";
include "iszero.circom";

template Main() {

    var rootCSingle[4] = [<%- constRoot.join(",") %>];

    signal input publics[44];
    signal input rootC[4];

    signal input a_publics[44];

    signal input a_root1[4];
    signal input a_root2[4];
    signal input a_root3[4];
    signal input a_root4[4];

    signal input a_evals[<%- starkInfo.evMap.length %>][3];

    signal input a_s0_vals1[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm1_n %>];
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    signal input a_s0_vals2[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm2_n %>];
<% } -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    signal input a_s0_vals3[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm3_n %>];
<% } -%>
    signal input a_s0_vals4[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm4_n %>];
    signal input a_s0_valsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.nConstants %>];
    signal input a_s0_siblings1[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    signal input a_s0_siblings2[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<% } -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    signal input a_s0_siblings3[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<% } -%>
    signal input a_s0_siblings4[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
    signal input a_s0_siblingsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];

<% for (let s=1; s<starkInfo.starkStruct.steps.length; s++) {   -%>
    signal input a_s<%- s %>_root[4];
<% }                                                  -%>

<% for (let s=1; s< starkInfo.starkStruct.steps.length; s++) {   -%>
    signal input a_s<%- s %>_vals[<%- starkInfo.starkStruct.nQueries %>][<%- (1 << parseInt(starkInfo.starkStruct.steps[s-1].nBits - starkInfo.starkStruct.steps[s].nBits))*3 %>];
    signal input a_s<%- s %>_siblings[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[s].nBits %>][4];
<% }                                                  -%>
   
    signal input a_finalPol[<%- 1 << parseInt(starkInfo.starkStruct.steps[starkInfo.starkStruct.steps.length-1].nBits) %>][3];

    signal input b_publics[44];

    signal input b_root1[4];
    signal input b_root2[4];
    signal input b_root3[4];
    signal input b_root4[4];
    signal input b_evals[<%- starkInfo.evMap.length %>][3];

    signal input b_s0_vals1[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm1_n %>];
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    signal input b_s0_vals2[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm2_n %>];
<% } -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    signal input b_s0_vals3[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm3_n %>];
<% } -%>
    signal input b_s0_vals4[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm4_n %>];
    signal input b_s0_valsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.nConstants %>];
    signal input b_s0_siblings1[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    signal input b_s0_siblings2[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<% } -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    signal input b_s0_siblings3[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<% } -%>
    signal input b_s0_siblings4[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
    signal input b_s0_siblingsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];

<% for (let s=1; s<starkInfo.starkStruct.steps.length; s++) {   -%>
    signal input b_s<%- s %>_root[4];
<% }                                                  -%>

<% for (let s=1; s< starkInfo.starkStruct.steps.length; s++) {   -%>
    signal input b_s<%- s %>_vals[<%- starkInfo.starkStruct.nQueries %>][<%- (1 << parseInt(starkInfo.starkStruct.steps[s-1].nBits - starkInfo.starkStruct.steps[s].nBits))*3 %>];
    signal input b_s<%- s %>_siblings[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[s].nBits %>][4];
<% }                                                  -%>

    signal input b_finalPol[<%- 1 << parseInt(starkInfo.starkStruct.steps[starkInfo.starkStruct.steps.length-1].nBits) %>][3];

    component vA = StarkVerifier();

    for (var i=0; i<44; i++) {
        vA.publics[i] <== a_publics[i];
    }
    vA.root1 <== a_root1;
    vA.root2 <== a_root2;
    vA.root3 <== a_root3;
    vA.root4 <== a_root4;
    vA.evals <== a_evals;
    vA.s0_vals1 <== a_s0_vals1;
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    vA.s0_vals2 <== a_s0_vals2;
<% } -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    vA.s0_vals3 <== a_s0_vals3;
<% } -%>
    vA.s0_vals4 <== a_s0_vals4;
    vA.s0_valsC <== a_s0_valsC;
    vA.s0_siblings1 <== a_s0_siblings1;
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    vA.s0_siblings2 <== a_s0_siblings2;
<% } -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    vA.s0_siblings3 <== a_s0_siblings3;
<% } -%>
    vA.s0_siblings4 <== a_s0_siblings4;
    vA.s0_siblingsC <== a_s0_siblingsC;
<% for (let s=1; s<starkInfo.starkStruct.steps.length; s++) {   -%>
    vA.s<%- s %>_root <== a_s<%- s %>_root;
<% }                                                  -%>
<% for (let s=1; s<starkInfo.starkStruct.steps.length; s++) {   -%>
    vA.s<%- s %>_vals <== a_s<%- s %>_vals;
    vA.s<%- s %>_siblings <== a_s<%- s %>_siblings;
<% }                                                  -%>
    vA.finalPol <== a_finalPol;

    signal isOneBatchA <== IsZero()(a_publics[43] - a_publics[16] - 1);
    vA.rootC <== MultiMux1(4)([rootC, rootCSingle], isOneBatchA);
    
    for (var i=0; i<4; i++) {
        vA.publics[44+i] <== rootC[i];
    }

    component vB = StarkVerifier();

    for (var i=0; i<44; i++) {
        vB.publics[i] <== b_publics[i];
    }
    vB.root1 <== b_root1;
    vB.root2 <== b_root2;
    vB.root3 <== b_root3;
    vB.root4 <== b_root4;
    vB.evals <== b_evals;
    vB.s0_vals1 <== b_s0_vals1;
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    vB.s0_vals2 <== b_s0_vals2;
<% } -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    vB.s0_vals3 <== b_s0_vals3;
<% } -%>
    vB.s0_vals4 <== b_s0_vals4;
    vB.s0_valsC <== b_s0_valsC;
    vB.s0_siblings1 <== b_s0_siblings1;
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    vB.s0_siblings2 <== b_s0_siblings2;
<% } -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    vB.s0_siblings3 <== b_s0_siblings3;
<% } -%>
    vB.s0_siblings4 <== b_s0_siblings4;
    vB.s0_siblingsC <== b_s0_siblingsC;
<% for (let s=1; s<starkInfo.starkStruct.steps.length; s++) {   -%>
    vB.s<%- s %>_root <== b_s<%- s %>_root;
<% }                                                  -%>
<% for (let s=1; s<starkInfo.starkStruct.steps.length; s++) {   -%>
    vB.s<%- s %>_vals <== b_s<%- s %>_vals;
    vB.s<%- s %>_siblings <== b_s<%- s %>_siblings;
<% }                                                  -%>
    vB.finalPol <== b_finalPol;


    signal isOneBatchB <== IsZero()(b_publics[43] - b_publics[16] - 1);
    vB.rootC <== MultiMux1(4)([rootC, rootCSingle], isOneBatchB);

    for (var i=0; i<4; i++) {
        vB.publics[44+i] <== rootC[i];
    }

    // oldStateRoot
    for (var i=0; i<8; i++) {
        a_publics[i] === publics[i];
    }

    // oldAccInputHash
    for (var i=8; i<16; i++) {
        a_publics[i] === publics[i];
    }

    // oldBatchNum
    a_publics[16] === publics[16];

    // chainId
    a_publics[17] === publics[17];

    // forkId
    a_publics[18] === publics[18];

    // midStateRoot
    for (var i=0; i<8; i++) {
        b_publics[i] === a_publics[19+i];
    }

    // midAccInputHash
    for (var i=8; i<16; i++) {
        b_publics[i] === a_publics[19+i];
    }

    // midBatchNum
    b_publics[16] === a_publics[19+24];

    // chainId
    b_publics[17] === publics[17];

    // forkId
    b_publics[18] === publics[18];


    // newStateRoot
    for (var i=0; i<8; i++) {
        publics[19+i] === b_publics[19+i];
    }

    // newAccInputHash
    for (var i=8; i<16; i++) {
        publics[19+i] === b_publics[19+i];
    }

    // localExitRoot
    for (var i=16; i<24; i++) {
        publics[19+i] === b_publics[19+i];
    }

    // newBatchNum
    publics[19+24] === b_publics[19+24];

}

component main {public [publics, rootC]}= Main();
