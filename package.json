{
  "name": "@0xpolygonhermez/zkevm-proverjs",
  "version": "6.0.0",
  "description": "JS version of the zkProver.",
  "main": "index.js",
  "config": {
    "steps_piltoolfiles": [
      "buildrom buildpil buildstoragerom buildconstants exec"
    ],
    "steps": [
      "buildrom buildpil buildstoragerom buildconstants exec pilverify buildstarkinfo buildchelpers buildconstanttree prove verify gencircom compilecircom",
      "c12a_setup c12a_buildstarkinfo c12a_buildchelpers c12a_exec c12a_pilverify c12a_buildconstanttree c12a_prove c12a_verify c12a_gencircom",
      "recursive1_gencircom recursive1_compile recursive1_setup recursive1_buildstarkinfo recursive1_buildchelpers recursive1_buildconstanttree recursive1_verifier_gencircom",
      "recursive2_gencircom recursive2_compile recursive2_setup recursive2_buildstarkinfo recursive2_buildchelpers recursive2_buildconstanttree recursive2_verifier_gencircom",
      "recursive_pil_check recursive_verifier_check ",
      "recursivef_gencircom recursivef_compile recursivef_setup recursivef_buildstarkinfo recursivef_buildchelpers recursivef_buildconstanttree  recursivef_verifier_gencircom",
      "final_gencircom final_compile",
      "fflonk_setup fflonk_evk fflonk_solidity"
    ],
    "steps_setup": [
      "buildrom buildpil buildstoragerom buildconstants buildstarkinfo buildchelpers buildconstanttree gencircom compilecircom",
      "c12a_setup c12a_buildstarkinfo c12a_buildchelpers c12a_buildconstanttree c12a_gencircom",
      "recursive1_gencircom recursive1_compile recursive1_setup recursive1_buildstarkinfo recursive1_buildchelpers recursive1_buildconstanttree recursive1_verifier_gencircom",
      "recursive2_gencircom recursive2_compile recursive2_setup recursive2_buildstarkinfo recursive2_buildchelpers recursive2_buildconstanttree recursive2_verifier_gencircom",
      "recursive_pil_check recursive_verifier_check ",
      "recursivef_gencircom recursivef_compile recursivef_setup recursivef_buildstarkinfo recursivef_buildchelpers recursivef_buildconstanttree  recursivef_verifier_gencircom",
      "final_gencircom final_compile",
      "fflonk_setup fflonk_evk fflonk_solidity"
    ],
    "steps_proof": [
      "exec pilverify prove verify",
      "c12a_exec c12a_pilverify c12a_prove c12a_verify"
    ]
  },
  "scripts": {
    "build:input": "node tools/build-genesis/build_genesis.js",
    "build:input-recursive": "node tools/build-genesis-recursive/build_genesis_recursive.js",
    "buildall": "tools/build_all.sh ${npm_package_config_steps}",
    "buildpiltoolfiles": "tools/build_all.sh ${npm_package_config_steps_piltoolfiles}",
    "buildsetup": "tools/build_all.sh ${npm_package_config_steps_setup}",
    "buildproof": "tools/build_all.sh ${npm_package_config_steps_proof}",
    "buildrom": ". ./pre.sh && ROM_DIR=node_modules/@0xpolygonhermez/$ROM && echo \"ROM_DIR: $ROM_DIR\" && (cd $ROM_DIR && npm run build) && cp $ROM_DIR/build/rom.json $ROM_DIR/build/metadata-rom.txt $BDIR/",
    "buildstoragerom": ". ./pre.sh && ROM_DIR=node_modules/@0xpolygonhermez/zkevm-storage-rom && (cd $ROM_DIR && npm run build:rom) && cp $ROM_DIR/build/storage_sm_rom.json src/sm/sm_storage && cp src/sm/sm_storage/storage_sm_rom.json $BDIR/",
    "buildpil": ". ./pre.sh && mkdir -p $BDIR/pil/zkevm && echo \"PIL: $PIL\" &&  node $NODE node_modules/.bin/pilcom $PIL -o $BDIR/pil/zkevm/$PIL_JSON -c $BDIR/pols_generated -n fork_1 && for PF in `tools/included_pils.sh $BDIR/pil/zkevm/$PIL_JSON`; do cp -v $PIL_DIR/$PF $BDIR/pil/zkevm/$PF; done",
    "buildconstants": ". ./pre.sh && node $NODE src/main_buildconstants -p $PIL -r $BDIR/rom.json -o $BDIR/zkevm.const",
    "exec": ". ./pre.sh && INPUT=${npm_config_input:=tools/build-genesis/input_executor.json} && echo \"input: $INPUT\" && node $NODE src/main_executor $INPUT -p $PIL -r $BDIR/rom.json -o $BDIR/zkevm$NTH.commit && cp $INPUT $BDIR/input_executor.json",
    "pilverify": ". ./pre.sh && $PILCOM/main_pilverifier.js $BDIR/zkevm$NTH.commit -c $BDIR/zkevm.const -p $PIL",
    "prebuildstarkinfo": ". ./pre.sh && if [ \"$npm_config_starkstruct\" = \"debug\" ]; then node tools/gen_debug_starkstruct.js -t GL -p $PIL -s $BDIR/zkevm.starkstruct.json; else cp src/zkevm${MODE_TAG}.starkstruct.json $BDIR/zkevm.starkstruct.json; fi",
    "buildstarkinfo": ". ./pre.sh && $PILSTARK/main_genstarkinfo.js -p $PIL -s $BDIR/zkevm.starkstruct.json -i $BDIR/zkevm.starkinfo.json",
    "buildchelpers": ". ./pre.sh && $PILSTARK/main_buildchelpers.js -s $BDIR/zkevm.starkinfo.json -c $BDIR/zkevm.chelpers -b $BDIR/zkevm.chelpers.bin -g $BDIR/zkevm.chelpers_generic.bin -C Zkevm",
    "buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/zkevm.const -p $PIL -s $BDIR/zkevm.starkinfo.json -t $BDIR/zkevm.consttree -v $BDIR/zkevm.verkey.json",
    "prove": ". ./pre.sh && $PILSTARK/main_prover.js -m $BDIR/zkevm$NTH.commit  -c $BDIR/zkevm.const -t $BDIR/zkevm.consttree -p $PIL -s $BDIR/zkevm.starkinfo.json -o $BDIR/zkevm$NTH.proof.json -z $BDIR/zkevm$NTH.zkin.proof.json -b $BDIR/zkevm$NTH.public.json",
    "verify": ". ./pre.sh && $PILSTARK/main_verifier.js -p $PIL -s $BDIR/zkevm.starkinfo.json -o $BDIR/zkevm$NTH.proof.json -b $BDIR/zkevm$NTH.public.json -v $BDIR/zkevm.verkey.json",
    "gencircom": ". ./pre.sh && $PILSTARK/main_pil2circom.js -p $PIL -s $BDIR/zkevm.starkinfo.json -v $BDIR/zkevm.verkey.json -o $BDIR/zkevm.verifier.circom",
    "compilecircom": ". ./pre.sh && circom --O1 --prime goldilocks --r1cs --sym --wasm --c --verbose $BDIR/zkevm.verifier.circom -o $BDIR -l node_modules/pil-stark/circuits.gl",
    "c12a_setup": ". ./pre.sh && $PILSTARK/compressor/main_compressor_setup.js  -r $BDIR/zkevm.verifier.r1cs  -p $BDIR/c12a.pil -c $BDIR/c12a.const -e $BDIR/c12a.exec --cols=18",
    "c12a_buildstarkinfo": ". ./pre.sh && $PILSTARK/main_genstarkinfo.js -p $BDIR/c12a.pil -s $BDIR/c12a.starkstruct.json -i $BDIR/c12a.starkinfo.json",
    "c12a_buildchelpers": ". ./pre.sh && $PILSTARK/main_buildchelpers.js -s $BDIR/c12a.starkinfo.json -c $BDIR/c12a.chelpers -b $BDIR/c12a.chelpers.bin -g $BDIR/c12a.chelpers_generic.bin -C C12a",
    "c12a_exec": ". ./pre.sh && $PILSTARK/compressor/main_compressor_exec.js -i $BDIR/zkevm.zkin.proof.json -w $BDIR/zkevm.verifier_js/zkevm.verifier.wasm -p $BDIR/c12a.pil -e $BDIR/c12a.exec -m $BDIR/c12a.commit",
    "c12a_pilverify": ". ./pre.sh && $PILCOM/main_pilverifier.js $BDIR/c12a.commit -c $BDIR/c12a.const -p $BDIR/c12a.pil",
    "c12a_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/c12a.const -p $BDIR/c12a.pil -s $BDIR/c12a.starkinfo.json -t $BDIR/c12a.consttree -v $BDIR/c12a.verkey.json",
    "c12a_prove": ". ./pre.sh && $PILSTARK/main_prover.js -m $BDIR/c12a.commit -c $BDIR/c12a.const -t $BDIR/c12a.consttree -p $BDIR/c12a.pil -s $BDIR/c12a.starkinfo.json -o $BDIR/c12a.proof.json -z $BDIR/c12a.zkin.proof.json -b $BDIR/c12a.public.json",
    "c12a_verify": ". ./pre.sh && $PILSTARK/main_verifier.js -p $BDIR/c12a.pil -s $BDIR/c12a.starkinfo.json -o $BDIR/c12a.proof.json -b $BDIR/c12a.public.json -v $BDIR/c12a.verkey.json",
    "c12a_gencircom": ". ./pre.sh && $PILSTARK/main_pil2circom.js --skipMain -p $BDIR/c12a.pil -s $BDIR/c12a.starkinfo.json -v $BDIR/c12a.verkey.json -o $BDIR/c12a.verifier.circom",
    "recursive1_gencircom": ". ./pre.sh && cp recursive/recursive1.circom $BDIR",
    "recursive1_compile": ". ./pre.sh && circom --r1cs --sym --wasm --c --verbose --O1 --prime goldilocks $BDIR/recursive1.circom -o $BDIR -l node_modules/pil-stark/circuits.gl",
    "recursive1_setup": ". ./pre.sh && $PILSTARK/compressor/main_compressor_setup.js -r $BDIR/recursive1.r1cs -p $BDIR/recursive1.pil -c $BDIR/recursive1.const -e $BDIR/recursive1.exec --cols=18",
    "recursive1_buildstarkinfo": ". ./pre.sh && $PILSTARK/main_genstarkinfo.js -p $BDIR/recursive1.pil -s $BDIR/recursive.starkstruct.json -i $BDIR/recursive1.starkinfo.json",
    "recursive1_buildchelpers": ". ./pre.sh && $PILSTARK/main_buildchelpers.js -s $BDIR/recursive1.starkinfo.json -c $BDIR/recursive1.chelpers -b $BDIR/recursive1.chelpers.bin -g $BDIR/recursive1.chelpers_generic.bin -C Recursive1",
    "recursive1_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/recursive1.const -p $BDIR/recursive1.pil -s $BDIR/recursive1.starkinfo.json -t $BDIR/recursive1.consttree -v $BDIR/recursive1.verkey.json",
    "recursive1_verifier_gencircom": ". ./pre.sh && $PILSTARK/main_pil2circom.js --skipMain --verkeyInput -p $BDIR/recursive1.pil -s $BDIR/recursive1.starkinfo.json -v $BDIR/recursive1.verkey.json -o $BDIR/recursive1.verifier.circom",
    "recursive2_gencircom": ". ./pre.sh && node $NODE src/main_genrecursive.js -v $BDIR/recursive1.verkey.json -o $BDIR/recursive2.circom",
    "recursive2_compile": ". ./pre.sh && circom --r1cs --sym --wasm --c --verbose --O1 --prime goldilocks $BDIR/recursive2.circom -o $BDIR -l node_modules/pil-stark/circuits.gl",
    "recursive2_setup": ". ./pre.sh && $PILSTARK/compressor/main_compressor_setup.js -r $BDIR/recursive2.r1cs -p $BDIR/recursive2.pil -c $BDIR/recursive2.const -e $BDIR/recursive2.exec --cols=18",
    "recursive2_buildstarkinfo": ". ./pre.sh && $PILSTARK/main_genstarkinfo.js -p $BDIR/recursive2.pil -s $BDIR/recursive.starkstruct.json -i $BDIR/recursive2.starkinfo.json",
    "recursive2_buildchelpers": ". ./pre.sh && $PILSTARK/main_buildchelpers.js -s $BDIR/recursive2.starkinfo.json -c $BDIR/recursive2.chelpers -b $BDIR/recursive2.chelpers.bin -g $BDIR/recursive2.chelpers_generic.bin -C Recursive2",
    "recursive2_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/recursive2.const -p $BDIR/recursive2.pil -s $BDIR/recursive2.starkinfo.json -t $BDIR/recursive2.consttree -v $BDIR/recursive2.verkey.json",
    "recursive2_verifier_gencircom": ". ./pre.sh && $PILSTARK/main_pil2circom.js --skipMain --verkeyInput -p $BDIR/recursive2.pil -s $BDIR/recursive2.starkinfo.json -v $BDIR/recursive2.verkey.json -o $BDIR/recursive2.verifier.circom",
    "recursive_pil_check": ". ./pre.sh && F1=$BDIR/recursive1.pil && F2=$BDIR/recursive2.pil && diff $F1 $F2 || (echo \"ERROR: $F1 $F2 are different\"; exit 1)",
    "recursive_verifier_check": ". ./pre.sh && F1=$BDIR/recursive1.verifier.circom && F2=$BDIR/recursive2.verifier.circom && diff $F1 $F2 || (echo \"ERROR: $F1 $F2 are different\"; exit 1)",
    "recursivef_gencircom": ". ./pre.sh && node $NODE src/main_genrecursivef.js --verkey1 $BDIR/recursive1.verkey.json --verkey2 $BDIR/recursive2.verkey.json -o $BDIR/recursivef.circom",
    "recursivef_compile": ". ./pre.sh && circom --r1cs --sym --wasm --c --verbose --O1 --prime goldilocks $BDIR/recursivef.circom -o $BDIR -l node_modules/pil-stark/circuits.gl -l node_modules/circomlib/circuits",
    "recursivef_setup": ". ./pre.sh && $PILSTARK/compressor/main_compressor_setup.js -r $BDIR/recursivef.r1cs -p $BDIR/recursivef.pil -c $BDIR/recursivef.const -e $BDIR/recursivef.exec --cols=12",
    "recursivef_buildstarkinfo": ". ./pre.sh && $PILSTARK/main_genstarkinfo.js -p $BDIR/recursivef.pil -s $BDIR/recursivef.starkstruct.json -i $BDIR/recursivef.starkinfo.json",
    "recursivef_buildchelpers": ". ./pre.sh && $PILSTARK/main_buildchelpers.js -s $BDIR/recursivef.starkinfo.json -c $BDIR/recursivef.chelpers -b $BDIR/recursivef.chelpers.bin -g $BDIR/recursivef.chelpers_generic.bin -C RecursiveF",
    "recursivef_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/recursivef.const -p $BDIR/recursivef.pil -s $BDIR/recursivef.starkinfo.json -t $BDIR/recursivef.consttree -v $BDIR/recursivef.verkey.json",
    "recursivef_verifier_gencircom": ". ./pre.sh && $PILSTARK/main_pil2circom.js --skipMain -p $BDIR/recursivef.pil -s $BDIR/recursivef.starkinfo.json -v $BDIR/recursivef.verkey.json -o $BDIR/recursivef.verifier.circom",
    "final_gencircom": ". ./pre.sh && cp recursive/final.circom $BDIR",
    "final_compile": ". ./pre.sh && circom --O1 --r1cs --sym --wasm --c --verbose $BDIR/final.circom -o $BDIR -l node_modules/pil-stark/circuits.bn128 -l node_modules/circomlib/circuits",
    "downloadptaw": "wget -P build https://hermez.s3-eu-west-1.amazonaws.com/powersOfTau28_hez_final.ptau",
    "fflonk_setup": ". ./pre.sh && $FFLONKSETUP $BDIR/final.r1cs build/powersOfTau28_hez_final.ptau $BDIR/final.fflonk.zkey",
    "fflonk_evk": ". ./pre.sh && $SNARKJS zkev $BDIR/final.fflonk.zkey $BDIR/final.fflonk.verkey.json",
    "fflonk_solidity": ". ./pre.sh && $SNARKJS zkesv $BDIR/final.fflonk.zkey $BDIR/final.fflonk.verifier.sol",
    "prefflonk_setup": ". ./pre.sh && [ -f build/powersOfTau28_hez_final.ptau ] || npm run downloadptaw",
    "prec12a_buildstarkinfo": ". ./pre.sh && if [ \"$npm_config_starkstruct\" = \"debug\" ]; then node tools/gen_debug_starkstruct.js -t GL -p $BDIR/c12a.pil -s $BDIR/c12a.starkstruct.json; else cp src/zkevm.c12a.starkstruct.json $BDIR/c12a.starkstruct.json; fi",
    "buildarith": "node tools/arith/parse tools/arith/arith.ejs.pil -o pil/arith.pil && node tools/arith/arith_eq_gen tools/arith/arith.ejs.pil -o src/sm/sm_arith/sm_arith_##.js",
    "prerecursive1_buildstarkinfo": ". ./pre.sh && if [ \"$npm_config_starkstruct\" = \"debug\" ]; then node tools/gen_debug_starkstruct.js -t GL -p $BDIR/recursive1.pil -s $BDIR/recursive.starkstruct.json; else cp src/recursive.starkstruct.json $BDIR; fi",
    "prerecursivef_buildstarkinfo": ". ./pre.sh && if [ \"$npm_config_starkstruct\" = \"debug\" ]; then node tools/gen_debug_starkstruct.js -t BN128 -p $BDIR/recursivef.pil -s $BDIR/recursivef.starkstruct.json; else cp src/recursivef.starkstruct.json $BDIR; fi",
    "buildsetup:basic": "npm run buildsetup --pil=pil/basic_main.pil --build=build/basic_proof --starkstruct=debug",
    "buildall:basic": "npm run buildall --pil=pil/basic_main.pil --build=build/basic_proof --starkstruct=debug",
    "buildproof:basic": "npm run buildproof --pil=pil/basic_main.pil --build=build/basic_proof --starkstruct=debug",
    "help": "npm_config_help=true && . ./pre.sh",
    "test": "mocha",
    "test:arith": "mocha --max-old-space-size=25000 test/sm/sm_arith.js",
    "test:storage": "mocha test/sm/sm_storage/sm_storage_test.js",
    "test:mem_align": "mocha test/sm_mem_align_test.js",
    "test:diagnostic:exec": "mkdir -p tmp/diagnostic && node test/zkasmtest.js -dE -R '2**23' -N '2**23' test/diagnostic/main.zkasm", 
    "test:diagnostic": "mkdir -p tmp/diagnostic && node --max-old-space-size=130000 test/zkasmtest.js -aCe -Es -R '2**23' -o 'tmp/diagnostic' test/diagnostic/main.zkasm",
    "test:big:keccak": "mkdir -p tmp/big/keccak && node --max-old-space-size=130000 test/zkasmtest.js -Ce -Es -R '2**23' -n 'Global,Main,Rom,PaddingKK,KeccakF,PaddingKKBit,Bits2Field' -o 'tmp/big/keccak' test/features/biggest_keccak.zkasm",
    "test:big:poseidon": "mkdir -p tmp/big/poseidon && node --max-old-space-size=130000 test/zkasmtest.js -Ce -Es -R '2**23' -n 'Global,Main,Rom,PoseidonG,Binary,Storage,ClimbKey' -o 'tmp/big/poseidon' test/features/biggest_poseidon.zkasm",
    "test:big:sha256": "mkdir -p tmp/big/sha256 && node --max-old-space-size=130000 test/zkasmtest.js -Ce -Es -R '2**23' -n 'Global,Main,Rom,Sha256F,PaddingSha256,PaddingSha256Bit,Bits2FieldSha256' -o 'tmp/big/keccak' test/features/biggest_sha256.zkasm",
    "test:counters:arith": "mkdir -p tmp/counters/arith && node --max-old-space-size=130000 test/zkasmtest.js -Ce -Es -R '2**23' -n 'Global,Main,Rom,Arith' -w 'test/diagnostic/' -o 'tmp/counters/arith' header.zkasm counters/utils.zkasm counters/arith.zkasm footer.zkasm",
    "test:counters:binary": "mkdir -p tmp/counters/binary && node --max-old-space-size=130000 test/zkasmtest.js -Ce -Es -R '2**23' -n 'Global,Main,Rom,Binary' -w 'test/diagnostic/' -o 'tmp/counters/binary' header.zkasm counters/utils.zkasm counters/binary.zkasm footer.zkasm",
    "test:counters:keccak": "mkdir -p tmp/counters/keccak && node --max-old-space-size=130000 test/zkasmtest.js -Ce -Es -R '2**23' -n 'Global,Main,Rom,PaddingKK,KeccakF,PaddingKKBit,Bits2Field' -w 'test/diagnostic/' -o 'tmp/counters/keccak' header.zkasm counters/utils.zkasm counters/keccak.zkasm footer.zkasm",
    "test:counters:mem_align": "mkdir -p tmp/counters/mem_align && node --max-old-space-size=130000 test/zkasmtest.js -Ce -Es -R '2**23' -n 'Global,Main,Rom,MemAlign' -w 'test/diagnostic/' -o 'tmp/counters/mem_align' header.zkasm counters/utils.zkasm counters/mem_align.zkasm footer.zkasm",
    "test:counters:padding_pg": "mkdir -p tmp/counters/padding_pg && node --max-old-space-size=130000 test/zkasmtest.js -Ce -Es -R '2**23' -n 'Global,Main,Rom,Binary,PaddingPG,PoseidonG' -w 'test/diagnostic/' -o 'tmp/counters/padding_pg' header.zkasm counters/utils.zkasm counters/padding_pg.zkasm footer.zkasm",
    "test:counters:poseidon": "mkdir -p tmp/counters/poseidon && node --max-old-space-size=130000 test/zkasmtest.js -Ce -Es -R '2**23' -n 'Global,Main,Rom,PoseidonG,Binary,Storage' -w 'test/diagnostic/' -o 'tmp/counters/poseidon' header.zkasm counters/utils.zkasm counters/poseidon.zkasm footer.zkasm",
    "test:counters:sha256": "mkdir -p tmp/counters/sha256 && node --max-old-space-size=130000 test/zkasmtest.js -Ce -Es -R '2**23' -n 'Global,Main,Rom,PaddingSha256,Sha256F,PaddingSha256Bit,Bits2FieldSha256' -w 'test/diagnostic/' -o 'tmp/counters/sha256' header.zkasm counters/utils.zkasm counters/sha256.zkasm footer.zkasm",
    "test:counters:storage": "mkdir -p tmp/counters/storage && node --max-old-space-size=130000 test/zkasmtest.js -Ce -Es -R '2**23' -n 'Global,Main,Rom,Storage,ClimbKey' -w 'test/diagnostic/' -o 'tmp/counters/storage' header.zkasm counters/utils.zkasm counters/storage.zkasm footer.zkasm",
    "test:all-inputs": "mocha --timeout 0 --max-old-space-size=8000 tools/run-test/run-inputs-mocha.test.js",
    "test:full-tracer": "node --max-old-space-size=16000 tools/full-tracer-tests/full-tracer-tests.js",
    "eslint:tracer": "npx eslint src/sm/sm_main/debug/**.js",
    "eslint:sm_main": "npx eslint src/sm/sm_main/sm_main_exec.js",
    "eslint": "npm run eslint:tracer && npm run eslint:sm_main"
  },
  "author": "Jordi Baylina",
  "license": "UNLICENSED",
  "dependencies": {
    "@0xpolygonhermez/zkasmcom": "github:0xPolygonHermez/zkasmcom#v5.0.0-fork.8",
    "@0xpolygonhermez/zkevm-commonjs": "github:0xpolygonhermez/zkevm-commonjs#v6.0.0-fork.9",
    "@0xpolygonhermez/zkevm-rom": "github:0xPolygonHermez/zkevm-rom#feature/24",
    "@0xpolygonhermez/zkevm-rom-25": "github:0xPolygonHermez/zkevm-rom#feature/25",
    "@0xpolygonhermez/zkevm-storage-rom": "https://github.com/0xPolygonHermez/zkevm-storage-rom.git#v4.0.0-fork.7",
    "@0xpolygonhermez/zkevm-testvectors": "github:0xPolygonHermez/zkevm-testvectors#v6.0.1-fork.9",
    "@grpc/grpc-js": "^1.8.14",
    "chalk": "^3.0.0",
    "circomlib": "^2.0.3",
    "circomlibjs": "^0.1.1",
    "docker-compose": "^0.23.19",
    "ejs": "^3.1.6",
    "ethers": "^5.4.7",
    "ffjavascript": "0.2.63",
    "fs": "^0.0.1-security",
    "json-bigint": "^1.0.0",
    "lodash": "^4.17.21",
    "pil-stark": "https://github.com/0xPolygonHermez/pil-stark.git#feature/new_parser",
    "pilcom": "0.0.24",
    "snarkjs": "0.7.0",
    "yargs": "^17.4.0"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "chai-as-promised": "^7.1.1",
    "circom_tester": "^0.0.20",
    "eslint": "^8.34.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-plugin-mocha": "^10.1.0",
    "mocha": "^9.1.3"
  }
}
