{
  "name": "@0xpolygonhermez/zkevm-proverjs",
  "version": "4.0.0",
  "description": "JS version of the zkProver.",
  "main": "index.js",
  "config": {
    "steps_piltoolfiles": [
      "buildrom buildpil buildstoragerom buildconstants exec"
    ],
    "steps": [
      "buildrom buildpil buildstoragerom buildconstants exec pilverify buildstarkinfo buildchelpers buildconstanttree prove verify",
      "c12a_setup c12a_buildconstanttree",
      "recursive1_setup recursive1_buildconstanttree",
      "recursive2_setup recursive2_buildconstanttree",
      "recursive2_verifier_gencircom recursive_pil_check recursive_verifier_check ",
      "recursivef_setup recursivef_buildconstanttree",
      "final_setup",
      "fflonk_setup fflonk_evk fflonk_solidity"
    ],
    "steps_setup": [
      "buildrom buildpil buildstoragerom buildconstants buildstarkinfo buildchelpers buildconstanttree",
      "c12a_setup c12a_buildconstanttree",
      "recursive1_setup recursive1_buildconstanttree",
      "recursive2_setup recursive2_buildconstanttree",
      "recursive2_verifier_gencircom recursive_pil_check recursive_verifier_check ",
      "recursivef_setup recursivef_buildconstanttree",
      "final_setup",
      "fflonk_setup fflonk_evk fflonk_solidity"
    ],
    "steps_setup_blob": [
      "buildrom buildpil buildstoragerom buildconstants buildstarkinfo buildchelpers buildconstanttree",
      "c12a_setup c12a_buildconstanttree",
      "recursive1_setup recursive1_buildconstanttree",
      "recursive2_setup_eip4844 recursive2_buildconstanttree",
      "recursive2_verifier_gencircom recursive_pil_check recursive_verifier_check ",
      "blob_inner_buildrom blob_inner_buildpil blob_inner_buildstoragerom blob_inner_buildconstants blob_inner_buildstarkinfo blob_inner_buildchelpers blob_inner_buildconstanttree",
      "blob_inner_compressor_setup blob_inner_compressor_buildconstanttree",
      "blob_inner_recursive1_setup blob_inner_recursive1_buildconstanttree",
      "blob_outer_setup blob_outer_buildconstanttree",
      "blob_outer_recursive2_setup blob_outer_recursive2_buildconstanttree",
      "blob_outer_recursive2_verifier_gencircom blob_outer_recursive_pil_check blob_outer_recursive_verifier_check",
      "blob_outer_recursivef_setup blob_outer_recursivef_buildconstanttree",
      "blob_outer_final_setup",
      "fflonk_setup fflonk_evk fflonk_solidity"
    ],
    "steps_proof": [ "exec pilverify prove verify" ]
  },
  "scripts": {
    "build:input": "node tools/build-genesis/build_genesis.js",
    "build:input-recursive": "node tools/build-genesis-recursive/build_genesis_recursive.js",
    "buildall": "tools/build_all.sh ${npm_package_config_steps}",
    "buildpiltoolfiles": "tools/build_all.sh ${npm_package_config_steps_piltoolfiles}",
    "buildsetup": "tools/build_all.sh ${npm_package_config_steps_setup}",
    "buildsetup_blob": "tools/build_all.sh ${npm_package_config_steps_setup_blob}",
    "buildproof": "tools/build_all.sh ${npm_package_config_steps_proof}",
    "buildrom": ". ./pre.sh && ROM_DIR=node_modules/@0xpolygonhermez/zkevm-rom && (cd $ROM_DIR && npm run build) && cp $ROM_DIR/build/rom.json $ROM_DIR/build/metadata-rom.txt $BDIR/",
    "buildpil": ". ./pre.sh && mkdir -p $BDIR/pil/zkevm && node $NODE node_modules/.bin/pilcom $PIL -o $BDIR/pil/zkevm/$PIL_JSON -c $BDIR/pols_generated -n fork_1 && for PF in `tools/included_pils.sh $BDIR/pil/zkevm/$PIL_JSON`; do cp -v $PIL_DIR/$PF $BDIR/pil/zkevm/$PF; done",
    "buildstoragerom": ". ./pre.sh && ROM_DIR=node_modules/@0xpolygonhermez/zkevm-storage-rom && (cd $ROM_DIR && npm run build:rom) && cp $ROM_DIR/build/storage_sm_rom.json src/sm/sm_storage && cp src/sm/sm_storage/storage_sm_rom.json $BDIR/",
    "buildconstants": ". ./pre.sh && node $NODE src/main_buildconstants -p $PIL -r $BDIR/rom.json -o $BDIR/zkevm.const",
    "buildstarkinfo": ". ./pre.sh && $PILSTARK/main_genstarkinfo.js -p $PIL -s $BDIR/zkevm.starkstruct.json -i $BDIR/zkevm.starkinfo.json",
    "buildchelpers": ". ./pre.sh && $PILSTARK/main_buildchelpers.js -s $BDIR/zkevm.starkinfo.json -c $BDIR/zkevm.chelpers -C Zkevm -b $BDIR/zkevm.chelpers.bin",
    "buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/zkevm.const -p $PIL -s $BDIR/zkevm.starkstruct.json -t $BDIR/zkevm.consttree -v $BDIR/zkevm.verkey.json",
    "exec": ". ./pre.sh && INPUT=${npm_config_input:=tools/build-genesis/input_executor.json} && echo \"input: $INPUT\" && node $NODE src/main_executor $INPUT -p $PIL -r $BDIR/rom.json -o $BDIR/zkevm$NTH.commit && cp $INPUT $BDIR/input_executor.json",
    "pilverify": ". ./pre.sh && $PILCOM/main_pilverifier.js $BDIR/zkevm$NTH.commit -c $BDIR/zkevm.const -p $PIL",
    "prove": ". ./pre.sh && $PILSTARK/main_prover.js -m $BDIR/zkevm$NTH.commit  -c $BDIR/zkevm.const -t $BDIR/zkevm.consttree -p $PIL -s $BDIR/zkevm.starkinfo.json -o $BDIR/zkevm$NTH.proof.json -z $BDIR/zkevm$NTH.zkin.proof.json -b $BDIR/zkevm$NTH.public.json",
    "verify": ". ./pre.sh && $PILSTARK/main_verifier.js -p $PIL -s $BDIR/zkevm.starkinfo.json -o $BDIR/zkevm$NTH.proof.json -b $BDIR/zkevm$NTH.public.json -v $BDIR/zkevm.verkey.json",
    "blob_inner_buildrom": ". ./pre.sh && ROM_DIR=node_modules/@0xpolygonhermez/zkevm-rom && (cd $ROM_DIR && npm run build) && cp $ROM_DIR/build/rom.json $ROM_DIR/build/metadata-rom.txt $BDIR/",
    "blob_inner_buildpil": ". ./pre.sh && mkdir -p $BDIR/pil/zkevm && node $NODE node_modules/.bin/pilcom $PIL -o $BDIR/pil/zkevm/$PIL_JSON -c $BDIR/pols_generated -n fork_1 && for PF in `tools/included_pils.sh $BDIR/pil/zkevm/$PIL_JSON`; do cp -v $PIL_DIR/$PF $BDIR/pil/zkevm/$PF; done",
    "blob_inner_buildstoragerom": ". ./pre.sh && ROM_DIR=node_modules/@0xpolygonhermez/zkevm-storage-rom && (cd $ROM_DIR && npm run build:rom) && cp $ROM_DIR/build/storage_sm_rom.json src/sm/sm_storage && cp src/sm/sm_storage/storage_sm_rom.json $BDIR/",
    "blob_inner_buildconstants": ". ./pre.sh && node $NODE src/main_buildconstants -p $PIL -r $BDIR/rom.json -o $BDIR/blob_inner.const",
    "blob_inner_buildstarkinfo": ". ./pre.sh && $PILSTARK/main_genstarkinfo.js -p $PIL -s $BDIR/blob_inner.starkstruct.json -i $BDIR/blob_inner.starkinfo.json",
    "blob_inner_buildchelpers": ". ./pre.sh && $PILSTARK/main_buildchelpers.js -s $BDIR/blob_inner.starkinfo.json -c $BDIR/blobInner.chelpers -C BlobInner -b $BDIR/blobInner.chelpers.bin",
    "blob_inner_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/blob_inner.const -p $PIL -s $BDIR/blob_inner.starkstruct.json -t $BDIR/blob_inner.consttree -v $BDIR/blob_inner.verkey.json",
    "c12a_setup": ". ./pre.sh && node $NODE src/main_genSetup.js -t $BDIR/c12a.starkstruct.json -s $BDIR/zkevm.starkinfo.json --cols=18 --template=compressor --skipconsttree=true --filename=c12a --verifiername=zkevm -v $BDIR/zkevm.verkey.json --builddir=$BDIR",
    "c12a_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/c12a.const -p $BDIR/c12a.pil -s $BDIR/c12a.starkstruct.json -t $BDIR/c12a.consttree -v $BDIR/c12a.verkey.json",
    "recursive1_setup": ". ./pre.sh && node $NODE src/main_genSetup.js -t $BDIR/recursive.starkstruct.json -s $BDIR/c12a.starkinfo.json --cols=18 --template=recursive1 --filename=recursive1 --skipconsttree=true -v $BDIR/c12a.verkey.json --verifiername=c12a --builddir=$BDIR",
    "recursive1_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/recursive1.const -p $BDIR/recursive1.pil -s $BDIR/recursive.starkstruct.json -t $BDIR/recursive1.consttree -v $BDIR/recursive1.verkey.json",
    "recursive2_setup": ". ./pre.sh && node $NODE src/main_genSetup.js -t $BDIR/recursive.starkstruct.json -s $BDIR/recursive1.starkinfo.json --cols=18 --template=recursive2 --filename=recursive2 -v $BDIR/recursive1.verkey.json --batch --skipconsttree=true --verifiername=recursive1 --builddir=$BDIR",
    "recursive2_setup_eip4844": ". ./pre.sh && node $NODE src/main_genSetup.js -t $BDIR/recursive.starkstruct.json -s $BDIR/recursive1.starkinfo.json --cols=18 --template=recursive2 --filename=recursive2 -v $BDIR/recursive1.verkey.json --batch --skipconsttree=true --verifiername=recursive1 --builddir=$BDIR --eip4844",
    "recursive2_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/recursive2.const -p $BDIR/recursive2.pil -s $BDIR/recursive.starkstruct.json -t $BDIR/recursive2.consttree -v $BDIR/recursive2.verkey.json",
    "recursive2_verifier_gencircom": ". ./pre.sh && $PILSTARK/main_pil2circom.js --skipMain --verkeyInput --enableInput -p $BDIR/recursive2.pil -s $BDIR/recursive2.starkinfo.json -v $BDIR/recursive2.verkey.json -o $BDIR/recursive2.verifier.circom",
    "recursive_pil_check": ". ./pre.sh && F1=$BDIR/recursive1.pil && F2=$BDIR/recursive2.pil && diff $F1 $F2 || (echo \"ERROR: $F1 $F2 are different\"; exit 1)",
    "recursive_verifier_check": ". ./pre.sh && F1=$BDIR/recursive1.verifier.circom && F2=$BDIR/recursive2.verifier.circom && diff $F1 $F2 || (echo \"ERROR: $F1 $F2 are different\"; exit 1)",
    "blob_inner_compressor_setup": ". ./pre.sh && node $NODE src/main_genSetup.js -t $BDIR/blob_inner_compressor.starkstruct.json -s $BDIR/blob_inner.starkinfo.json --cols=18 --template=compressor --skipconsttree=true --filename=blob_inner_compressor --verifiername=blob_inner -v $BDIR/blob_inner.verkey.json --builddir=$BDIR",
    "blob_inner_compressor_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/blob_inner_compressor.const -p $BDIR/blob_inner_compressor.pil -s $BDIR/blob_inner_compressor.starkstruct.json -t $BDIR/blob_inner_compressor.consttree -v $BDIR/blob_inner_compressor.verkey.json",
    "blob_inner_recursive1_setup": ". ./pre.sh && node $NODE src/main_genSetup.js -t $BDIR/recursive_blob_inner.starkstruct.json -s $BDIR/blob_inner_compressor.starkinfo.json --cols=18 --template=recursive1 --filename=blob_inner_recursive1 --skipconsttree=true -v $BDIR/blob_inner_compressor.verkey.json --verifiername=blob_inner_compressor --builddir=$BDIR",
    "blob_inner_recursive1_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/blob_inner_recursive1.const -p $BDIR/blob_inner_recursive1.pil -s $BDIR/blob_inner_recursive1.starkstruct.json -t $BDIR/blob_inner_recursive1.consttree -v $BDIR/blob_inner_recursive1.verkey.json",
    "blob_outer_setup": ". ./pre.sh && node $NODE src/main_genSetup.js -t $BDIR/recursive_blob_outer.starkstruct.json -s $BDIR/recursive2.starkinfo.json $BDIR/blob_inner_recursive1.starkinfo.json --cols=18 --template=blob_outer --skipconsttree=true -v $BDIR/recursive1.verkey.json $BDIR/recursive2.verkey.json $BDIR/blob_inner_recursive1.verkey.json --verifiername=recursive2 --verifiername2=blob_inner_recursive1 --builddir=$BDIR",
    "blob_outer_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/blob_outer.const -p $BDIR/blob_outer.pil -s $BDIR/recursive_blob_outer.starkstruct.json -t $BDIR/blob_outer.consttree -v $BDIR/blob_outer.verkey.json",
    "blob_outer_recursive2_setup": ". ./pre.sh && node $NODE src/main_genSetup.js -t $BDIR/recursive_blob_outer.starkstruct.json -s $BDIR/recursive_blob_outer.starkinfo.json --cols=18 --template=recursive2 --filename=blob_outer_recursive2 -v $BDIR/blob_outer.verkey.json --skipconsttree=true --verifiername=blob_outer --builddir=$BDIR",
    "blob_outer_recursive2_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/blob_outer_recursive2.const -p $BDIR/blob_outer_recursive2.pil -s $BDIR/recursive_blob_outer.starkstruct.json -t $BDIR/blob_outer_recursive2.consttree -v $BDIR/blob_outer_recursive2.verkey.json",
    "blob_outer_recursive2_verifier_gencircom": ". ./pre.sh && $PILSTARK/main_pil2circom.js --skipMain --verkeyInput -p $BDIR/blob_outer_recursive2.pil -s $BDIR/blob_outer_recursive2.starkinfo.json -v $BDIR/blob_outer_recursive2.verkey.json -o $BDIR/blob_outer_recursive2.verifier.circom",
    "blob_outer_recursive_pil_check": ". ./pre.sh && F1=$BDIR/blob_outer.pil && F2=$BDIR/blob_outer_recursive2.pil && diff $F1 $F2 || (echo \"ERROR: $F1 $F2 are different\"; exit 1)",
    "blob_outer_recursive_verifier_check": ". ./pre.sh && F1=$BDIR/blob_outer.verifier.circom && F2=$BDIR/blob_outer_recursive2.verifier.circom && diff $F1 $F2 || (echo \"ERROR: $F1 $F2 are different\"; exit 1)",
    "recursivef_setup": ". ./pre.sh && node $NODE src/main_genSetup.js -t $BDIR/recursivef.starkstruct.json -s $BDIR/recursive2.starkinfo.json --cols=12 --template=recursivef --filename=recursivef -v $BDIR/recursive1.verkey.json $BDIR/recursive2.verkey.json --batch --skipconsttree=true --verifiername=recursive2 --builddir=$BDIR",
    "recursivef_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/recursivef.const -p $BDIR/recursivef.pil -s $BDIR/recursivef.starkstruct.json -t $BDIR/recursivef.consttree -v $BDIR/recursivef.verkey.json",
    "final_setup": ". ./pre.sh && node $NODE src/main_genFinalSetup.js -s $BDIR/recursivef.starkinfo.json --template=final -v $BDIR/recursivef.verkey.json --verifiername=recursivef --builddir=$BDIR --arity=4",
    "blob_outer_recursivef_setup": ". ./pre.sh && node $NODE src/main_genSetup.js -t $BDIR/blob_outer_recursivef.starkstruct.json -s $BDIR/blob_outer_recursive2.starkinfo.json --cols=12 --template=recursivef --filename=blob_outer_recursivef -v $BDIR/blob_outer.verkey.json $BDIR/blob_outer_recursive2.verkey.json --skipconsttree=true --verifiername=blob_outer_recursive2 --builddir=$BDIR",
    "blob_outer_recursivef_buildconstanttree": ". ./pre.sh && $BCTREE -c $BDIR/blob_outer_recursivef.const -p $BDIR/blob_outer_recursivef.pil -s $BDIR/blob_outer_recursivef_outer.starkstruct.json -t $BDIR/blob_outer_recursivef.consttree -v $BDIR/blob_outer_recursivef.verkey.json",
    "blob_outer_final_setup": ". ./pre.sh && node $NODE src/main_genFinalSetup.js -s $BDIR/blob_outer_recursivef.starkinfo.json --template=final -v $BDIR/blob_outer_recursivef.verkey.json --verifiername=blob_outer_recursivef --builddir=$BDIR --eip4844 --arity=4",
    "downloadptaw": "wget -P build https://hermez.s3-eu-west-1.amazonaws.com/powersOfTau28_hez_final.ptau",
    "fflonk_setup": ". ./pre.sh && $SNARKJS ffs $BDIR/final.r1cs build/powersOfTau28_hez_final.ptau $BDIR/final.fflonk.zkey --verbose",
    "fflonk_evk": ". ./pre.sh && $SNARKJS zkev $BDIR/final.fflonk.zkey $BDIR/final.fflonk.verkey.json",
    "fflonk_solidity": ". ./pre.sh && $SNARKJS zkesv $BDIR/final.fflonk.zkey $BDIR/final.fflonk.verifier.sol",
    "prefflonk_setup": ". ./pre.sh && [ -f build/powersOfTau28_hez_final.ptau ] || npm run downloadptaw",
    "prebuildstarkinfo": ". ./pre.sh && if [ \"$npm_config_starkstruct\" = \"debug\" ]; then node tools/gen_debug_starkstruct.js -t GL -p $PIL -s $BDIR/zkevm.starkstruct.json; else cp src/stark_struct/batch/zkevm.starkstruct.json $BDIR/zkevm.starkstruct.json; fi",
    "prec12a_setup": ". ./pre.sh && if [ \"$npm_config_starkstruct\" = \"debug\" ]; then node tools/gen_debug_starkstruct.js -t GL -p $BDIR/c12a.pil -s $BDIR/c12a.starkstruct.json; else cp src/stark_struct/batch/c12a.starkstruct.json $BDIR/c12a.starkstruct.json; fi",
    "buildarith": "node tools/arith/parse tools/arith/arith.ejs.pil -o pil/arith.pil && node tools/arith/arith_eq_gen tools/arith/arith.ejs.pil -o src/sm/sm_arith/sm_arith_##.js",
    "prerecursive1_setup": ". ./pre.sh && if [ \"$npm_config_starkstruct\" = \"debug\" ]; then node tools/gen_debug_starkstruct.js -t GL -p $BDIR/recursive1.pil -s $BDIR/recursive.starkstruct.json; else cp src/stark_struct/batch/recursive.starkstruct.json $BDIR/recursive.starkstruct.json; fi",
    "prerecursivef_setup": ". ./pre.sh && if [ \"$npm_config_starkstruct\" = \"debug\" ]; then node tools/gen_debug_starkstruct.js -t BN128 -p $BDIR/recursivef.pil -s $BDIR/recursivef.starkstruct.json; else cp src/stark_struct/batch/recursivef.starkstruct.json $BDIR/recursivef.starkstruct.json; fi",
    "preblob_inner_compressor_setup": ". ./pre.sh && if [ \"$npm_config_starkstruct\" = \"debug\" ]; then node tools/gen_debug_starkstruct.js -t GL -p $BDIR/blob_inner_compressor.pil -s $BDIR/blob_inner_compressor.starkstruct.json; else cp src/stark_struct/blob/blob_inner_compressor_inner.starkstruct.json $BDIR/blob_inner_compressor.starkstruct.json; fi",
    "preblob_inner_recursive1_setup": ". ./pre.sh && if [ \"$npm_config_starkstruct\" = \"debug\" ]; then node tools/gen_debug_starkstruct.js -t GL -p $BDIR/blob_inner_recursive1.pil -s $BDIR/recursive_blob_inner.starkstruct.json; else cp src/stark_struct/blob/recursive_blob_inner.starkstruct.json $BDIR/recursive_blob_inner.starkstruct.json; fi",
    "preblob_outer_setup": ". ./pre.sh && if [ \"$npm_config_starkstruct\" = \"debug\" ]; then node tools/gen_debug_starkstruct.js -t GL -p $BDIR/blob_outer.pil -s $BDIR/recursive_blob_outer.starkstruct.json; else cp src/stark_struct/blob/recursive_blob_outer.starkstruct.json $BDIR/recursive_blob_outer.starkstruct.json; fi",
    "preblob_outer_recursivef_setup": ". ./pre.sh && if [ \"$npm_config_starkstruct\" = \"debug\" ]; then node tools/gen_debug_starkstruct.js -t GL -p $BDIR/blob_outer_recursivef.pil -s $BDIR/blob_outer_recursivef_outer.starkstruct.json; else cp src/stark_struct/blob/blob_outer_recursivef_outer.starkstruct.json $BDIR/blob_outer_recursivef_outer.starkstruct.json; fi",
    "buildsetup:basic": "npm run buildsetup --pil=pil/basic_main.pil --build=build/basic_proof --starkstruct=debug",
    "buildall:basic": "npm run buildall --pil=pil/basic_main.pil --build=build/basic_proof --starkstruct=debug",
    "buildproof:basic": "npm run buildproof --pil=pil/basic_main.pil --build=build/basic_proof --starkstruct=debug",
    "help": "npm_config_help=true && . ./pre.sh",
    "test": "mocha",
    "test:arith": "mocha --max-old-space-size=25000 test/sm/sm_arith.js",
    "test:storage": "mocha test/sm/sm_storage/sm_storage_test.js",
    "test:mem_align": "mocha test/sm_mem_align_test.js",
    "test:counters:arith": "mocha test/counters/arith.js",
    "test:counters:binary": "mocha test/counters/binary.js",
    "test:counters:keccak": "mocha test/counters/keccak.js",
    "test:counters:mem_align": "mocha test/counters/mem_align.js",
    "test:counters:padding_pg": "mocha test/counters/padding_pg.js",
    "test:counters:poseidon": "mocha test/counters/poseidon.js",
    "test:counters:storage": "mocha test/counters/storage.js",
    "test:all-inputs": "mocha --timeout 0 --max-old-space-size=8000 tools/run-test/run-inputs-mocha.test.js",
    "test:full-tracer": "node --max-old-space-size=16000 tools/full-tracer-tests/full-tracer-tests.js",
    "eslint:tracer": "npx eslint src/sm/sm_main/debug/**.js",
    "eslint:sm_main": "npx eslint src/sm/sm_main/sm_main_exec.js",
    "eslint": "npm run eslint:tracer && npm run eslint:sm_main"
  },
  "author": "Jordi Baylina",
  "license": "UNLICENSED",
  "dependencies": {
    "@0xpolygonhermez/zkasmcom": "github:0xPolygonHermez/zkasmcom#v5.0.0-fork.8",
    "@0xpolygonhermez/zkevm-commonjs": "github:0xpolygonhermez/zkevm-commonjs#v5.0.0-fork.8",
    "@0xpolygonhermez/zkevm-rom": "github:0xPolygonHermez/zkevm-rom#v5.0.0-fork.8",
    "@0xpolygonhermez/zkevm-storage-rom": "https://github.com/0xPolygonHermez/zkevm-storage-rom.git#v4.0.0-fork.7",
    "@0xpolygonhermez/zkevm-testvectors": "github:0xPolygonHermez/zkevm-testvectors#v5.0.0-fork.8",
    "@grpc/grpc-js": "^1.8.14",
    "chalk": "^3.0.0",
    "circomlib": "^2.0.3",
    "circomlibjs": "^0.1.1",
    "docker-compose": "^0.23.19",
    "ejs": "^3.1.6",
    "ethers": "^5.4.7",
    "ffjavascript": "0.2.63",
    "fs": "^0.0.1-security",
    "json-bigint": "^1.0.0",
    "lodash": "^4.17.21",
    "pil-stark": "https://github.com/0xPolygonHermez/pil-stark.git#feature/memoryOptimization",
    "pilcom": "0.0.24",
    "snarkjs": "0.7.0",
    "yargs": "^17.4.0"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "chai-as-promised": "^7.1.1",
    "circom_tester": "^0.0.20",
    "eslint": "^8.34.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-plugin-mocha": "^10.1.0",
    "mocha": "^9.1.3"
  }
}